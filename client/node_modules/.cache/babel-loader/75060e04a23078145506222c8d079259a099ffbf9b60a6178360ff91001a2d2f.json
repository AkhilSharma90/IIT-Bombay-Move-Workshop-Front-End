{"ast":null,"code":"// src/useWallet.tsx\nimport { WalletReadyState } from \"@aptos-labs/wallet-adapter-core\";\nimport { createContext, useContext } from \"react\";\nvar DEFAULT_COUNTEXT = {\n  connected: false\n};\nvar WalletContext = createContext(DEFAULT_COUNTEXT);\nfunction useWallet() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletContextState\");\n  }\n  return context;\n}\n\n// src/WalletProvider.tsx\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { WalletCore } from \"@aptos-labs/wallet-adapter-core\";\nimport { jsx } from \"react/jsx-runtime\";\nvar initialState = {\n  connected: false,\n  account: null,\n  network: null,\n  wallet: null\n};\nvar AptosWalletAdapterProvider = _ref => {\n  let {\n    children,\n    plugins,\n    autoConnect = false\n  } = _ref;\n  const [{\n    connected,\n    account,\n    network,\n    wallet\n  }, setState] = useState(initialState);\n  const walletCore = useMemo(() => new WalletCore(plugins), []);\n  const [wallets, setWallets] = useState(walletCore.wallets);\n  const connect = walletName => {\n    try {\n      walletCore.connect(walletName);\n    } catch (e) {\n      console.log(\"connect error\", e);\n    }\n  };\n  const disconnect = () => {\n    try {\n      walletCore.disconnect();\n    } catch (e) {\n      console.log(\"disconnect error\", e);\n    }\n  };\n  const signAndSubmitTransaction = async transaction => {\n    try {\n      return await walletCore.signAndSubmitTransaction(transaction);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const signTransaction = async transaction => {\n    try {\n      return await walletCore.signTransaction(transaction);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const signMessage = async message => {\n    try {\n      return await walletCore.signMessage(message);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const signMessageAndVerify = async message => {\n    try {\n      return await walletCore.signMessageAndVerify(message);\n    } catch (error) {\n      throw error;\n    }\n  };\n  useEffect(() => {\n    if (autoConnect) {\n      if (localStorage.getItem(\"AptosWalletName\")) {\n        connect(localStorage.getItem(\"AptosWalletName\"));\n      }\n    }\n  }, [wallets]);\n  useEffect(() => {\n    if (connected) {\n      walletCore.onAccountChange();\n      walletCore.onNetworkChange();\n    }\n  }, [wallets, connected]);\n  const handleConnect = () => {\n    setState(state => {\n      return {\n        ...state,\n        connected: true,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: walletCore.wallet\n      };\n    });\n  };\n  const handleDisconnect = () => {\n    if (!connected) return;\n    setState(state => {\n      return {\n        ...state,\n        connected: false,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: null\n      };\n    });\n  };\n  const handleAccountChange = useCallback(() => {\n    if (!connected) return;\n    if (!walletCore.wallet) return;\n    setState(state => {\n      return {\n        ...state,\n        account: walletCore.account\n      };\n    });\n  }, [connected]);\n  const handleNetworkChange = useCallback(() => {\n    if (!connected) return;\n    if (!walletCore.wallet) return;\n    setState(state => {\n      return {\n        ...state,\n        network: walletCore.network\n      };\n    });\n  }, [connected]);\n  const handleReadyStateChange = wallet2 => {\n    setWallets(prevWallets => {\n      const index = prevWallets.findIndex(currWallet => currWallet === wallet2);\n      if (index === -1) return prevWallets;\n      return [...prevWallets.slice(0, index), wallet2, ...prevWallets.slice(index + 1)];\n    });\n  };\n  useEffect(() => {\n    walletCore.on(\"connect\", handleConnect);\n    walletCore.on(\"disconnect\", handleDisconnect);\n    walletCore.on(\"accountChange\", handleAccountChange);\n    walletCore.on(\"networkChange\", handleNetworkChange);\n    walletCore.on(\"readyStateChange\", handleReadyStateChange);\n    return () => {\n      walletCore.off(\"connect\", handleConnect);\n      walletCore.off(\"disconnect\", handleDisconnect);\n      walletCore.off(\"accountChange\", handleAccountChange);\n      walletCore.off(\"networkChange\", handleNetworkChange);\n      walletCore.off(\"readyStateChange\", handleReadyStateChange);\n    };\n  }, [wallets, connected]);\n  return /* @__PURE__ */jsx(WalletContext.Provider, {\n    value: {\n      connect,\n      account,\n      network,\n      connected,\n      disconnect,\n      wallet,\n      wallets,\n      signAndSubmitTransaction,\n      signTransaction,\n      signMessage,\n      signMessageAndVerify\n    },\n    children\n  });\n};\nexport { AptosWalletAdapterProvider, WalletReadyState, useWallet };","map":{"version":3,"names":["WalletReadyState","createContext","useContext","DEFAULT_COUNTEXT","connected","WalletContext","useWallet","context","Error","useCallback","useEffect","useMemo","useState","WalletCore","jsx","initialState","account","network","wallet","AptosWalletAdapterProvider","children","plugins","autoConnect","setState","walletCore","wallets","setWallets","connect","walletName","e","console","log","disconnect","signAndSubmitTransaction","transaction","error","signTransaction","signMessage","message","signMessageAndVerify","localStorage","getItem","onAccountChange","onNetworkChange","handleConnect","state","handleDisconnect","handleAccountChange","handleNetworkChange","handleReadyStateChange","wallet2","prevWallets","index","findIndex","currWallet","slice","on","off","Provider","value"],"sources":["/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/@aptos-labs/wallet-adapter-react/dist/index.mjs"],"sourcesContent":["// src/useWallet.tsx\nimport {\n  WalletReadyState\n} from \"@aptos-labs/wallet-adapter-core\";\nimport { createContext, useContext } from \"react\";\nvar DEFAULT_COUNTEXT = {\n  connected: false\n};\nvar WalletContext = createContext(\n  DEFAULT_COUNTEXT\n);\nfunction useWallet() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletContextState\");\n  }\n  return context;\n}\n\n// src/WalletProvider.tsx\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from \"react\";\nimport { WalletCore } from \"@aptos-labs/wallet-adapter-core\";\nimport { jsx } from \"react/jsx-runtime\";\nvar initialState = {\n  connected: false,\n  account: null,\n  network: null,\n  wallet: null\n};\nvar AptosWalletAdapterProvider = ({\n  children,\n  plugins,\n  autoConnect = false\n}) => {\n  const [{ connected, account, network, wallet }, setState] = useState(initialState);\n  const walletCore = useMemo(() => new WalletCore(plugins), []);\n  const [wallets, setWallets] = useState(walletCore.wallets);\n  const connect = (walletName) => {\n    try {\n      walletCore.connect(walletName);\n    } catch (e) {\n      console.log(\"connect error\", e);\n    }\n  };\n  const disconnect = () => {\n    try {\n      walletCore.disconnect();\n    } catch (e) {\n      console.log(\"disconnect error\", e);\n    }\n  };\n  const signAndSubmitTransaction = async (transaction) => {\n    try {\n      return await walletCore.signAndSubmitTransaction(transaction);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const signTransaction = async (transaction) => {\n    try {\n      return await walletCore.signTransaction(transaction);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const signMessage = async (message) => {\n    try {\n      return await walletCore.signMessage(message);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const signMessageAndVerify = async (message) => {\n    try {\n      return await walletCore.signMessageAndVerify(message);\n    } catch (error) {\n      throw error;\n    }\n  };\n  useEffect(() => {\n    if (autoConnect) {\n      if (localStorage.getItem(\"AptosWalletName\")) {\n        connect(localStorage.getItem(\"AptosWalletName\"));\n      }\n    }\n  }, [wallets]);\n  useEffect(() => {\n    if (connected) {\n      walletCore.onAccountChange();\n      walletCore.onNetworkChange();\n    }\n  }, [wallets, connected]);\n  const handleConnect = () => {\n    setState((state) => {\n      return {\n        ...state,\n        connected: true,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: walletCore.wallet\n      };\n    });\n  };\n  const handleDisconnect = () => {\n    if (!connected)\n      return;\n    setState((state) => {\n      return {\n        ...state,\n        connected: false,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: null\n      };\n    });\n  };\n  const handleAccountChange = useCallback(() => {\n    if (!connected)\n      return;\n    if (!walletCore.wallet)\n      return;\n    setState((state) => {\n      return {\n        ...state,\n        account: walletCore.account\n      };\n    });\n  }, [connected]);\n  const handleNetworkChange = useCallback(() => {\n    if (!connected)\n      return;\n    if (!walletCore.wallet)\n      return;\n    setState((state) => {\n      return {\n        ...state,\n        network: walletCore.network\n      };\n    });\n  }, [connected]);\n  const handleReadyStateChange = (wallet2) => {\n    setWallets((prevWallets) => {\n      const index = prevWallets.findIndex(\n        (currWallet) => currWallet === wallet2\n      );\n      if (index === -1)\n        return prevWallets;\n      return [\n        ...prevWallets.slice(0, index),\n        wallet2,\n        ...prevWallets.slice(index + 1)\n      ];\n    });\n  };\n  useEffect(() => {\n    walletCore.on(\"connect\", handleConnect);\n    walletCore.on(\"disconnect\", handleDisconnect);\n    walletCore.on(\"accountChange\", handleAccountChange);\n    walletCore.on(\"networkChange\", handleNetworkChange);\n    walletCore.on(\"readyStateChange\", handleReadyStateChange);\n    return () => {\n      walletCore.off(\"connect\", handleConnect);\n      walletCore.off(\"disconnect\", handleDisconnect);\n      walletCore.off(\"accountChange\", handleAccountChange);\n      walletCore.off(\"networkChange\", handleNetworkChange);\n      walletCore.off(\"readyStateChange\", handleReadyStateChange);\n    };\n  }, [wallets, connected]);\n  return /* @__PURE__ */ jsx(WalletContext.Provider, {\n    value: {\n      connect,\n      account,\n      network,\n      connected,\n      disconnect,\n      wallet,\n      wallets,\n      signAndSubmitTransaction,\n      signTransaction,\n      signMessage,\n      signMessageAndVerify\n    },\n    children\n  });\n};\nexport {\n  AptosWalletAdapterProvider,\n  WalletReadyState,\n  useWallet\n};\n"],"mappings":"AAAA;AACA,SACEA,gBAAgB,QACX,iCAAiC;AACxC,SAASC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,IAAIC,gBAAgB,GAAG;EACrBC,SAAS,EAAE;AACb,CAAC;AACD,IAAIC,aAAa,GAAGJ,aAAa,CAC/BE,gBAAgB,CACjB;AACD,SAASG,SAAS,GAAG;EACnB,MAAMC,OAAO,GAAGL,UAAU,CAACG,aAAa,CAAC;EACzC,IAAI,CAACE,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB;;AAEA;AACA,SACEE,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,QAAQ,QACH,OAAO;AACd,SAASC,UAAU,QAAQ,iCAAiC;AAC5D,SAASC,GAAG,QAAQ,mBAAmB;AACvC,IAAIC,YAAY,GAAG;EACjBX,SAAS,EAAE,KAAK;EAChBY,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE,IAAI;EACbC,MAAM,EAAE;AACV,CAAC;AACD,IAAIC,0BAA0B,GAAG,QAI3B;EAAA,IAJ4B;IAChCC,QAAQ;IACRC,OAAO;IACPC,WAAW,GAAG;EAChB,CAAC;EACC,MAAM,CAAC;IAAElB,SAAS;IAAEY,OAAO;IAAEC,OAAO;IAAEC;EAAO,CAAC,EAAEK,QAAQ,CAAC,GAAGX,QAAQ,CAACG,YAAY,CAAC;EAClF,MAAMS,UAAU,GAAGb,OAAO,CAAC,MAAM,IAAIE,UAAU,CAACQ,OAAO,CAAC,EAAE,EAAE,CAAC;EAC7D,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAACY,UAAU,CAACC,OAAO,CAAC;EAC1D,MAAME,OAAO,GAAIC,UAAU,IAAK;IAC9B,IAAI;MACFJ,UAAU,CAACG,OAAO,CAACC,UAAU,CAAC;IAChC,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,CAAC,CAAC;IACjC;EACF,CAAC;EACD,MAAMG,UAAU,GAAG,MAAM;IACvB,IAAI;MACFR,UAAU,CAACQ,UAAU,EAAE;IACzB,CAAC,CAAC,OAAOH,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,CAAC,CAAC;IACpC;EACF,CAAC;EACD,MAAMI,wBAAwB,GAAG,MAAOC,WAAW,IAAK;IACtD,IAAI;MACF,OAAO,MAAMV,UAAU,CAACS,wBAAwB,CAACC,WAAW,CAAC;IAC/D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EACD,MAAMC,eAAe,GAAG,MAAOF,WAAW,IAAK;IAC7C,IAAI;MACF,OAAO,MAAMV,UAAU,CAACY,eAAe,CAACF,WAAW,CAAC;IACtD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EACD,MAAME,WAAW,GAAG,MAAOC,OAAO,IAAK;IACrC,IAAI;MACF,OAAO,MAAMd,UAAU,CAACa,WAAW,CAACC,OAAO,CAAC;IAC9C,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EACD,MAAMI,oBAAoB,GAAG,MAAOD,OAAO,IAAK;IAC9C,IAAI;MACF,OAAO,MAAMd,UAAU,CAACe,oBAAoB,CAACD,OAAO,CAAC;IACvD,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EACDzB,SAAS,CAAC,MAAM;IACd,IAAIY,WAAW,EAAE;MACf,IAAIkB,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,EAAE;QAC3Cd,OAAO,CAACa,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC;MAClD;IACF;EACF,CAAC,EAAE,CAAChB,OAAO,CAAC,CAAC;EACbf,SAAS,CAAC,MAAM;IACd,IAAIN,SAAS,EAAE;MACboB,UAAU,CAACkB,eAAe,EAAE;MAC5BlB,UAAU,CAACmB,eAAe,EAAE;IAC9B;EACF,CAAC,EAAE,CAAClB,OAAO,EAAErB,SAAS,CAAC,CAAC;EACxB,MAAMwC,aAAa,GAAG,MAAM;IAC1BrB,QAAQ,CAAEsB,KAAK,IAAK;MAClB,OAAO;QACL,GAAGA,KAAK;QACRzC,SAAS,EAAE,IAAI;QACfY,OAAO,EAAEQ,UAAU,CAACR,OAAO;QAC3BC,OAAO,EAAEO,UAAU,CAACP,OAAO;QAC3BC,MAAM,EAAEM,UAAU,CAACN;MACrB,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EACD,MAAM4B,gBAAgB,GAAG,MAAM;IAC7B,IAAI,CAAC1C,SAAS,EACZ;IACFmB,QAAQ,CAAEsB,KAAK,IAAK;MAClB,OAAO;QACL,GAAGA,KAAK;QACRzC,SAAS,EAAE,KAAK;QAChBY,OAAO,EAAEQ,UAAU,CAACR,OAAO;QAC3BC,OAAO,EAAEO,UAAU,CAACP,OAAO;QAC3BC,MAAM,EAAE;MACV,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EACD,MAAM6B,mBAAmB,GAAGtC,WAAW,CAAC,MAAM;IAC5C,IAAI,CAACL,SAAS,EACZ;IACF,IAAI,CAACoB,UAAU,CAACN,MAAM,EACpB;IACFK,QAAQ,CAAEsB,KAAK,IAAK;MAClB,OAAO;QACL,GAAGA,KAAK;QACR7B,OAAO,EAAEQ,UAAU,CAACR;MACtB,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACZ,SAAS,CAAC,CAAC;EACf,MAAM4C,mBAAmB,GAAGvC,WAAW,CAAC,MAAM;IAC5C,IAAI,CAACL,SAAS,EACZ;IACF,IAAI,CAACoB,UAAU,CAACN,MAAM,EACpB;IACFK,QAAQ,CAAEsB,KAAK,IAAK;MAClB,OAAO;QACL,GAAGA,KAAK;QACR5B,OAAO,EAAEO,UAAU,CAACP;MACtB,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACb,SAAS,CAAC,CAAC;EACf,MAAM6C,sBAAsB,GAAIC,OAAO,IAAK;IAC1CxB,UAAU,CAAEyB,WAAW,IAAK;MAC1B,MAAMC,KAAK,GAAGD,WAAW,CAACE,SAAS,CAChCC,UAAU,IAAKA,UAAU,KAAKJ,OAAO,CACvC;MACD,IAAIE,KAAK,KAAK,CAAC,CAAC,EACd,OAAOD,WAAW;MACpB,OAAO,CACL,GAAGA,WAAW,CAACI,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,EAC9BF,OAAO,EACP,GAAGC,WAAW,CAACI,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC,CAChC;IACH,CAAC,CAAC;EACJ,CAAC;EACD1C,SAAS,CAAC,MAAM;IACdc,UAAU,CAACgC,EAAE,CAAC,SAAS,EAAEZ,aAAa,CAAC;IACvCpB,UAAU,CAACgC,EAAE,CAAC,YAAY,EAAEV,gBAAgB,CAAC;IAC7CtB,UAAU,CAACgC,EAAE,CAAC,eAAe,EAAET,mBAAmB,CAAC;IACnDvB,UAAU,CAACgC,EAAE,CAAC,eAAe,EAAER,mBAAmB,CAAC;IACnDxB,UAAU,CAACgC,EAAE,CAAC,kBAAkB,EAAEP,sBAAsB,CAAC;IACzD,OAAO,MAAM;MACXzB,UAAU,CAACiC,GAAG,CAAC,SAAS,EAAEb,aAAa,CAAC;MACxCpB,UAAU,CAACiC,GAAG,CAAC,YAAY,EAAEX,gBAAgB,CAAC;MAC9CtB,UAAU,CAACiC,GAAG,CAAC,eAAe,EAAEV,mBAAmB,CAAC;MACpDvB,UAAU,CAACiC,GAAG,CAAC,eAAe,EAAET,mBAAmB,CAAC;MACpDxB,UAAU,CAACiC,GAAG,CAAC,kBAAkB,EAAER,sBAAsB,CAAC;IAC5D,CAAC;EACH,CAAC,EAAE,CAACxB,OAAO,EAAErB,SAAS,CAAC,CAAC;EACxB,OAAO,eAAgBU,GAAG,CAACT,aAAa,CAACqD,QAAQ,EAAE;IACjDC,KAAK,EAAE;MACLhC,OAAO;MACPX,OAAO;MACPC,OAAO;MACPb,SAAS;MACT4B,UAAU;MACVd,MAAM;MACNO,OAAO;MACPQ,wBAAwB;MACxBG,eAAe;MACfC,WAAW;MACXE;IACF,CAAC;IACDnB;EACF,CAAC,CAAC;AACJ,CAAC;AACD,SACED,0BAA0B,EAC1BnB,gBAAgB,EAChBM,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}