{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--) if (decorator = decorators[i]) result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\n\n// src/aptos_account.ts\nimport nacl2 from \"tweetnacl\";\nimport * as bip39 from \"@scure/bip39\";\nimport { bytesToHex as bytesToHex2 } from \"@noble/hashes/utils\";\nimport { sha3_256 as sha3Hash3 } from \"@noble/hashes/sha3\";\n\n// src/utils/hd-key.ts\nimport nacl from \"tweetnacl\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { hexToBytes } from \"@noble/hashes/utils\";\nvar pathRegex = /^m(\\/[0-9]+')+$/;\nvar replaceDerive = val => val.replace(\"'\", \"\");\nvar HMAC_KEY = \"ed25519 seed\";\nvar HARDENED_OFFSET = 2147483648;\nvar getMasterKeyFromSeed = seed => {\n  const h = hmac.create(sha512, HMAC_KEY);\n  const I = h.update(hexToBytes(seed)).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\nvar CKDPriv = (_ref, index) => {\n  let {\n    key,\n    chainCode\n  } = _ref;\n  const buffer = new ArrayBuffer(4);\n  new DataView(buffer).setUint32(0, index);\n  const indexBytes = new Uint8Array(buffer);\n  const zero = new Uint8Array([0]);\n  const data = new Uint8Array([...zero, ...key, ...indexBytes]);\n  const I = hmac.create(sha512, chainCode).update(data).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\nvar isValidPath = path => {\n  if (!pathRegex.test(path)) {\n    return false;\n  }\n  return !path.split(\"/\").slice(1).map(replaceDerive).some(Number.isNaN);\n};\nvar derivePath = function (path, seed) {\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HARDENED_OFFSET;\n  if (!isValidPath(path)) {\n    throw new Error(\"Invalid derivation path\");\n  }\n  const {\n    key,\n    chainCode\n  } = getMasterKeyFromSeed(seed);\n  const segments = path.split(\"/\").slice(1).map(replaceDerive).map(el => parseInt(el, 10));\n  return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n    key,\n    chainCode\n  });\n};\n\n// src/hex_string.ts\nimport { bytesToHex, hexToBytes as hexToBytes2 } from \"@noble/hashes/utils\";\nvar HexString = class {\n  static fromBuffer(buffer) {\n    return HexString.fromUint8Array(buffer);\n  }\n  static fromUint8Array(arr) {\n    return new HexString(bytesToHex(arr));\n  }\n  static ensure(hexString) {\n    if (typeof hexString === \"string\") {\n      return new HexString(hexString);\n    }\n    return hexString;\n  }\n  constructor(hexString) {\n    if (hexString.startsWith(\"0x\")) {\n      this.hexString = hexString;\n    } else {\n      this.hexString = `0x${hexString}`;\n    }\n  }\n  hex() {\n    return this.hexString;\n  }\n  noPrefix() {\n    return this.hexString.slice(2);\n  }\n  toString() {\n    return this.hex();\n  }\n  toShortString() {\n    const trimmed = this.hexString.replace(/^0x0*/, \"\");\n    return `0x${trimmed}`;\n  }\n  toUint8Array() {\n    return Uint8Array.from(hexToBytes2(this.noPrefix()));\n  }\n};\n\n// src/utils/misc.ts\nasync function sleep(timeMs) {\n  return new Promise(resolve2 => {\n    setTimeout(resolve2, timeMs);\n  });\n}\nvar DEFAULT_VERSION_PATH_BASE = \"/v1\";\nfunction fixNodeUrl(nodeUrl) {\n  let out = `${nodeUrl}`;\n  if (out.endsWith(\"/\")) {\n    out = out.substring(0, out.length - 1);\n  }\n  if (!out.endsWith(DEFAULT_VERSION_PATH_BASE)) {\n    out = `${out}${DEFAULT_VERSION_PATH_BASE}`;\n  }\n  return out;\n}\nvar DEFAULT_MAX_GAS_AMOUNT = 2e5;\nvar DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\nvar DEFAULT_TXN_TIMEOUT_SEC = 20;\nvar APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n\n// src/utils/memoize-decorator.ts\nfunction Memoize(args) {\n  let hashFunction;\n  let ttlMs;\n  let tags;\n  if (typeof args === \"object\") {\n    hashFunction = args.hashFunction;\n    ttlMs = args.ttlMs;\n    tags = args.tags;\n  } else {\n    hashFunction = args;\n  }\n  return (target, propertyKey, descriptor) => {\n    if (descriptor.value != null) {\n      descriptor.value = getNewFunction(descriptor.value, hashFunction, ttlMs, tags);\n    } else if (descriptor.get != null) {\n      descriptor.get = getNewFunction(descriptor.get, hashFunction, ttlMs, tags);\n    } else {\n      throw new Error(\"Only put a Memoize() decorator on a method or get accessor.\");\n    }\n  };\n}\nfunction MemoizeExpiring(ttlMs, hashFunction) {\n  return Memoize({\n    ttlMs,\n    hashFunction\n  });\n}\nvar clearCacheTagsMap = /* @__PURE__ */new Map();\nfunction clear(tags) {\n  const cleared = /* @__PURE__ */new Set();\n  for (const tag of tags) {\n    const maps = clearCacheTagsMap.get(tag);\n    if (maps) {\n      for (const mp of maps) {\n        if (!cleared.has(mp)) {\n          mp.clear();\n          cleared.add(mp);\n        }\n      }\n    }\n  }\n  return cleared.size;\n}\nfunction getNewFunction(originalMethod, hashFunction) {\n  let ttlMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let tags = arguments.length > 3 ? arguments[3] : undefined;\n  const propMapName = Symbol(\"__memoized_map__\");\n  return function () {\n    let returnedValue;\n    const that = this;\n    if (!that.hasOwnProperty(propMapName)) {\n      Object.defineProperty(that, propMapName, {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: /* @__PURE__ */new Map()\n      });\n    }\n    const myMap = that[propMapName];\n    if (Array.isArray(tags)) {\n      for (const tag of tags) {\n        if (clearCacheTagsMap.has(tag)) {\n          clearCacheTagsMap.get(tag).push(myMap);\n        } else {\n          clearCacheTagsMap.set(tag, [myMap]);\n        }\n      }\n    }\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (hashFunction || args.length > 0 || ttlMs > 0) {\n      let hashKey;\n      if (hashFunction === true) {\n        hashKey = args.map(a => a.toString()).join(\"!\");\n      } else if (hashFunction) {\n        hashKey = hashFunction.apply(that, args);\n      } else {\n        hashKey = args[0];\n      }\n      const timestampKey = `${hashKey}__timestamp`;\n      let isExpired = false;\n      if (ttlMs > 0) {\n        if (!myMap.has(timestampKey)) {\n          isExpired = true;\n        } else {\n          const timestamp = myMap.get(timestampKey);\n          isExpired = Date.now() - timestamp > ttlMs;\n        }\n      }\n      if (myMap.has(hashKey) && !isExpired) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args);\n        myMap.set(hashKey, returnedValue);\n        if (ttlMs > 0) {\n          myMap.set(timestampKey, Date.now());\n        }\n      }\n    } else {\n      const hashKey = that;\n      if (myMap.has(hashKey)) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args);\n        myMap.set(hashKey, returnedValue);\n      }\n    }\n    return returnedValue;\n  };\n}\n\n// src/utils/pagination_helpers.ts\nasync function paginateWithCursor(apiFunction, accountAddress, limitPerRequest, query) {\n  var _a;\n  const out = [];\n  let cursor;\n  while (true) {\n    const response = await apiFunction(HexString.ensure(accountAddress).hex(), (_a = query == null ? void 0 : query.ledgerVersion) == null ? void 0 : _a.toString(), cursor, limitPerRequest);\n    cursor = response.__headers[\"x-aptos-cursor\"];\n    delete response.__headers;\n    out.push(...response);\n    if (cursor === null || cursor === void 0) {\n      break;\n    }\n  }\n  return out;\n}\n\n// src/aptos_types/index.ts\nvar aptos_types_exports = {};\n__export(aptos_types_exports, {\n  AccountAddress: () => AccountAddress,\n  AccountAuthenticator: () => AccountAuthenticator,\n  AccountAuthenticatorEd25519: () => AccountAuthenticatorEd25519,\n  AccountAuthenticatorMultiEd25519: () => AccountAuthenticatorMultiEd25519,\n  ArgumentABI: () => ArgumentABI,\n  AuthenticationKey: () => AuthenticationKey,\n  ChainId: () => ChainId,\n  ChangeSet: () => ChangeSet,\n  Ed25519PublicKey: () => Ed25519PublicKey,\n  Ed25519Signature: () => Ed25519Signature,\n  EntryFunction: () => EntryFunction,\n  EntryFunctionABI: () => EntryFunctionABI,\n  Identifier: () => Identifier,\n  Module: () => Module,\n  ModuleId: () => ModuleId,\n  MultiAgentRawTransaction: () => MultiAgentRawTransaction,\n  MultiEd25519PublicKey: () => MultiEd25519PublicKey,\n  MultiEd25519Signature: () => MultiEd25519Signature,\n  RawTransaction: () => RawTransaction,\n  RawTransactionWithData: () => RawTransactionWithData,\n  RotationProofChallenge: () => RotationProofChallenge,\n  Script: () => Script,\n  ScriptABI: () => ScriptABI,\n  SignedTransaction: () => SignedTransaction,\n  StructTag: () => StructTag,\n  Transaction: () => Transaction,\n  TransactionArgument: () => TransactionArgument,\n  TransactionArgumentAddress: () => TransactionArgumentAddress,\n  TransactionArgumentBool: () => TransactionArgumentBool,\n  TransactionArgumentU128: () => TransactionArgumentU128,\n  TransactionArgumentU16: () => TransactionArgumentU16,\n  TransactionArgumentU256: () => TransactionArgumentU256,\n  TransactionArgumentU32: () => TransactionArgumentU32,\n  TransactionArgumentU64: () => TransactionArgumentU64,\n  TransactionArgumentU8: () => TransactionArgumentU8,\n  TransactionArgumentU8Vector: () => TransactionArgumentU8Vector,\n  TransactionAuthenticator: () => TransactionAuthenticator,\n  TransactionAuthenticatorEd25519: () => TransactionAuthenticatorEd25519,\n  TransactionAuthenticatorMultiAgent: () => TransactionAuthenticatorMultiAgent,\n  TransactionAuthenticatorMultiEd25519: () => TransactionAuthenticatorMultiEd25519,\n  TransactionPayload: () => TransactionPayload,\n  TransactionPayloadEntryFunction: () => TransactionPayloadEntryFunction,\n  TransactionPayloadScript: () => TransactionPayloadScript,\n  TransactionScriptABI: () => TransactionScriptABI,\n  TypeArgumentABI: () => TypeArgumentABI,\n  TypeTag: () => TypeTag,\n  TypeTagAddress: () => TypeTagAddress,\n  TypeTagBool: () => TypeTagBool,\n  TypeTagSigner: () => TypeTagSigner,\n  TypeTagStruct: () => TypeTagStruct,\n  TypeTagU128: () => TypeTagU128,\n  TypeTagU16: () => TypeTagU16,\n  TypeTagU256: () => TypeTagU256,\n  TypeTagU32: () => TypeTagU32,\n  TypeTagU64: () => TypeTagU64,\n  TypeTagU8: () => TypeTagU8,\n  TypeTagVector: () => TypeTagVector,\n  UserTransaction: () => UserTransaction,\n  WriteSet: () => WriteSet\n});\n\n// src/bcs/index.ts\nvar bcs_exports = {};\n__export(bcs_exports, {\n  Deserializer: () => Deserializer,\n  Serializer: () => Serializer,\n  bcsSerializeBool: () => bcsSerializeBool,\n  bcsSerializeBytes: () => bcsSerializeBytes,\n  bcsSerializeFixedBytes: () => bcsSerializeFixedBytes,\n  bcsSerializeStr: () => bcsSerializeStr,\n  bcsSerializeU128: () => bcsSerializeU128,\n  bcsSerializeU16: () => bcsSerializeU16,\n  bcsSerializeU32: () => bcsSerializeU32,\n  bcsSerializeU8: () => bcsSerializeU8,\n  bcsSerializeUint64: () => bcsSerializeUint64,\n  bcsToBytes: () => bcsToBytes,\n  deserializeVector: () => deserializeVector,\n  serializeVector: () => serializeVector,\n  serializeVectorWithFunc: () => serializeVectorWithFunc\n});\n\n// src/bcs/consts.ts\nvar MAX_U8_NUMBER = 2 ** 8 - 1;\nvar MAX_U16_NUMBER = 2 ** 16 - 1;\nvar MAX_U32_NUMBER = 2 ** 32 - 1;\nvar MAX_U64_BIG_INT = BigInt(2 ** 64) - BigInt(1);\nvar MAX_U128_BIG_INT = BigInt(2 ** 128) - BigInt(1);\nvar MAX_U256_BIG_INT = BigInt(2 ** 256) - BigInt(1);\n\n// src/bcs/serializer.ts\nvar Serializer = class {\n  constructor() {\n    this.buffer = new ArrayBuffer(64);\n    this.offset = 0;\n  }\n  ensureBufferWillHandleSize(bytes) {\n    while (this.buffer.byteLength < this.offset + bytes) {\n      const newBuffer = new ArrayBuffer(this.buffer.byteLength * 2);\n      new Uint8Array(newBuffer).set(new Uint8Array(this.buffer));\n      this.buffer = newBuffer;\n    }\n  }\n  serialize(values) {\n    this.ensureBufferWillHandleSize(values.length);\n    new Uint8Array(this.buffer, this.offset).set(values);\n    this.offset += values.length;\n  }\n  serializeWithFunction(fn, bytesLength, value) {\n    this.ensureBufferWillHandleSize(bytesLength);\n    const dv = new DataView(this.buffer, this.offset);\n    fn.apply(dv, [0, value, true]);\n    this.offset += bytesLength;\n  }\n  serializeStr(value) {\n    const textEncoder = new TextEncoder();\n    this.serializeBytes(textEncoder.encode(value));\n  }\n  serializeBytes(value) {\n    this.serializeU32AsUleb128(value.length);\n    this.serialize(value);\n  }\n  serializeFixedBytes(value) {\n    this.serialize(value);\n  }\n  serializeBool(value) {\n    if (typeof value !== \"boolean\") {\n      throw new Error(\"Value needs to be a boolean\");\n    }\n    const byteValue = value ? 1 : 0;\n    this.serialize(new Uint8Array([byteValue]));\n  }\n  serializeU8(value) {\n    this.serialize(new Uint8Array([value]));\n  }\n  serializeU16(value) {\n    this.serializeWithFunction(DataView.prototype.setUint16, 2, value);\n  }\n  serializeU32(value) {\n    this.serializeWithFunction(DataView.prototype.setUint32, 4, value);\n  }\n  serializeU64(value) {\n    const low = BigInt(value.toString()) & BigInt(MAX_U32_NUMBER);\n    const high = BigInt(value.toString()) >> BigInt(32);\n    this.serializeU32(Number(low));\n    this.serializeU32(Number(high));\n  }\n  serializeU128(value) {\n    const low = BigInt(value.toString()) & MAX_U64_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(64);\n    this.serializeU64(low);\n    this.serializeU64(high);\n  }\n  serializeU256(value) {\n    const low = BigInt(value.toString()) & MAX_U128_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(128);\n    this.serializeU128(low);\n    this.serializeU128(high);\n  }\n  serializeU32AsUleb128(val) {\n    let value = val;\n    const valueArray = [];\n    while (value >>> 7 !== 0) {\n      valueArray.push(value & 127 | 128);\n      value >>>= 7;\n    }\n    valueArray.push(value);\n    this.serialize(new Uint8Array(valueArray));\n  }\n  getBytes() {\n    return new Uint8Array(this.buffer).slice(0, this.offset);\n  }\n};\n__decorateClass([checkNumberRange(0, MAX_U8_NUMBER)], Serializer.prototype, \"serializeU8\", 1);\n__decorateClass([checkNumberRange(0, MAX_U16_NUMBER)], Serializer.prototype, \"serializeU16\", 1);\n__decorateClass([checkNumberRange(0, MAX_U32_NUMBER)], Serializer.prototype, \"serializeU32\", 1);\n__decorateClass([checkNumberRange(BigInt(0), MAX_U64_BIG_INT)], Serializer.prototype, \"serializeU64\", 1);\n__decorateClass([checkNumberRange(BigInt(0), MAX_U128_BIG_INT)], Serializer.prototype, \"serializeU128\", 1);\n__decorateClass([checkNumberRange(BigInt(0), MAX_U256_BIG_INT)], Serializer.prototype, \"serializeU256\", 1);\n__decorateClass([checkNumberRange(0, MAX_U32_NUMBER)], Serializer.prototype, \"serializeU32AsUleb128\", 1);\nfunction checkNumberRange(minValue, maxValue, message) {\n  return (target, propertyKey, descriptor) => {\n    const childFunction = descriptor.value;\n    descriptor.value = function deco(value) {\n      const valueBigInt = BigInt(value.toString());\n      if (valueBigInt > BigInt(maxValue.toString()) || valueBigInt < BigInt(minValue.toString())) {\n        throw new Error(message || \"Value is out of range\");\n      }\n      childFunction.apply(this, [value]);\n    };\n    return descriptor;\n  };\n}\n\n// src/bcs/deserializer.ts\nvar Deserializer = class {\n  constructor(data) {\n    this.buffer = new ArrayBuffer(data.length);\n    new Uint8Array(this.buffer).set(data, 0);\n    this.offset = 0;\n  }\n  read(length) {\n    if (this.offset + length > this.buffer.byteLength) {\n      throw new Error(\"Reached to the end of buffer\");\n    }\n    const bytes = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return bytes;\n  }\n  deserializeStr() {\n    const value = this.deserializeBytes();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(value);\n  }\n  deserializeBytes() {\n    const len = this.deserializeUleb128AsU32();\n    return new Uint8Array(this.read(len));\n  }\n  deserializeFixedBytes(len) {\n    return new Uint8Array(this.read(len));\n  }\n  deserializeBool() {\n    const bool = new Uint8Array(this.read(1))[0];\n    if (bool !== 1 && bool !== 0) {\n      throw new Error(\"Invalid boolean value\");\n    }\n    return bool === 1;\n  }\n  deserializeU8() {\n    return new DataView(this.read(1)).getUint8(0);\n  }\n  deserializeU16() {\n    return new DataView(this.read(2)).getUint16(0, true);\n  }\n  deserializeU32() {\n    return new DataView(this.read(4)).getUint32(0, true);\n  }\n  deserializeU64() {\n    const low = this.deserializeU32();\n    const high = this.deserializeU32();\n    return BigInt(BigInt(high) << BigInt(32) | BigInt(low));\n  }\n  deserializeU128() {\n    const low = this.deserializeU64();\n    const high = this.deserializeU64();\n    return BigInt(high << BigInt(64) | low);\n  }\n  deserializeU256() {\n    const low = this.deserializeU128();\n    const high = this.deserializeU128();\n    return BigInt(high << BigInt(128) | low);\n  }\n  deserializeUleb128AsU32() {\n    let value = BigInt(0);\n    let shift = 0;\n    while (value < MAX_U32_NUMBER) {\n      const byte = this.deserializeU8();\n      value |= BigInt(byte & 127) << BigInt(shift);\n      if ((byte & 128) === 0) {\n        break;\n      }\n      shift += 7;\n    }\n    if (value > MAX_U32_NUMBER) {\n      throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n    }\n    return Number(value);\n  }\n};\n\n// src/bcs/helper.ts\nfunction serializeVector(value, serializer) {\n  serializer.serializeU32AsUleb128(value.length);\n  value.forEach(item => {\n    item.serialize(serializer);\n  });\n}\nfunction serializeVectorWithFunc(value, func) {\n  const serializer = new Serializer();\n  serializer.serializeU32AsUleb128(value.length);\n  const f = serializer[func];\n  value.forEach(item => {\n    f.call(serializer, item);\n  });\n  return serializer.getBytes();\n}\nfunction deserializeVector(deserializer, cls) {\n  const length = deserializer.deserializeUleb128AsU32();\n  const list = [];\n  for (let i = 0; i < length; i += 1) {\n    list.push(cls.deserialize(deserializer));\n  }\n  return list;\n}\nfunction bcsToBytes(value) {\n  const serializer = new Serializer();\n  value.serialize(serializer);\n  return serializer.getBytes();\n}\nfunction bcsSerializeUint64(value) {\n  const serializer = new Serializer();\n  serializer.serializeU64(value);\n  return serializer.getBytes();\n}\nfunction bcsSerializeU8(value) {\n  const serializer = new Serializer();\n  serializer.serializeU8(value);\n  return serializer.getBytes();\n}\nfunction bcsSerializeU16(value) {\n  const serializer = new Serializer();\n  serializer.serializeU16(value);\n  return serializer.getBytes();\n}\nfunction bcsSerializeU32(value) {\n  const serializer = new Serializer();\n  serializer.serializeU32(value);\n  return serializer.getBytes();\n}\nfunction bcsSerializeU128(value) {\n  const serializer = new Serializer();\n  serializer.serializeU128(value);\n  return serializer.getBytes();\n}\nfunction bcsSerializeBool(value) {\n  const serializer = new Serializer();\n  serializer.serializeBool(value);\n  return serializer.getBytes();\n}\nfunction bcsSerializeStr(value) {\n  const serializer = new Serializer();\n  serializer.serializeStr(value);\n  return serializer.getBytes();\n}\nfunction bcsSerializeBytes(value) {\n  const serializer = new Serializer();\n  serializer.serializeBytes(value);\n  return serializer.getBytes();\n}\nfunction bcsSerializeFixedBytes(value) {\n  const serializer = new Serializer();\n  serializer.serializeFixedBytes(value);\n  return serializer.getBytes();\n}\n\n// src/aptos_types/transaction.ts\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\n\n// src/aptos_types/account_address.ts\nvar _AccountAddress = class {\n  constructor(address) {\n    if (address.length !== _AccountAddress.LENGTH) {\n      throw new Error(\"Expected address of length 32\");\n    }\n    this.address = address;\n  }\n  static fromHex(addr) {\n    let address = HexString.ensure(addr);\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n    const addressBytes = address.toUint8Array();\n    if (addressBytes.length > _AccountAddress.LENGTH) {\n      throw new Error(\"Hex string is too long. Address's length is 32 bytes.\");\n    } else if (addressBytes.length === _AccountAddress.LENGTH) {\n      return new _AccountAddress(addressBytes);\n    }\n    const res = new Uint8Array(_AccountAddress.LENGTH);\n    res.set(addressBytes, _AccountAddress.LENGTH - addressBytes.length);\n    return new _AccountAddress(res);\n  }\n  static isValid(addr) {\n    if (addr === \"\") {\n      return false;\n    }\n    let address = HexString.ensure(addr);\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n    const addressBytes = address.toUint8Array();\n    return addressBytes.length <= _AccountAddress.LENGTH;\n  }\n  toHexString() {\n    return HexString.fromUint8Array(this.address).hex();\n  }\n  serialize(serializer) {\n    serializer.serializeFixedBytes(this.address);\n  }\n  static deserialize(deserializer) {\n    return new _AccountAddress(deserializer.deserializeFixedBytes(_AccountAddress.LENGTH));\n  }\n};\nvar AccountAddress = _AccountAddress;\nAccountAddress.LENGTH = 32;\nAccountAddress.CORE_CODE_ADDRESS = _AccountAddress.fromHex(\"0x1\");\n\n// src/aptos_types/ed25519.ts\nvar _Ed25519PublicKey = class {\n  constructor(value) {\n    if (value.length !== _Ed25519PublicKey.LENGTH) {\n      throw new Error(`Ed25519PublicKey length should be ${_Ed25519PublicKey.LENGTH}`);\n    }\n    this.value = value;\n  }\n  toBytes() {\n    return this.value;\n  }\n  serialize(serializer) {\n    serializer.serializeBytes(this.value);\n  }\n  static deserialize(deserializer) {\n    const value = deserializer.deserializeBytes();\n    return new _Ed25519PublicKey(value);\n  }\n};\nvar Ed25519PublicKey = _Ed25519PublicKey;\nEd25519PublicKey.LENGTH = 32;\nvar _Ed25519Signature = class {\n  constructor(value) {\n    this.value = value;\n    if (value.length !== _Ed25519Signature.LENGTH) {\n      throw new Error(`Ed25519Signature length should be ${_Ed25519Signature.LENGTH}`);\n    }\n  }\n  serialize(serializer) {\n    serializer.serializeBytes(this.value);\n  }\n  static deserialize(deserializer) {\n    const value = deserializer.deserializeBytes();\n    return new _Ed25519Signature(value);\n  }\n};\nvar Ed25519Signature = _Ed25519Signature;\nEd25519Signature.LENGTH = 64;\n\n// src/aptos_types/multi_ed25519.ts\nvar MAX_SIGNATURES_SUPPORTED = 32;\nvar MultiEd25519PublicKey = class {\n  constructor(public_keys, threshold) {\n    this.public_keys = public_keys;\n    this.threshold = threshold;\n    if (threshold > MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(`\"threshold\" cannot be larger than ${MAX_SIGNATURES_SUPPORTED}`);\n    }\n  }\n  toBytes() {\n    const bytes = new Uint8Array(this.public_keys.length * Ed25519PublicKey.LENGTH + 1);\n    this.public_keys.forEach((k, i) => {\n      bytes.set(k.value, i * Ed25519PublicKey.LENGTH);\n    });\n    bytes[this.public_keys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n    return bytes;\n  }\n  serialize(serializer) {\n    serializer.serializeBytes(this.toBytes());\n  }\n  static deserialize(deserializer) {\n    const bytes = deserializer.deserializeBytes();\n    const threshold = bytes[bytes.length - 1];\n    const keys = [];\n    for (let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH) {\n      const begin = i;\n      keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n    }\n    return new MultiEd25519PublicKey(keys, threshold);\n  }\n};\nvar _MultiEd25519Signature = class {\n  constructor(signatures, bitmap) {\n    this.signatures = signatures;\n    this.bitmap = bitmap;\n    if (bitmap.length !== _MultiEd25519Signature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${_MultiEd25519Signature.BITMAP_LEN}`);\n    }\n  }\n  toBytes() {\n    const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + _MultiEd25519Signature.BITMAP_LEN);\n    this.signatures.forEach((k, i) => {\n      bytes.set(k.value, i * Ed25519Signature.LENGTH);\n    });\n    bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n    return bytes;\n  }\n  static createBitmap(bits) {\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n    const dupCheckSet = /* @__PURE__ */new Set();\n    bits.forEach(bit => {\n      if (bit >= MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Invalid bit value ${bit}.`);\n      }\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicated bits detected.\");\n      }\n      dupCheckSet.add(bit);\n      const byteOffset = Math.floor(bit / 8);\n      let byte = bitmap[byteOffset];\n      byte |= firstBitInByte >> bit % 8;\n      bitmap[byteOffset] = byte;\n    });\n    return bitmap;\n  }\n  serialize(serializer) {\n    serializer.serializeBytes(this.toBytes());\n  }\n  static deserialize(deserializer) {\n    const bytes = deserializer.deserializeBytes();\n    const bitmap = bytes.subarray(bytes.length - 4);\n    const sigs = [];\n    for (let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH) {\n      const begin = i;\n      sigs.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n    }\n    return new _MultiEd25519Signature(sigs, bitmap);\n  }\n};\nvar MultiEd25519Signature = _MultiEd25519Signature;\nMultiEd25519Signature.BITMAP_LEN = 4;\n\n// src/aptos_types/authenticator.ts\nvar TransactionAuthenticator = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionAuthenticatorEd25519.load(deserializer);\n      case 1:\n        return TransactionAuthenticatorMultiEd25519.load(deserializer);\n      case 2:\n        return TransactionAuthenticatorMultiAgent.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n    }\n  }\n};\nvar TransactionAuthenticatorEd25519 = class extends TransactionAuthenticator {\n  constructor(public_key, signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n  static load(deserializer) {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorEd25519(public_key, signature);\n  }\n};\nvar TransactionAuthenticatorMultiEd25519 = class extends TransactionAuthenticator {\n  constructor(public_key, signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n  static load(deserializer) {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n  }\n};\nvar TransactionAuthenticatorMultiAgent = class extends TransactionAuthenticator {\n  constructor(sender, secondary_signer_addresses, secondary_signers) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(2);\n    this.sender.serialize(serializer);\n    serializeVector(this.secondary_signer_addresses, serializer);\n    serializeVector(this.secondary_signers, serializer);\n  }\n  static load(deserializer) {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializeVector(deserializer, AccountAddress);\n    const secondary_signers = deserializeVector(deserializer, AccountAuthenticator);\n    return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n  }\n};\nvar AccountAuthenticator = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return AccountAuthenticatorEd25519.load(deserializer);\n      case 1:\n        return AccountAuthenticatorMultiEd25519.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n    }\n  }\n};\nvar AccountAuthenticatorEd25519 = class extends AccountAuthenticator {\n  constructor(public_key, signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n  static load(deserializer) {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorEd25519(public_key, signature);\n  }\n};\nvar AccountAuthenticatorMultiEd25519 = class extends AccountAuthenticator {\n  constructor(public_key, signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n  static load(deserializer) {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiEd25519(public_key, signature);\n  }\n};\n\n// src/aptos_types/identifier.ts\nvar Identifier = class {\n  constructor(value) {\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeStr(this.value);\n  }\n  static deserialize(deserializer) {\n    const value = deserializer.deserializeStr();\n    return new Identifier(value);\n  }\n};\n\n// src/aptos_types/type_tag.ts\nvar TypeTag = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TypeTagBool.load(deserializer);\n      case 1:\n        return TypeTagU8.load(deserializer);\n      case 2:\n        return TypeTagU64.load(deserializer);\n      case 3:\n        return TypeTagU128.load(deserializer);\n      case 4:\n        return TypeTagAddress.load(deserializer);\n      case 5:\n        return TypeTagSigner.load(deserializer);\n      case 6:\n        return TypeTagVector.load(deserializer);\n      case 7:\n        return TypeTagStruct.load(deserializer);\n      case 8:\n        return TypeTagU16.load(deserializer);\n      case 9:\n        return TypeTagU32.load(deserializer);\n      case 10:\n        return TypeTagU256.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TypeTag: ${index}`);\n    }\n  }\n};\nvar TypeTagBool = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n  }\n  static load(deserializer) {\n    return new TypeTagBool();\n  }\n};\nvar TypeTagU8 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n  }\n  static load(_deserializer) {\n    return new TypeTagU8();\n  }\n};\nvar TypeTagU16 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n  }\n  static load(_deserializer) {\n    return new TypeTagU16();\n  }\n};\nvar TypeTagU32 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n  }\n  static load(_deserializer) {\n    return new TypeTagU32();\n  }\n};\nvar TypeTagU64 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(2);\n  }\n  static load(_deserializer) {\n    return new TypeTagU64();\n  }\n};\nvar TypeTagU128 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(3);\n  }\n  static load(_deserializer) {\n    return new TypeTagU128();\n  }\n};\nvar TypeTagU256 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n  }\n  static load(_deserializer) {\n    return new TypeTagU256();\n  }\n};\nvar TypeTagAddress = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(4);\n  }\n  static load(_deserializer) {\n    return new TypeTagAddress();\n  }\n};\nvar TypeTagSigner = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(5);\n  }\n  static load(_deserializer) {\n    return new TypeTagSigner();\n  }\n};\nvar TypeTagVector = class extends TypeTag {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(6);\n    this.value.serialize(serializer);\n  }\n  static load(deserializer) {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagVector(value);\n  }\n};\nvar TypeTagStruct = class extends TypeTag {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(7);\n    this.value.serialize(serializer);\n  }\n  static load(deserializer) {\n    const value = StructTag.deserialize(deserializer);\n    return new TypeTagStruct(value);\n  }\n  isStringTypeTag() {\n    if (this.value.module_name.value === \"string\" && this.value.name.value === \"String\" && this.value.address.toHexString() === AccountAddress.fromHex(\"0x1\").toHexString()) {\n      return true;\n    }\n    return false;\n  }\n};\nvar StructTag = class {\n  constructor(address, module_name, name, type_args) {\n    this.address = address;\n    this.module_name = module_name;\n    this.name = name;\n    this.type_args = type_args;\n  }\n  static fromString(structTag) {\n    if (structTag.includes(\"<\")) {\n      throw new Error(\"Not implemented\");\n    }\n    const parts = structTag.split(\"::\");\n    if (parts.length !== 3) {\n      throw new Error(\"Invalid struct tag string literal.\");\n    }\n    return new StructTag(AccountAddress.fromHex(parts[0]), new Identifier(parts[1]), new Identifier(parts[2]), []);\n  }\n  serialize(serializer) {\n    this.address.serialize(serializer);\n    this.module_name.serialize(serializer);\n    this.name.serialize(serializer);\n    serializeVector(this.type_args, serializer);\n  }\n  static deserialize(deserializer) {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializeVector(deserializer, TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n};\n\n// src/aptos_types/transaction.ts\nvar RawTransaction = class {\n  constructor(sender, sequence_number, payload, max_gas_amount, gas_unit_price, expiration_timestamp_secs, chain_id) {\n    this.sender = sender;\n    this.sequence_number = sequence_number;\n    this.payload = payload;\n    this.max_gas_amount = max_gas_amount;\n    this.gas_unit_price = gas_unit_price;\n    this.expiration_timestamp_secs = expiration_timestamp_secs;\n    this.chain_id = chain_id;\n  }\n  serialize(serializer) {\n    this.sender.serialize(serializer);\n    serializer.serializeU64(this.sequence_number);\n    this.payload.serialize(serializer);\n    serializer.serializeU64(this.max_gas_amount);\n    serializer.serializeU64(this.gas_unit_price);\n    serializer.serializeU64(this.expiration_timestamp_secs);\n    this.chain_id.serialize(serializer);\n  }\n  static deserialize(deserializer) {\n    const sender = AccountAddress.deserialize(deserializer);\n    const sequence_number = deserializer.deserializeU64();\n    const payload = TransactionPayload.deserialize(deserializer);\n    const max_gas_amount = deserializer.deserializeU64();\n    const gas_unit_price = deserializer.deserializeU64();\n    const expiration_timestamp_secs = deserializer.deserializeU64();\n    const chain_id = ChainId.deserialize(deserializer);\n    return new RawTransaction(sender, sequence_number, payload, max_gas_amount, gas_unit_price, expiration_timestamp_secs, chain_id);\n  }\n};\nvar Script = class {\n  constructor(code, ty_args, args) {\n    this.code = code;\n    this.ty_args = ty_args;\n    this.args = args;\n  }\n  serialize(serializer) {\n    serializer.serializeBytes(this.code);\n    serializeVector(this.ty_args, serializer);\n    serializeVector(this.args, serializer);\n  }\n  static deserialize(deserializer) {\n    const code = deserializer.deserializeBytes();\n    const ty_args = deserializeVector(deserializer, TypeTag);\n    const args = deserializeVector(deserializer, TransactionArgument);\n    return new Script(code, ty_args, args);\n  }\n};\nvar EntryFunction = class {\n  constructor(module_name, function_name, ty_args, args) {\n    this.module_name = module_name;\n    this.function_name = function_name;\n    this.ty_args = ty_args;\n    this.args = args;\n  }\n  static natural(module, func, ty_args, args) {\n    return new EntryFunction(ModuleId.fromStr(module), new Identifier(func), ty_args, args);\n  }\n  static natual(module, func, ty_args, args) {\n    return EntryFunction.natural(module, func, ty_args, args);\n  }\n  serialize(serializer) {\n    this.module_name.serialize(serializer);\n    this.function_name.serialize(serializer);\n    serializeVector(this.ty_args, serializer);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach(item => {\n      serializer.serializeBytes(item);\n    });\n  }\n  static deserialize(deserializer) {\n    const module_name = ModuleId.deserialize(deserializer);\n    const function_name = Identifier.deserialize(deserializer);\n    const ty_args = deserializeVector(deserializer, TypeTag);\n    const length = deserializer.deserializeUleb128AsU32();\n    const list = [];\n    for (let i = 0; i < length; i += 1) {\n      list.push(deserializer.deserializeBytes());\n    }\n    const args = list;\n    return new EntryFunction(module_name, function_name, ty_args, args);\n  }\n};\nvar Module = class {\n  constructor(code) {\n    this.code = code;\n  }\n  serialize(serializer) {\n    serializer.serializeBytes(this.code);\n  }\n  static deserialize(deserializer) {\n    const code = deserializer.deserializeBytes();\n    return new Module(code);\n  }\n};\nvar ModuleId = class {\n  constructor(address, name) {\n    this.address = address;\n    this.name = name;\n  }\n  static fromStr(moduleId) {\n    const parts = moduleId.split(\"::\");\n    if (parts.length !== 2) {\n      throw new Error(\"Invalid module id.\");\n    }\n    return new ModuleId(AccountAddress.fromHex(new HexString(parts[0])), new Identifier(parts[1]));\n  }\n  serialize(serializer) {\n    this.address.serialize(serializer);\n    this.name.serialize(serializer);\n  }\n  static deserialize(deserializer) {\n    const address = AccountAddress.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    return new ModuleId(address, name);\n  }\n};\nvar ChangeSet = class {\n  serialize(serializer) {\n    throw new Error(\"Not implemented.\");\n  }\n  static deserialize(deserializer) {\n    throw new Error(\"Not implemented.\");\n  }\n};\nvar WriteSet = class {\n  serialize(serializer) {\n    throw new Error(\"Not implmented.\");\n  }\n  static deserialize(deserializer) {\n    throw new Error(\"Not implmented.\");\n  }\n};\nvar SignedTransaction = class {\n  constructor(raw_txn, authenticator) {\n    this.raw_txn = raw_txn;\n    this.authenticator = authenticator;\n  }\n  serialize(serializer) {\n    this.raw_txn.serialize(serializer);\n    this.authenticator.serialize(serializer);\n  }\n  static deserialize(deserializer) {\n    const raw_txn = RawTransaction.deserialize(deserializer);\n    const authenticator = TransactionAuthenticator.deserialize(deserializer);\n    return new SignedTransaction(raw_txn, authenticator);\n  }\n};\nvar RawTransactionWithData = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return MultiAgentRawTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n    }\n  }\n};\nvar MultiAgentRawTransaction = class extends RawTransactionWithData {\n  constructor(raw_txn, secondary_signer_addresses) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.raw_txn.serialize(serializer);\n    serializeVector(this.secondary_signer_addresses, serializer);\n  }\n  static load(deserializer) {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializeVector(deserializer, AccountAddress);\n    return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n  }\n};\nvar TransactionPayload = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionPayloadScript.load(deserializer);\n      case 2:\n        return TransactionPayloadEntryFunction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n};\nvar TransactionPayloadScript = class extends TransactionPayload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n  static load(deserializer) {\n    const value = Script.deserialize(deserializer);\n    return new TransactionPayloadScript(value);\n  }\n};\nvar TransactionPayloadEntryFunction = class extends TransactionPayload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(2);\n    this.value.serialize(serializer);\n  }\n  static load(deserializer) {\n    const value = EntryFunction.deserialize(deserializer);\n    return new TransactionPayloadEntryFunction(value);\n  }\n};\nvar ChainId = class {\n  constructor(value) {\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU8(this.value);\n  }\n  static deserialize(deserializer) {\n    const value = deserializer.deserializeU8();\n    return new ChainId(value);\n  }\n};\nvar TransactionArgument = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionArgumentU8.load(deserializer);\n      case 1:\n        return TransactionArgumentU64.load(deserializer);\n      case 2:\n        return TransactionArgumentU128.load(deserializer);\n      case 3:\n        return TransactionArgumentAddress.load(deserializer);\n      case 4:\n        return TransactionArgumentU8Vector.load(deserializer);\n      case 5:\n        return TransactionArgumentBool.load(deserializer);\n      case 6:\n        return TransactionArgumentU16.load(deserializer);\n      case 7:\n        return TransactionArgumentU32.load(deserializer);\n      case 8:\n        return TransactionArgumentU256.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionArgument: ${index}`);\n    }\n  }\n};\nvar TransactionArgumentU8 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeU8(this.value);\n  }\n  static load(deserializer) {\n    const value = deserializer.deserializeU8();\n    return new TransactionArgumentU8(value);\n  }\n};\nvar TransactionArgumentU16 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(6);\n    serializer.serializeU16(this.value);\n  }\n  static load(deserializer) {\n    const value = deserializer.deserializeU16();\n    return new TransactionArgumentU16(value);\n  }\n};\nvar TransactionArgumentU32 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(7);\n    serializer.serializeU32(this.value);\n  }\n  static load(deserializer) {\n    const value = deserializer.deserializeU32();\n    return new TransactionArgumentU32(value);\n  }\n};\nvar TransactionArgumentU64 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeU64(this.value);\n  }\n  static load(deserializer) {\n    const value = deserializer.deserializeU64();\n    return new TransactionArgumentU64(value);\n  }\n};\nvar TransactionArgumentU128 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(2);\n    serializer.serializeU128(this.value);\n  }\n  static load(deserializer) {\n    const value = deserializer.deserializeU128();\n    return new TransactionArgumentU128(value);\n  }\n};\nvar TransactionArgumentU256 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(8);\n    serializer.serializeU256(this.value);\n  }\n  static load(deserializer) {\n    const value = deserializer.deserializeU256();\n    return new TransactionArgumentU256(value);\n  }\n};\nvar TransactionArgumentAddress = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(3);\n    this.value.serialize(serializer);\n  }\n  static load(deserializer) {\n    const value = AccountAddress.deserialize(deserializer);\n    return new TransactionArgumentAddress(value);\n  }\n};\nvar TransactionArgumentU8Vector = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(4);\n    serializer.serializeBytes(this.value);\n  }\n  static load(deserializer) {\n    const value = deserializer.deserializeBytes();\n    return new TransactionArgumentU8Vector(value);\n  }\n};\nvar TransactionArgumentBool = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(5);\n    serializer.serializeBool(this.value);\n  }\n  static load(deserializer) {\n    const value = deserializer.deserializeBool();\n    return new TransactionArgumentBool(value);\n  }\n};\nvar Transaction = class {\n  getHashSalt() {\n    const hash = sha3Hash.create();\n    hash.update(\"APTOS::Transaction\");\n    return hash.digest();\n  }\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return UserTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for Transaction: ${index}`);\n    }\n  }\n};\nvar UserTransaction = class extends Transaction {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  hash() {\n    const hash = sha3Hash.create();\n    hash.update(this.getHashSalt());\n    hash.update(bcsToBytes(this));\n    return hash.digest();\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n  static load(deserializer) {\n    return new UserTransaction(SignedTransaction.deserialize(deserializer));\n  }\n};\n\n// src/aptos_types/abi.ts\nvar TypeArgumentABI = class {\n  constructor(name) {\n    this.name = name;\n  }\n  serialize(serializer) {\n    serializer.serializeStr(this.name);\n  }\n  static deserialize(deserializer) {\n    const name = deserializer.deserializeStr();\n    return new TypeArgumentABI(name);\n  }\n};\nvar ArgumentABI = class {\n  constructor(name, type_tag) {\n    this.name = name;\n    this.type_tag = type_tag;\n  }\n  serialize(serializer) {\n    serializer.serializeStr(this.name);\n    this.type_tag.serialize(serializer);\n  }\n  static deserialize(deserializer) {\n    const name = deserializer.deserializeStr();\n    const typeTag = TypeTag.deserialize(deserializer);\n    return new ArgumentABI(name, typeTag);\n  }\n};\nvar ScriptABI = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionScriptABI.load(deserializer);\n      case 1:\n        return EntryFunctionABI.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n};\nvar TransactionScriptABI = class extends ScriptABI {\n  constructor(name, doc, code, ty_args, args) {\n    super();\n    this.name = name;\n    this.doc = doc;\n    this.code = code;\n    this.ty_args = ty_args;\n    this.args = args;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeStr(this.name);\n    serializer.serializeStr(this.doc);\n    serializer.serializeBytes(this.code);\n    serializeVector(this.ty_args, serializer);\n    serializeVector(this.args, serializer);\n  }\n  static load(deserializer) {\n    const name = deserializer.deserializeStr();\n    const doc = deserializer.deserializeStr();\n    const code = deserializer.deserializeBytes();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new TransactionScriptABI(name, doc, code, tyArgs, args);\n  }\n};\nvar EntryFunctionABI = class extends ScriptABI {\n  constructor(name, module_name, doc, ty_args, args) {\n    super();\n    this.name = name;\n    this.module_name = module_name;\n    this.doc = doc;\n    this.ty_args = ty_args;\n    this.args = args;\n  }\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeStr(this.name);\n    this.module_name.serialize(serializer);\n    serializer.serializeStr(this.doc);\n    serializeVector(this.ty_args, serializer);\n    serializeVector(this.args, serializer);\n  }\n  static load(deserializer) {\n    const name = deserializer.deserializeStr();\n    const moduleName = ModuleId.deserialize(deserializer);\n    const doc = deserializer.deserializeStr();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new EntryFunctionABI(name, moduleName, doc, tyArgs, args);\n  }\n};\n\n// src/aptos_types/authentication_key.ts\nimport { sha3_256 as sha3Hash2 } from \"@noble/hashes/sha3\";\nvar _AuthenticationKey = class {\n  constructor(bytes) {\n    if (bytes.length !== _AuthenticationKey.LENGTH) {\n      throw new Error(\"Expected a byte array of length 32\");\n    }\n    this.bytes = bytes;\n  }\n  static fromMultiEd25519PublicKey(publicKey) {\n    const pubKeyBytes = publicKey.toBytes();\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([_AuthenticationKey.MULTI_ED25519_SCHEME], pubKeyBytes.length);\n    const hash = sha3Hash2.create();\n    hash.update(bytes);\n    return new _AuthenticationKey(hash.digest());\n  }\n  static fromEd25519PublicKey(publicKey) {\n    const pubKeyBytes = publicKey.value;\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([_AuthenticationKey.ED25519_SCHEME], pubKeyBytes.length);\n    const hash = sha3Hash2.create();\n    hash.update(bytes);\n    return new _AuthenticationKey(hash.digest());\n  }\n  derivedAddress() {\n    return HexString.fromUint8Array(this.bytes);\n  }\n};\nvar AuthenticationKey = _AuthenticationKey;\nAuthenticationKey.LENGTH = 32;\nAuthenticationKey.MULTI_ED25519_SCHEME = 1;\nAuthenticationKey.ED25519_SCHEME = 0;\nAuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME = 255;\n\n// src/aptos_types/rotation_proof_challenge.ts\nvar RotationProofChallenge = class {\n  constructor(accountAddress, moduleName, structName, sequenceNumber, originator, currentAuthKey, newPublicKey) {\n    this.accountAddress = accountAddress;\n    this.moduleName = moduleName;\n    this.structName = structName;\n    this.sequenceNumber = sequenceNumber;\n    this.originator = originator;\n    this.currentAuthKey = currentAuthKey;\n    this.newPublicKey = newPublicKey;\n  }\n  serialize(serializer) {\n    this.accountAddress.serialize(serializer);\n    serializer.serializeStr(this.moduleName);\n    serializer.serializeStr(this.structName);\n    serializer.serializeU64(this.sequenceNumber);\n    this.originator.serialize(serializer);\n    this.currentAuthKey.serialize(serializer);\n    serializer.serializeBytes(this.newPublicKey);\n  }\n};\n\n// src/aptos_account.ts\nvar _AptosAccount = class {\n  static fromAptosAccountObject(obj) {\n    return new _AptosAccount(HexString.ensure(obj.privateKeyHex).toUint8Array(), obj.address);\n  }\n  static fromDerivePath(path, mnemonics) {\n    if (!_AptosAccount.isValidPath(path)) {\n      throw new Error(\"Invalid derivation path\");\n    }\n    const normalizeMnemonics = mnemonics.trim().split(/\\s+/).map(part => part.toLowerCase()).join(\" \");\n    const {\n      key\n    } = derivePath(path, bytesToHex2(bip39.mnemonicToSeedSync(normalizeMnemonics)));\n    return new _AptosAccount(key);\n  }\n  constructor(privateKeyBytes, address) {\n    if (privateKeyBytes) {\n      this.signingKey = nacl2.sign.keyPair.fromSeed(privateKeyBytes.slice(0, 32));\n    } else {\n      this.signingKey = nacl2.sign.keyPair();\n    }\n    this.accountAddress = HexString.ensure(address || this.authKey().hex());\n  }\n  address() {\n    return this.accountAddress;\n  }\n  authKey() {\n    const pubKey = new Ed25519PublicKey(this.signingKey.publicKey);\n    const authKey = AuthenticationKey.fromEd25519PublicKey(pubKey);\n    return authKey.derivedAddress();\n  }\n  static getResourceAccountAddress(sourceAddress, seed) {\n    const source = bcsToBytes(AccountAddress.fromHex(sourceAddress));\n    const bytes = new Uint8Array([...source, ...seed, AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME]);\n    const hash = sha3Hash3.create();\n    hash.update(bytes);\n    return HexString.fromUint8Array(hash.digest());\n  }\n  pubKey() {\n    return HexString.fromUint8Array(this.signingKey.publicKey);\n  }\n  signBuffer(buffer) {\n    const signature = nacl2.sign(buffer, this.signingKey.secretKey);\n    return HexString.fromUint8Array(signature.slice(0, 64));\n  }\n  signHexString(hexString) {\n    const toSign = HexString.ensure(hexString).toUint8Array();\n    return this.signBuffer(toSign);\n  }\n  toPrivateKeyObject() {\n    return {\n      address: this.address().hex(),\n      publicKeyHex: this.pubKey().hex(),\n      privateKeyHex: HexString.fromUint8Array(this.signingKey.secretKey.slice(0, 32)).hex()\n    };\n  }\n};\nvar AptosAccount = _AptosAccount;\nAptosAccount.isValidPath = path => {\n  if (!/^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'+$/.test(path)) {\n    return false;\n  }\n  return true;\n};\n__decorateClass([Memoize()], AptosAccount.prototype, \"authKey\", 1);\nfunction getAddressFromAccountOrAddress(accountOrAddress) {\n  return accountOrAddress instanceof AptosAccount ? accountOrAddress.address() : HexString.ensure(accountOrAddress);\n}\n\n// src/generated/index.ts\nvar generated_exports = {};\n__export(generated_exports, {\n  $AccountData: () => $AccountData,\n  $AccountSignature: () => $AccountSignature,\n  $AccountSignature_Ed25519Signature: () => $AccountSignature_Ed25519Signature,\n  $AccountSignature_MultiEd25519Signature: () => $AccountSignature_MultiEd25519Signature,\n  $Address: () => $Address,\n  $AptosError: () => $AptosError,\n  $AptosErrorCode: () => $AptosErrorCode,\n  $Block: () => $Block,\n  $BlockMetadataTransaction: () => $BlockMetadataTransaction,\n  $DecodedTableData: () => $DecodedTableData,\n  $DeleteModule: () => $DeleteModule,\n  $DeleteResource: () => $DeleteResource,\n  $DeleteTableItem: () => $DeleteTableItem,\n  $DeletedTableData: () => $DeletedTableData,\n  $DirectWriteSet: () => $DirectWriteSet,\n  $Ed25519Signature: () => $Ed25519Signature,\n  $EncodeSubmissionRequest: () => $EncodeSubmissionRequest,\n  $EntryFunctionId: () => $EntryFunctionId,\n  $EntryFunctionPayload: () => $EntryFunctionPayload,\n  $Event: () => $Event,\n  $EventGuid: () => $EventGuid,\n  $GasEstimation: () => $GasEstimation,\n  $GenesisPayload: () => $GenesisPayload,\n  $GenesisPayload_WriteSetPayload: () => $GenesisPayload_WriteSetPayload,\n  $GenesisTransaction: () => $GenesisTransaction,\n  $HashValue: () => $HashValue,\n  $HealthCheckSuccess: () => $HealthCheckSuccess,\n  $HexEncodedBytes: () => $HexEncodedBytes,\n  $IdentifierWrapper: () => $IdentifierWrapper,\n  $IndexResponse: () => $IndexResponse,\n  $ModuleBundlePayload: () => $ModuleBundlePayload,\n  $MoveAbility: () => $MoveAbility,\n  $MoveFunction: () => $MoveFunction,\n  $MoveFunctionGenericTypeParam: () => $MoveFunctionGenericTypeParam,\n  $MoveFunctionVisibility: () => $MoveFunctionVisibility,\n  $MoveModule: () => $MoveModule,\n  $MoveModuleBytecode: () => $MoveModuleBytecode,\n  $MoveModuleId: () => $MoveModuleId,\n  $MoveResource: () => $MoveResource,\n  $MoveScriptBytecode: () => $MoveScriptBytecode,\n  $MoveStruct: () => $MoveStruct,\n  $MoveStructField: () => $MoveStructField,\n  $MoveStructGenericTypeParam: () => $MoveStructGenericTypeParam,\n  $MoveStructTag: () => $MoveStructTag,\n  $MoveStructValue: () => $MoveStructValue,\n  $MoveType: () => $MoveType,\n  $MoveValue: () => $MoveValue,\n  $MultiAgentSignature: () => $MultiAgentSignature,\n  $MultiEd25519Signature: () => $MultiEd25519Signature,\n  $PendingTransaction: () => $PendingTransaction,\n  $RawTableItemRequest: () => $RawTableItemRequest,\n  $RoleType: () => $RoleType,\n  $ScriptPayload: () => $ScriptPayload,\n  $ScriptWriteSet: () => $ScriptWriteSet,\n  $StateCheckpointTransaction: () => $StateCheckpointTransaction,\n  $StateKeyWrapper: () => $StateKeyWrapper,\n  $SubmitTransactionRequest: () => $SubmitTransactionRequest,\n  $TableItemRequest: () => $TableItemRequest,\n  $Transaction: () => $Transaction,\n  $TransactionPayload: () => $TransactionPayload,\n  $TransactionPayload_EntryFunctionPayload: () => $TransactionPayload_EntryFunctionPayload,\n  $TransactionPayload_ModuleBundlePayload: () => $TransactionPayload_ModuleBundlePayload,\n  $TransactionPayload_ScriptPayload: () => $TransactionPayload_ScriptPayload,\n  $TransactionSignature: () => $TransactionSignature,\n  $TransactionSignature_Ed25519Signature: () => $TransactionSignature_Ed25519Signature,\n  $TransactionSignature_MultiAgentSignature: () => $TransactionSignature_MultiAgentSignature,\n  $TransactionSignature_MultiEd25519Signature: () => $TransactionSignature_MultiEd25519Signature,\n  $Transaction_BlockMetadataTransaction: () => $Transaction_BlockMetadataTransaction,\n  $Transaction_GenesisTransaction: () => $Transaction_GenesisTransaction,\n  $Transaction_PendingTransaction: () => $Transaction_PendingTransaction,\n  $Transaction_StateCheckpointTransaction: () => $Transaction_StateCheckpointTransaction,\n  $Transaction_UserTransaction: () => $Transaction_UserTransaction,\n  $TransactionsBatchSingleSubmissionFailure: () => $TransactionsBatchSingleSubmissionFailure,\n  $TransactionsBatchSubmissionResult: () => $TransactionsBatchSubmissionResult,\n  $U128: () => $U128,\n  $U256: () => $U256,\n  $U64: () => $U64,\n  $UserTransaction: () => $UserTransaction,\n  $VersionedEvent: () => $VersionedEvent,\n  $ViewRequest: () => $ViewRequest,\n  $WriteModule: () => $WriteModule,\n  $WriteResource: () => $WriteResource,\n  $WriteSet: () => $WriteSet,\n  $WriteSetChange: () => $WriteSetChange,\n  $WriteSetChange_DeleteModule: () => $WriteSetChange_DeleteModule,\n  $WriteSetChange_DeleteResource: () => $WriteSetChange_DeleteResource,\n  $WriteSetChange_DeleteTableItem: () => $WriteSetChange_DeleteTableItem,\n  $WriteSetChange_WriteModule: () => $WriteSetChange_WriteModule,\n  $WriteSetChange_WriteResource: () => $WriteSetChange_WriteResource,\n  $WriteSetChange_WriteTableItem: () => $WriteSetChange_WriteTableItem,\n  $WriteSetPayload: () => $WriteSetPayload,\n  $WriteSet_DirectWriteSet: () => $WriteSet_DirectWriteSet,\n  $WriteSet_ScriptWriteSet: () => $WriteSet_ScriptWriteSet,\n  $WriteTableItem: () => $WriteTableItem,\n  AccountsService: () => AccountsService,\n  ApiError: () => ApiError,\n  AptosErrorCode: () => AptosErrorCode,\n  AptosGeneratedClient: () => AptosGeneratedClient,\n  BaseHttpRequest: () => BaseHttpRequest,\n  BlocksService: () => BlocksService,\n  CancelError: () => CancelError,\n  CancelablePromise: () => CancelablePromise,\n  EventsService: () => EventsService,\n  GeneralService: () => GeneralService,\n  MoveFunctionVisibility: () => MoveFunctionVisibility,\n  OpenAPI: () => OpenAPI,\n  RoleType: () => RoleType,\n  TablesService: () => TablesService,\n  TransactionsService: () => TransactionsService,\n  ViewService: () => ViewService\n});\n\n// src/generated/core/BaseHttpRequest.ts\nvar BaseHttpRequest = class {\n  constructor(config) {\n    this.config = config;\n  }\n};\n\n// src/generated/core/request.ts\nimport axios from \"axios\";\nimport FormData from \"form-data\";\n\n// src/generated/core/ApiError.ts\nvar ApiError = class extends Error {\n  constructor(request2, response, message) {\n    super(message);\n    this.name = \"ApiError\";\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request2;\n  }\n};\n\n// src/generated/core/CancelablePromise.ts\nvar CancelError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"CancelError\";\n  }\n  get isCancelled() {\n    return true;\n  }\n};\nvar CancelablePromise = class {\n  constructor(executor) {\n    this._isResolved = false;\n    this._isRejected = false;\n    this._isCancelled = false;\n    this._cancelHandlers = [];\n    this._promise = new Promise((resolve2, reject) => {\n      this._resolve = resolve2;\n      this._reject = reject;\n      const onResolve = value => {\n        var _a;\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._isResolved = true;\n        (_a = this._resolve) == null ? void 0 : _a.call(this, value);\n      };\n      const onReject = reason => {\n        var _a;\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._isRejected = true;\n        (_a = this._reject) == null ? void 0 : _a.call(this, reason);\n      };\n      const onCancel = cancelHandler => {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._cancelHandlers.push(cancelHandler);\n      };\n      Object.defineProperty(onCancel, \"isResolved\", {\n        get: () => this._isResolved\n      });\n      Object.defineProperty(onCancel, \"isRejected\", {\n        get: () => this._isRejected\n      });\n      Object.defineProperty(onCancel, \"isCancelled\", {\n        get: () => this._isCancelled\n      });\n      return executor(onResolve, onReject, onCancel);\n    });\n  }\n  then(onFulfilled, onRejected) {\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  catch(onRejected) {\n    return this._promise.catch(onRejected);\n  }\n  finally(onFinally) {\n    return this._promise.finally(onFinally);\n  }\n  cancel() {\n    var _a;\n    if (this._isResolved || this._isRejected || this._isCancelled) {\n      return;\n    }\n    this._isCancelled = true;\n    if (this._cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this._cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn(\"Cancellation threw an error\", error);\n        return;\n      }\n    }\n    this._cancelHandlers.length = 0;\n    (_a = this._reject) == null ? void 0 : _a.call(this, new CancelError(\"Request aborted\"));\n  }\n  get isCancelled() {\n    return this._isCancelled;\n  }\n};\nSymbol.toStringTag;\n\n// src/generated/core/request.ts\nvar CookieJar = class {\n  constructor() {\n    let jar2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /* @__PURE__ */new Map();\n    this.jar = jar2;\n  }\n  setCookie(url, cookieStr) {\n    var _a;\n    const key = url.origin.toLowerCase();\n    if (!this.jar.has(key)) {\n      this.jar.set(key, []);\n    }\n    const cookie = CookieJar.parse(cookieStr);\n    this.jar.set(key, [...(((_a = this.jar.get(key)) == null ? void 0 : _a.filter(c => c.name !== cookie.name)) || []), cookie]);\n  }\n  getCookies(url) {\n    var _a;\n    const key = url.origin.toLowerCase();\n    if (!this.jar.get(key)) {\n      return [];\n    }\n    return ((_a = this.jar.get(key)) == null ? void 0 : _a.filter(cookie => !cookie.expires || cookie.expires > new Date())) || [];\n  }\n  static parse(str) {\n    if (typeof str !== \"string\") {\n      throw new Error(\"argument str must be a string\");\n    }\n    const parts = str.split(\";\").map(part => part.trim());\n    let cookie;\n    if (parts.length > 0) {\n      const [name, value] = parts[0].split(\"=\");\n      if (!name || !value) {\n        throw new Error(\"Invalid cookie\");\n      }\n      cookie = {\n        name,\n        value\n      };\n    } else {\n      throw new Error(\"Invalid cookie\");\n    }\n    parts.slice(1).forEach(part => {\n      const [name, value] = part.split(\"=\");\n      if (!name.trim()) {\n        throw new Error(\"Invalid cookie\");\n      }\n      const nameLow = name.toLowerCase();\n      const val = (value == null ? void 0 : value.charAt(0)) === \"'\" || (value == null ? void 0 : value.charAt(0)) === '\"' ? value == null ? void 0 : value.slice(1, -1) : value;\n      if (nameLow === \"expires\") {\n        cookie.expires = new Date(val);\n      }\n      if (nameLow === \"path\") {\n        cookie.path = val;\n      }\n      if (nameLow === \"samesite\") {\n        if (val !== \"Lax\" && val !== \"None\" && val !== \"Strict\") {\n          throw new Error(\"Invalid cookie SameSite value\");\n        }\n        cookie.sameSite = val;\n      }\n      if (nameLow === \"secure\") {\n        cookie.secure = true;\n      }\n    });\n    return cookie;\n  }\n};\nvar jar = new CookieJar();\naxios.interceptors.response.use(response => {\n  if (Array.isArray(response.headers[\"set-cookie\"])) {\n    response.headers[\"set-cookie\"].forEach(c => {\n      jar.setCookie(new URL(response.config.url), c);\n    });\n  }\n  return response;\n});\naxios.interceptors.request.use(function (config) {\n  const cookies = jar.getCookies(new URL(config.url));\n  if ((cookies == null ? void 0 : cookies.length) > 0 && config.headers) {\n    config.headers.cookie = cookies.map(cookie => `${cookie.name}=${cookie.value}`).join(\"; \");\n  }\n  return config;\n});\nvar isDefined = value => {\n  return value !== void 0 && value !== null;\n};\nvar isString = value => {\n  return typeof value === \"string\";\n};\nvar isStringWithValue = value => {\n  return isString(value) && value !== \"\";\n};\nvar isBlob = value => {\n  return typeof value === \"object\" && typeof value.type === \"string\" && typeof value.stream === \"function\" && typeof value.arrayBuffer === \"function\" && typeof value.constructor === \"function\" && typeof value.constructor.name === \"string\" && /^(Blob|File)$/.test(value.constructor.name) && /^(Blob|File)$/.test(value[Symbol.toStringTag]);\n};\nvar isFormData = value => {\n  return value instanceof FormData;\n};\nvar isSuccess = status => {\n  return status >= 200 && status < 300;\n};\nvar base64 = str => {\n  return btoa(str);\n};\nvar getQueryString = params => {\n  const qs = [];\n  const append = (key, value) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n  };\n  const process = (key, value) => {\n    if (isDefined(value)) {\n      if (Array.isArray(value)) {\n        value.forEach(v => {\n          process(key, v);\n        });\n      } else if (typeof value === \"object\") {\n        Object.entries(value).forEach(_ref2 => {\n          let [k, v] = _ref2;\n          process(`${key}[${k}]`, v);\n        });\n      } else {\n        append(key, value);\n      }\n    }\n  };\n  Object.entries(params).forEach(_ref3 => {\n    let [key, value] = _ref3;\n    process(key, value);\n  });\n  if (qs.length > 0) {\n    return `?${qs.join(\"&\")}`;\n  }\n  return \"\";\n};\nvar getUrl = (config, options) => {\n  const encoder = config.ENCODE_PATH || encodeURI;\n  const path = options.url.replace(\"{api-version}\", config.VERSION).replace(/{(.*?)}/g, (substring, group) => {\n    var _a;\n    if ((_a = options.path) == null ? void 0 : _a.hasOwnProperty(group)) {\n      return encoder(String(options.path[group]));\n    }\n    return substring;\n  });\n  const url = `${config.BASE}${path}`;\n  if (options.query) {\n    return `${url}${getQueryString(options.query)}`;\n  }\n  return url;\n};\nvar getFormData = options => {\n  if (options.formData) {\n    const formData = new FormData();\n    const process = (key, value) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    };\n    Object.entries(options.formData).filter(_ref4 => {\n      let [_, value] = _ref4;\n      return isDefined(value);\n    }).forEach(_ref5 => {\n      let [key, value] = _ref5;\n      if (Array.isArray(value)) {\n        value.forEach(v => process(key, v));\n      } else {\n        process(key, value);\n      }\n    });\n    return formData;\n  }\n  return void 0;\n};\nvar resolve = async (options, resolver) => {\n  if (typeof resolver === \"function\") {\n    return resolver(options);\n  }\n  return resolver;\n};\nvar getHeaders = async (config, options, formData) => {\n  const token = await resolve(options, config.TOKEN);\n  const username = await resolve(options, config.USERNAME);\n  const password = await resolve(options, config.PASSWORD);\n  const additionalHeaders = await resolve(options, config.HEADERS);\n  const formHeaders = typeof (formData == null ? void 0 : formData.getHeaders) === \"function\" && (formData == null ? void 0 : formData.getHeaders()) || {};\n  const headers = Object.entries({\n    Accept: \"application/json\",\n    ...additionalHeaders,\n    ...options.headers,\n    ...formHeaders\n  }).filter(_ref6 => {\n    let [_, value] = _ref6;\n    return isDefined(value);\n  }).reduce((headers2, _ref7) => {\n    let [key, value] = _ref7;\n    return {\n      ...headers2,\n      [key]: String(value)\n    };\n  }, {});\n  if (isStringWithValue(token)) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`);\n    headers[\"Authorization\"] = `Basic ${credentials}`;\n  }\n  if (options.body) {\n    if (options.mediaType) {\n      headers[\"Content-Type\"] = options.mediaType;\n    } else if (isBlob(options.body)) {\n      headers[\"Content-Type\"] = options.body.type || \"application/octet-stream\";\n    } else if (isString(options.body)) {\n      headers[\"Content-Type\"] = \"text/plain\";\n    } else if (!isFormData(options.body)) {\n      headers[\"Content-Type\"] = \"application/json\";\n    }\n  }\n  return headers;\n};\nvar getRequestBody = options => {\n  if (options.body) {\n    return options.body;\n  }\n  return void 0;\n};\nvar sendRequest = async (config, options, url, body, formData, headers, onCancel) => {\n  const source = axios.CancelToken.source();\n  const requestConfig = {\n    url,\n    headers,\n    data: body != null ? body : formData,\n    method: options.method,\n    withCredentials: config.WITH_CREDENTIALS,\n    cancelToken: source.token\n  };\n  const isBCS = Object.keys(config.HEADERS || {}).filter(k => k.toLowerCase() === \"accept\").map(k => config.HEADERS[k]).includes(\"application/x-bcs\");\n  if (isBCS) {\n    requestConfig.responseType = \"arraybuffer\";\n  }\n  onCancel(() => source.cancel(\"The user aborted a request.\"));\n  try {\n    return await axios.request(requestConfig);\n  } catch (error) {\n    const axiosError = error;\n    if (axiosError.response) {\n      return axiosError.response;\n    }\n    throw error;\n  }\n};\nvar getResponseHeader = (response, responseHeader) => {\n  if (responseHeader) {\n    const content = response.headers[responseHeader];\n    if (isString(content)) {\n      return content;\n    }\n  }\n  return void 0;\n};\nvar getResponseBody = response => {\n  if (response.status !== 204) {\n    return response.data;\n  }\n  return void 0;\n};\nvar catchErrorCodes = (options, result) => {\n  const errors = {\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    429: \"Too Many Requests\",\n    500: \"Internal Server Error\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    ...options.errors\n  };\n  const error = errors[result.status];\n  if (error) {\n    throw new ApiError(options, result, error);\n  }\n  if (!result.ok) {\n    throw new ApiError(options, result, \"Generic Error\");\n  }\n};\nvar request = (config, options) => {\n  return new CancelablePromise(async (resolve2, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options);\n      const formData = getFormData(options);\n      const body = getRequestBody(options);\n      const headers = await getHeaders(config, options, formData);\n      if (!onCancel.isCancelled) {\n        const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n        const responseBody = getResponseBody(response);\n        const responseHeader = getResponseHeader(response, options.responseHeader);\n        const result = {\n          url,\n          ok: isSuccess(response.status),\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader != null ? responseHeader : responseBody\n        };\n        catchErrorCodes(options, result);\n        const out = result.body;\n        try {\n          out[\"__headers\"] = response.headers;\n        } catch (_) {}\n        resolve2(out);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\n// src/generated/core/AxiosHttpRequest.ts\nvar AxiosHttpRequest = class extends BaseHttpRequest {\n  constructor(config) {\n    super(config);\n  }\n  request(options) {\n    return request(this.config, options);\n  }\n};\n\n// src/generated/services/AccountsService.ts\nvar AccountsService = class {\n  constructor(httpRequest) {\n    this.httpRequest = httpRequest;\n  }\n  getAccount(address, ledgerVersion) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/accounts/{address}\",\n      path: {\n        \"address\": address\n      },\n      query: {\n        \"ledger_version\": ledgerVersion\n      }\n    });\n  }\n  getAccountResources(address, ledgerVersion, start, limit) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/accounts/{address}/resources\",\n      path: {\n        \"address\": address\n      },\n      query: {\n        \"ledger_version\": ledgerVersion,\n        \"start\": start,\n        \"limit\": limit\n      }\n    });\n  }\n  getAccountModules(address, ledgerVersion, start, limit) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/accounts/{address}/modules\",\n      path: {\n        \"address\": address\n      },\n      query: {\n        \"ledger_version\": ledgerVersion,\n        \"start\": start,\n        \"limit\": limit\n      }\n    });\n  }\n  getAccountResource(address, resourceType, ledgerVersion) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/accounts/{address}/resource/{resource_type}\",\n      path: {\n        \"address\": address,\n        \"resource_type\": resourceType\n      },\n      query: {\n        \"ledger_version\": ledgerVersion\n      }\n    });\n  }\n  getAccountModule(address, moduleName, ledgerVersion) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/accounts/{address}/module/{module_name}\",\n      path: {\n        \"address\": address,\n        \"module_name\": moduleName\n      },\n      query: {\n        \"ledger_version\": ledgerVersion\n      }\n    });\n  }\n};\n\n// src/generated/services/BlocksService.ts\nvar BlocksService = class {\n  constructor(httpRequest) {\n    this.httpRequest = httpRequest;\n  }\n  getBlockByHeight(blockHeight, withTransactions) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/blocks/by_height/{block_height}\",\n      path: {\n        \"block_height\": blockHeight\n      },\n      query: {\n        \"with_transactions\": withTransactions\n      }\n    });\n  }\n  getBlockByVersion(version, withTransactions) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/blocks/by_version/{version}\",\n      path: {\n        \"version\": version\n      },\n      query: {\n        \"with_transactions\": withTransactions\n      }\n    });\n  }\n};\n\n// src/generated/services/EventsService.ts\nvar EventsService = class {\n  constructor(httpRequest) {\n    this.httpRequest = httpRequest;\n  }\n  getEventsByCreationNumber(address, creationNumber, start, limit) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/accounts/{address}/events/{creation_number}\",\n      path: {\n        \"address\": address,\n        \"creation_number\": creationNumber\n      },\n      query: {\n        \"start\": start,\n        \"limit\": limit\n      }\n    });\n  }\n  getEventsByEventHandle(address, eventHandle, fieldName, start, limit) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/accounts/{address}/events/{event_handle}/{field_name}\",\n      path: {\n        \"address\": address,\n        \"event_handle\": eventHandle,\n        \"field_name\": fieldName\n      },\n      query: {\n        \"start\": start,\n        \"limit\": limit\n      }\n    });\n  }\n};\n\n// src/generated/services/GeneralService.ts\nvar GeneralService = class {\n  constructor(httpRequest) {\n    this.httpRequest = httpRequest;\n  }\n  spec() {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/spec\"\n    });\n  }\n  healthy(durationSecs) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/-/healthy\",\n      query: {\n        \"duration_secs\": durationSecs\n      }\n    });\n  }\n  getLedgerInfo() {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/\"\n    });\n  }\n};\n\n// src/generated/services/TablesService.ts\nvar TablesService = class {\n  constructor(httpRequest) {\n    this.httpRequest = httpRequest;\n  }\n  getTableItem(tableHandle, requestBody, ledgerVersion) {\n    return this.httpRequest.request({\n      method: \"POST\",\n      url: \"/tables/{table_handle}/item\",\n      path: {\n        \"table_handle\": tableHandle\n      },\n      query: {\n        \"ledger_version\": ledgerVersion\n      },\n      body: requestBody,\n      mediaType: \"application/json\"\n    });\n  }\n  getRawTableItem(tableHandle, requestBody, ledgerVersion) {\n    return this.httpRequest.request({\n      method: \"POST\",\n      url: \"/tables/{table_handle}/raw_item\",\n      path: {\n        \"table_handle\": tableHandle\n      },\n      query: {\n        \"ledger_version\": ledgerVersion\n      },\n      body: requestBody,\n      mediaType: \"application/json\"\n    });\n  }\n};\n\n// src/generated/services/TransactionsService.ts\nvar TransactionsService = class {\n  constructor(httpRequest) {\n    this.httpRequest = httpRequest;\n  }\n  getTransactions(start, limit) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/transactions\",\n      query: {\n        \"start\": start,\n        \"limit\": limit\n      }\n    });\n  }\n  submitTransaction(requestBody) {\n    return this.httpRequest.request({\n      method: \"POST\",\n      url: \"/transactions\",\n      body: requestBody,\n      mediaType: \"application/json\"\n    });\n  }\n  getTransactionByHash(txnHash) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/transactions/by_hash/{txn_hash}\",\n      path: {\n        \"txn_hash\": txnHash\n      }\n    });\n  }\n  getTransactionByVersion(txnVersion) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/transactions/by_version/{txn_version}\",\n      path: {\n        \"txn_version\": txnVersion\n      }\n    });\n  }\n  getAccountTransactions(address, start, limit) {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/accounts/{address}/transactions\",\n      path: {\n        \"address\": address\n      },\n      query: {\n        \"start\": start,\n        \"limit\": limit\n      }\n    });\n  }\n  submitBatchTransactions(requestBody) {\n    return this.httpRequest.request({\n      method: \"POST\",\n      url: \"/transactions/batch\",\n      body: requestBody,\n      mediaType: \"application/json\"\n    });\n  }\n  simulateTransaction(requestBody, estimateMaxGasAmount, estimateGasUnitPrice, estimatePrioritizedGasUnitPrice) {\n    return this.httpRequest.request({\n      method: \"POST\",\n      url: \"/transactions/simulate\",\n      query: {\n        \"estimate_max_gas_amount\": estimateMaxGasAmount,\n        \"estimate_gas_unit_price\": estimateGasUnitPrice,\n        \"estimate_prioritized_gas_unit_price\": estimatePrioritizedGasUnitPrice\n      },\n      body: requestBody,\n      mediaType: \"application/json\"\n    });\n  }\n  encodeSubmission(requestBody) {\n    return this.httpRequest.request({\n      method: \"POST\",\n      url: \"/transactions/encode_submission\",\n      body: requestBody,\n      mediaType: \"application/json\"\n    });\n  }\n  estimateGasPrice() {\n    return this.httpRequest.request({\n      method: \"GET\",\n      url: \"/estimate_gas_price\"\n    });\n  }\n};\n\n// src/generated/services/ViewService.ts\nvar ViewService = class {\n  constructor(httpRequest) {\n    this.httpRequest = httpRequest;\n  }\n  view(requestBody, ledgerVersion) {\n    return this.httpRequest.request({\n      method: \"POST\",\n      url: \"/view\",\n      query: {\n        \"ledger_version\": ledgerVersion\n      },\n      body: requestBody,\n      mediaType: \"application/json\"\n    });\n  }\n};\n\n// src/generated/AptosGeneratedClient.ts\nvar AptosGeneratedClient = class {\n  constructor(config) {\n    let HttpRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AxiosHttpRequest;\n    var _a, _b, _c, _d;\n    this.request = new HttpRequest({\n      BASE: (_a = config == null ? void 0 : config.BASE) != null ? _a : \"/v1\",\n      VERSION: (_b = config == null ? void 0 : config.VERSION) != null ? _b : \"1.2.0\",\n      WITH_CREDENTIALS: (_c = config == null ? void 0 : config.WITH_CREDENTIALS) != null ? _c : false,\n      CREDENTIALS: (_d = config == null ? void 0 : config.CREDENTIALS) != null ? _d : \"include\",\n      TOKEN: config == null ? void 0 : config.TOKEN,\n      USERNAME: config == null ? void 0 : config.USERNAME,\n      PASSWORD: config == null ? void 0 : config.PASSWORD,\n      HEADERS: config == null ? void 0 : config.HEADERS,\n      ENCODE_PATH: config == null ? void 0 : config.ENCODE_PATH\n    });\n    this.accounts = new AccountsService(this.request);\n    this.blocks = new BlocksService(this.request);\n    this.events = new EventsService(this.request);\n    this.general = new GeneralService(this.request);\n    this.tables = new TablesService(this.request);\n    this.transactions = new TransactionsService(this.request);\n    this.view = new ViewService(this.request);\n  }\n};\n\n// src/generated/core/OpenAPI.ts\nvar OpenAPI = {\n  BASE: \"/v1\",\n  VERSION: \"1.2.0\",\n  WITH_CREDENTIALS: false,\n  CREDENTIALS: \"include\",\n  TOKEN: void 0,\n  USERNAME: void 0,\n  PASSWORD: void 0,\n  HEADERS: void 0,\n  ENCODE_PATH: void 0\n};\n\n// src/generated/models/AptosErrorCode.ts\nvar AptosErrorCode = /* @__PURE__ */(AptosErrorCode2 => {\n  AptosErrorCode2[\"ACCOUNT_NOT_FOUND\"] = \"account_not_found\";\n  AptosErrorCode2[\"RESOURCE_NOT_FOUND\"] = \"resource_not_found\";\n  AptosErrorCode2[\"MODULE_NOT_FOUND\"] = \"module_not_found\";\n  AptosErrorCode2[\"STRUCT_FIELD_NOT_FOUND\"] = \"struct_field_not_found\";\n  AptosErrorCode2[\"VERSION_NOT_FOUND\"] = \"version_not_found\";\n  AptosErrorCode2[\"TRANSACTION_NOT_FOUND\"] = \"transaction_not_found\";\n  AptosErrorCode2[\"TABLE_ITEM_NOT_FOUND\"] = \"table_item_not_found\";\n  AptosErrorCode2[\"BLOCK_NOT_FOUND\"] = \"block_not_found\";\n  AptosErrorCode2[\"VERSION_PRUNED\"] = \"version_pruned\";\n  AptosErrorCode2[\"BLOCK_PRUNED\"] = \"block_pruned\";\n  AptosErrorCode2[\"INVALID_INPUT\"] = \"invalid_input\";\n  AptosErrorCode2[\"INVALID_TRANSACTION_UPDATE\"] = \"invalid_transaction_update\";\n  AptosErrorCode2[\"SEQUENCE_NUMBER_TOO_OLD\"] = \"sequence_number_too_old\";\n  AptosErrorCode2[\"VM_ERROR\"] = \"vm_error\";\n  AptosErrorCode2[\"HEALTH_CHECK_FAILED\"] = \"health_check_failed\";\n  AptosErrorCode2[\"MEMPOOL_IS_FULL\"] = \"mempool_is_full\";\n  AptosErrorCode2[\"INTERNAL_ERROR\"] = \"internal_error\";\n  AptosErrorCode2[\"WEB_FRAMEWORK_ERROR\"] = \"web_framework_error\";\n  AptosErrorCode2[\"BCS_NOT_SUPPORTED\"] = \"bcs_not_supported\";\n  AptosErrorCode2[\"API_DISABLED\"] = \"api_disabled\";\n  return AptosErrorCode2;\n})(AptosErrorCode || {});\n\n// src/generated/models/MoveFunctionVisibility.ts\nvar MoveFunctionVisibility = /* @__PURE__ */(MoveFunctionVisibility2 => {\n  MoveFunctionVisibility2[\"PRIVATE\"] = \"private\";\n  MoveFunctionVisibility2[\"PUBLIC\"] = \"public\";\n  MoveFunctionVisibility2[\"FRIEND\"] = \"friend\";\n  return MoveFunctionVisibility2;\n})(MoveFunctionVisibility || {});\n\n// src/generated/models/RoleType.ts\nvar RoleType = /* @__PURE__ */(RoleType2 => {\n  RoleType2[\"VALIDATOR\"] = \"validator\";\n  RoleType2[\"FULL_NODE\"] = \"full_node\";\n  return RoleType2;\n})(RoleType || {});\n\n// src/generated/schemas/$AccountData.ts\nvar $AccountData = {\n  description: `Account data\n\n    A simplified version of the onchain Account resource`,\n  properties: {\n    sequence_number: {\n      type: \"U64\",\n      isRequired: true\n    },\n    authentication_key: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$AccountSignature.ts\nvar $AccountSignature = {\n  type: \"one-of\",\n  description: `Account signature scheme\n\n    The account signature scheme allows you to have two types of accounts:\n\n    1. A single Ed25519 key account, one private key\n    2. A k-of-n multi-Ed25519 key account, multiple private keys, such that k-of-n must sign a transaction.`,\n  contains: [{\n    type: \"AccountSignature_Ed25519Signature\"\n  }, {\n    type: \"AccountSignature_MultiEd25519Signature\"\n  }]\n};\n\n// src/generated/schemas/$AccountSignature_Ed25519Signature.ts\nvar $AccountSignature_Ed25519Signature = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"Ed25519Signature\"\n  }]\n};\n\n// src/generated/schemas/$AccountSignature_MultiEd25519Signature.ts\nvar $AccountSignature_MultiEd25519Signature = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"MultiEd25519Signature\"\n  }]\n};\n\n// src/generated/schemas/$Address.ts\nvar $Address = {\n  type: \"string\",\n  description: `A hex encoded 32 byte Aptos account address.\n\n    This is represented in a string as a 64 character hex string, sometimes\n    shortened by stripping leading 0s, and adding a 0x.\n\n    For example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n    `,\n  format: \"hex\"\n};\n\n// src/generated/schemas/$AptosError.ts\nvar $AptosError = {\n  description: `This is the generic struct we use for all API errors, it contains a string\n    message and an Aptos API specific error code.`,\n  properties: {\n    message: {\n      type: \"string\",\n      description: `A message describing the error`,\n      isRequired: true\n    },\n    error_code: {\n      type: \"AptosErrorCode\",\n      isRequired: true\n    },\n    vm_error_code: {\n      type: \"number\",\n      description: `A code providing VM error details when submitting transactions to the VM`,\n      format: \"uint64\"\n    }\n  }\n};\n\n// src/generated/schemas/$AptosErrorCode.ts\nvar $AptosErrorCode = {\n  type: \"Enum\"\n};\n\n// src/generated/schemas/$Block.ts\nvar $Block = {\n  description: `A Block with or without transactions\n\n    This contains the information about a transactions along with\n    associated transactions if requested`,\n  properties: {\n    block_height: {\n      type: \"U64\",\n      isRequired: true\n    },\n    block_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    block_timestamp: {\n      type: \"U64\",\n      isRequired: true\n    },\n    first_version: {\n      type: \"U64\",\n      isRequired: true\n    },\n    last_version: {\n      type: \"U64\",\n      isRequired: true\n    },\n    transactions: {\n      type: \"array\",\n      contains: {\n        type: \"Transaction\"\n      }\n    }\n  }\n};\n\n// src/generated/schemas/$BlockMetadataTransaction.ts\nvar $BlockMetadataTransaction = {\n  description: `A block metadata transaction\n\n    This signifies the beginning of a block, and contains information\n    about the specific block`,\n  properties: {\n    version: {\n      type: \"U64\",\n      isRequired: true\n    },\n    hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    state_change_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    event_root_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    state_checkpoint_hash: {\n      type: \"HashValue\"\n    },\n    gas_used: {\n      type: \"U64\",\n      isRequired: true\n    },\n    success: {\n      type: \"boolean\",\n      description: `Whether the transaction was successful`,\n      isRequired: true\n    },\n    vm_status: {\n      type: \"string\",\n      description: `The VM status of the transaction, can tell useful information in a failure`,\n      isRequired: true\n    },\n    accumulator_root_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    changes: {\n      type: \"array\",\n      contains: {\n        type: \"WriteSetChange\"\n      },\n      isRequired: true\n    },\n    id: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    epoch: {\n      type: \"U64\",\n      isRequired: true\n    },\n    round: {\n      type: \"U64\",\n      isRequired: true\n    },\n    events: {\n      type: \"array\",\n      contains: {\n        type: \"Event\"\n      },\n      isRequired: true\n    },\n    previous_block_votes_bitvec: {\n      type: \"array\",\n      contains: {\n        type: \"number\",\n        format: \"uint8\"\n      },\n      isRequired: true\n    },\n    proposer: {\n      type: \"Address\",\n      isRequired: true\n    },\n    failed_proposer_indices: {\n      type: \"array\",\n      contains: {\n        type: \"number\",\n        format: \"uint32\"\n      },\n      isRequired: true\n    },\n    timestamp: {\n      type: \"U64\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$DecodedTableData.ts\nvar $DecodedTableData = {\n  description: `Decoded table data`,\n  properties: {\n    key: {\n      description: `Key of table in JSON`,\n      properties: {},\n      isRequired: true\n    },\n    key_type: {\n      type: \"string\",\n      description: `Type of key`,\n      isRequired: true\n    },\n    value: {\n      description: `Value of table in JSON`,\n      properties: {},\n      isRequired: true\n    },\n    value_type: {\n      type: \"string\",\n      description: `Type of value`,\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$DeletedTableData.ts\nvar $DeletedTableData = {\n  description: `Deleted table data`,\n  properties: {\n    key: {\n      description: `Deleted key`,\n      properties: {},\n      isRequired: true\n    },\n    key_type: {\n      type: \"string\",\n      description: `Deleted key type`,\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$DeleteModule.ts\nvar $DeleteModule = {\n  description: `Delete a module`,\n  properties: {\n    address: {\n      type: \"Address\",\n      isRequired: true\n    },\n    state_key_hash: {\n      type: \"string\",\n      description: `State key hash`,\n      isRequired: true\n    },\n    module: {\n      type: \"MoveModuleId\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$DeleteResource.ts\nvar $DeleteResource = {\n  description: `Delete a resource`,\n  properties: {\n    address: {\n      type: \"Address\",\n      isRequired: true\n    },\n    state_key_hash: {\n      type: \"string\",\n      description: `State key hash`,\n      isRequired: true\n    },\n    resource: {\n      type: \"MoveStructTag\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$DeleteTableItem.ts\nvar $DeleteTableItem = {\n  description: `Delete a table item`,\n  properties: {\n    state_key_hash: {\n      type: \"string\",\n      isRequired: true\n    },\n    handle: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    },\n    key: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    },\n    data: {\n      type: \"DeletedTableData\"\n    }\n  }\n};\n\n// src/generated/schemas/$DirectWriteSet.ts\nvar $DirectWriteSet = {\n  properties: {\n    changes: {\n      type: \"array\",\n      contains: {\n        type: \"WriteSetChange\"\n      },\n      isRequired: true\n    },\n    events: {\n      type: \"array\",\n      contains: {\n        type: \"Event\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$Ed25519Signature.ts\nvar $Ed25519Signature = {\n  description: `A single Ed25519 signature`,\n  properties: {\n    public_key: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    },\n    signature: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$EncodeSubmissionRequest.ts\nvar $EncodeSubmissionRequest = {\n  description: `Request to encode a submission`,\n  properties: {\n    sender: {\n      type: \"Address\",\n      isRequired: true\n    },\n    sequence_number: {\n      type: \"U64\",\n      isRequired: true\n    },\n    max_gas_amount: {\n      type: \"U64\",\n      isRequired: true\n    },\n    gas_unit_price: {\n      type: \"U64\",\n      isRequired: true\n    },\n    expiration_timestamp_secs: {\n      type: \"U64\",\n      isRequired: true\n    },\n    payload: {\n      type: \"TransactionPayload\",\n      isRequired: true\n    },\n    secondary_signers: {\n      type: \"array\",\n      contains: {\n        type: \"Address\"\n      }\n    }\n  }\n};\n\n// src/generated/schemas/$EntryFunctionId.ts\nvar $EntryFunctionId = {\n  type: \"string\",\n  description: `Entry function id is string representation of a entry function defined on-chain.\n\n    Format: \\`{address}::{module name}::{function name}\\`\n\n    Both \\`module name\\` and \\`function name\\` are case-sensitive.\n    `\n};\n\n// src/generated/schemas/$EntryFunctionPayload.ts\nvar $EntryFunctionPayload = {\n  description: `Payload which runs a single entry function`,\n  properties: {\n    function: {\n      type: \"EntryFunctionId\",\n      isRequired: true\n    },\n    type_arguments: {\n      type: \"array\",\n      contains: {\n        type: \"MoveType\"\n      },\n      isRequired: true\n    },\n    arguments: {\n      type: \"array\",\n      contains: {\n        properties: {}\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$Event.ts\nvar $Event = {\n  description: `An event from a transaction`,\n  properties: {\n    guid: {\n      type: \"EventGuid\",\n      isRequired: true\n    },\n    sequence_number: {\n      type: \"U64\",\n      isRequired: true\n    },\n    type: {\n      type: \"MoveType\",\n      isRequired: true\n    },\n    data: {\n      description: `The JSON representation of the event`,\n      properties: {},\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$EventGuid.ts\nvar $EventGuid = {\n  properties: {\n    creation_number: {\n      type: \"U64\",\n      isRequired: true\n    },\n    account_address: {\n      type: \"Address\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$GasEstimation.ts\nvar $GasEstimation = {\n  description: `Struct holding the outputs of the estimate gas API`,\n  properties: {\n    deprioritized_gas_estimate: {\n      type: \"number\",\n      description: `The deprioritized estimate for the gas unit price`,\n      format: \"uint64\"\n    },\n    gas_estimate: {\n      type: \"number\",\n      description: `The current estimate for the gas unit price`,\n      isRequired: true,\n      format: \"uint64\"\n    },\n    prioritized_gas_estimate: {\n      type: \"number\",\n      description: `The prioritized estimate for the gas unit price`,\n      format: \"uint64\"\n    }\n  }\n};\n\n// src/generated/schemas/$GenesisPayload.ts\nvar $GenesisPayload = {\n  type: \"one-of\",\n  description: `The writeset payload of the Genesis transaction`,\n  contains: [{\n    type: \"GenesisPayload_WriteSetPayload\"\n  }]\n};\n\n// src/generated/schemas/$GenesisPayload_WriteSetPayload.ts\nvar $GenesisPayload_WriteSetPayload = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"WriteSetPayload\"\n  }]\n};\n\n// src/generated/schemas/$GenesisTransaction.ts\nvar $GenesisTransaction = {\n  description: `The genesis transaction\n\n    This only occurs at the genesis transaction (version 0)`,\n  properties: {\n    version: {\n      type: \"U64\",\n      isRequired: true\n    },\n    hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    state_change_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    event_root_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    state_checkpoint_hash: {\n      type: \"HashValue\"\n    },\n    gas_used: {\n      type: \"U64\",\n      isRequired: true\n    },\n    success: {\n      type: \"boolean\",\n      description: `Whether the transaction was successful`,\n      isRequired: true\n    },\n    vm_status: {\n      type: \"string\",\n      description: `The VM status of the transaction, can tell useful information in a failure`,\n      isRequired: true\n    },\n    accumulator_root_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    changes: {\n      type: \"array\",\n      contains: {\n        type: \"WriteSetChange\"\n      },\n      isRequired: true\n    },\n    payload: {\n      type: \"GenesisPayload\",\n      isRequired: true\n    },\n    events: {\n      type: \"array\",\n      contains: {\n        type: \"Event\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$HashValue.ts\nvar $HashValue = {\n  type: \"string\"\n};\n\n// src/generated/schemas/$HealthCheckSuccess.ts\nvar $HealthCheckSuccess = {\n  description: `Representation of a successful healthcheck`,\n  properties: {\n    message: {\n      type: \"string\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$HexEncodedBytes.ts\nvar $HexEncodedBytes = {\n  type: \"string\",\n  description: `All bytes (Vec<u8>) data is represented as hex-encoded string prefixed with \\`0x\\` and fulfilled with\n    two hex digits per byte.\n\n    Unlike the \\`Address\\` type, HexEncodedBytes will not trim any zeros.\n    `,\n  format: \"hex\"\n};\n\n// src/generated/schemas/$IdentifierWrapper.ts\nvar $IdentifierWrapper = {\n  type: \"string\"\n};\n\n// src/generated/schemas/$IndexResponse.ts\nvar $IndexResponse = {\n  description: `The struct holding all data returned to the client by the\n    index endpoint (i.e., GET \"/\").  Only for responding in JSON`,\n  properties: {\n    chain_id: {\n      type: \"number\",\n      description: `Chain ID of the current chain`,\n      isRequired: true,\n      format: \"uint8\"\n    },\n    epoch: {\n      type: \"U64\",\n      isRequired: true\n    },\n    ledger_version: {\n      type: \"U64\",\n      isRequired: true\n    },\n    oldest_ledger_version: {\n      type: \"U64\",\n      isRequired: true\n    },\n    ledger_timestamp: {\n      type: \"U64\",\n      isRequired: true\n    },\n    node_role: {\n      type: \"RoleType\",\n      isRequired: true\n    },\n    oldest_block_height: {\n      type: \"U64\",\n      isRequired: true\n    },\n    block_height: {\n      type: \"U64\",\n      isRequired: true\n    },\n    git_hash: {\n      type: \"string\",\n      description: `Git hash of the build of the API endpoint.  Can be used to determine the exact\n            software version used by the API endpoint.`\n    }\n  }\n};\n\n// src/generated/schemas/$ModuleBundlePayload.ts\nvar $ModuleBundlePayload = {\n  properties: {\n    modules: {\n      type: \"array\",\n      contains: {\n        type: \"MoveModuleBytecode\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$MoveAbility.ts\nvar $MoveAbility = {\n  type: \"string\"\n};\n\n// src/generated/schemas/$MoveFunction.ts\nvar $MoveFunction = {\n  description: `Move function`,\n  properties: {\n    name: {\n      type: \"IdentifierWrapper\",\n      isRequired: true\n    },\n    visibility: {\n      type: \"MoveFunctionVisibility\",\n      isRequired: true\n    },\n    is_entry: {\n      type: \"boolean\",\n      description: `Whether the function can be called as an entry function directly in a transaction`,\n      isRequired: true\n    },\n    generic_type_params: {\n      type: \"array\",\n      contains: {\n        type: \"MoveFunctionGenericTypeParam\"\n      },\n      isRequired: true\n    },\n    params: {\n      type: \"array\",\n      contains: {\n        type: \"MoveType\"\n      },\n      isRequired: true\n    },\n    return: {\n      type: \"array\",\n      contains: {\n        type: \"MoveType\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$MoveFunctionGenericTypeParam.ts\nvar $MoveFunctionGenericTypeParam = {\n  description: `Move function generic type param`,\n  properties: {\n    constraints: {\n      type: \"array\",\n      contains: {\n        type: \"MoveAbility\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$MoveFunctionVisibility.ts\nvar $MoveFunctionVisibility = {\n  type: \"Enum\"\n};\n\n// src/generated/schemas/$MoveModule.ts\nvar $MoveModule = {\n  description: `A Move module`,\n  properties: {\n    address: {\n      type: \"Address\",\n      isRequired: true\n    },\n    name: {\n      type: \"IdentifierWrapper\",\n      isRequired: true\n    },\n    friends: {\n      type: \"array\",\n      contains: {\n        type: \"MoveModuleId\"\n      },\n      isRequired: true\n    },\n    exposed_functions: {\n      type: \"array\",\n      contains: {\n        type: \"MoveFunction\"\n      },\n      isRequired: true\n    },\n    structs: {\n      type: \"array\",\n      contains: {\n        type: \"MoveStruct\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$MoveModuleBytecode.ts\nvar $MoveModuleBytecode = {\n  description: `Move module bytecode along with it's ABI`,\n  properties: {\n    bytecode: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    },\n    abi: {\n      type: \"MoveModule\"\n    }\n  }\n};\n\n// src/generated/schemas/$MoveModuleId.ts\nvar $MoveModuleId = {\n  type: \"string\",\n  description: `Move module id is a string representation of Move module.\n\n    Format: \\`{address}::{module name}\\`\n\n    \\`address\\` should be hex-encoded 32 byte account address that is prefixed with \\`0x\\`.\n\n    Module name is case-sensitive.\n    `\n};\n\n// src/generated/schemas/$MoveResource.ts\nvar $MoveResource = {\n  description: `A parsed Move resource`,\n  properties: {\n    type: {\n      type: \"MoveStructTag\",\n      isRequired: true\n    },\n    data: {\n      type: \"MoveStructValue\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$MoveScriptBytecode.ts\nvar $MoveScriptBytecode = {\n  description: `Move script bytecode`,\n  properties: {\n    bytecode: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    },\n    abi: {\n      type: \"MoveFunction\"\n    }\n  }\n};\n\n// src/generated/schemas/$MoveStruct.ts\nvar $MoveStruct = {\n  description: `A move struct`,\n  properties: {\n    name: {\n      type: \"IdentifierWrapper\",\n      isRequired: true\n    },\n    is_native: {\n      type: \"boolean\",\n      description: `Whether the struct is a native struct of Move`,\n      isRequired: true\n    },\n    abilities: {\n      type: \"array\",\n      contains: {\n        type: \"MoveAbility\"\n      },\n      isRequired: true\n    },\n    generic_type_params: {\n      type: \"array\",\n      contains: {\n        type: \"MoveStructGenericTypeParam\"\n      },\n      isRequired: true\n    },\n    fields: {\n      type: \"array\",\n      contains: {\n        type: \"MoveStructField\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$MoveStructField.ts\nvar $MoveStructField = {\n  description: `Move struct field`,\n  properties: {\n    name: {\n      type: \"IdentifierWrapper\",\n      isRequired: true\n    },\n    type: {\n      type: \"MoveType\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$MoveStructGenericTypeParam.ts\nvar $MoveStructGenericTypeParam = {\n  description: `Move generic type param`,\n  properties: {\n    constraints: {\n      type: \"array\",\n      contains: {\n        type: \"MoveAbility\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$MoveStructTag.ts\nvar $MoveStructTag = {\n  type: \"string\",\n  description: `String representation of a MoveStructTag (on-chain Move struct type). This exists so you\n    can specify MoveStructTags as path / query parameters, e.g. for get_events_by_event_handle.\n\n    It is a combination of:\n    1. \\`move_module_address\\`, \\`module_name\\` and \\`struct_name\\`, all joined by \\`::\\`\n    2. \\`struct generic type parameters\\` joined by \\`, \\`\n\n    Examples:\n     * \\`0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\\`\n     * \\`0x1::account::Account\\`\n\n    Note:\n    1. Empty chars should be ignored when comparing 2 struct tag ids.\n    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\n    See [doc](https://aptos.dev/concepts/accounts) for more details.\n    `,\n  pattern: \"^0x[0-9a-zA-Z:_<>]+$\"\n};\n\n// src/generated/schemas/$MoveStructValue.ts\nvar $MoveStructValue = {\n  description: `This is a JSON representation of some data within an account resource. More specifically,\n    it is a map of strings to arbitrary JSON values / objects, where the keys are top level\n    fields within the given resource.\n\n    To clarify, you might query for 0x1::account::Account and see the example data.\n\n    Move \\`bool\\` type value is serialized into \\`boolean\\`.\n\n    Move \\`u8\\`, \\`u16\\` and \\`u32\\` type value is serialized into \\`integer\\`.\n\n    Move \\`u64\\`, \\`u128\\` and \\`u256\\` type value is serialized into \\`string\\`.\n\n    Move \\`address\\` type value (32 byte Aptos account address) is serialized into a HexEncodedBytes string.\n    For example:\n    - \\`0x1\\`\n    - \\`0x1668f6be25668c1a17cd8caf6b8d2f25\\`\n\n    Move \\`vector\\` type value is serialized into \\`array\\`, except \\`vector<u8>\\` which is serialized into a\n    HexEncodedBytes string with \\`0x\\` prefix.\n    For example:\n    - \\`vector<u64>{255, 255}\\` => \\`[\"255\", \"255\"]\\`\n    - \\`vector<u8>{255, 255}\\` => \\`0xffff\\`\n\n    Move \\`struct\\` type value is serialized into \\`object\\` that looks like this (except some Move stdlib types, see the following section):\n    \\`\\`\\`json\n    {\n        field1_name: field1_value,\n        field2_name: field2_value,\n        ......\n    }\n    \\`\\`\\`\n\n    For example:\n    \\`{ \"created\": \"0xa550c18\", \"role_id\": \"0\" }\\`\n\n     **Special serialization for Move stdlib types**:\n    - [0x1::string::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ascii.md)\n    is serialized into \\`string\\`. For example, struct value \\`0x1::string::String{bytes: b\"Hello World!\"}\\`\n    is serialized as \\`\"Hello World!\"\\` in JSON.\n    `,\n  properties: {}\n};\n\n// src/generated/schemas/$MoveType.ts\nvar $MoveType = {\n  type: \"string\",\n  description: `String representation of an on-chain Move type tag that is exposed in transaction payload.\n    Values:\n    - bool\n    - u8\n    - u16\n    - u32\n    - u64\n    - u128\n    - u256\n    - address\n    - signer\n    - vector: \\`vector<{non-reference MoveTypeId}>\\`\n    - struct: \\`{address}::{module_name}::{struct_name}::<{generic types}>\\`\n\n    Vector type value examples:\n    - \\`vector<u8>\\`\n    - \\`vector<vector<u64>>\\`\n    - \\`vector<0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>>\\`\n\n    Struct type value examples:\n    - \\`0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n    - \\`0x1::account::Account\\`\n\n    Note:\n    1. Empty chars should be ignored when comparing 2 struct tag ids.\n    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n    `,\n  pattern: \"^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$\"\n};\n\n// src/generated/schemas/$MoveValue.ts\nvar $MoveValue = {\n  type: \"any-of\",\n  description: `An enum of the possible Move value types`,\n  contains: [{\n    type: \"number\",\n    format: \"uint8\"\n  }, {\n    type: \"number\",\n    format: \"uint16\"\n  }, {\n    type: \"number\",\n    format: \"uint32\"\n  }, {\n    type: \"U64\"\n  }, {\n    type: \"U128\"\n  }, {\n    type: \"U256\"\n  }, {\n    type: \"boolean\"\n  }, {\n    type: \"Address\"\n  }, {\n    type: \"array\",\n    contains: {\n      type: \"MoveValue\"\n    }\n  }, {\n    type: \"HexEncodedBytes\"\n  }, {\n    type: \"MoveStructValue\"\n  }, {\n    type: \"string\"\n  }]\n};\n\n// src/generated/schemas/$MultiAgentSignature.ts\nvar $MultiAgentSignature = {\n  description: `Multi agent signature for multi agent transactions\n\n    This allows you to have transactions across multiple accounts`,\n  properties: {\n    sender: {\n      type: \"AccountSignature\",\n      isRequired: true\n    },\n    secondary_signer_addresses: {\n      type: \"array\",\n      contains: {\n        type: \"Address\"\n      },\n      isRequired: true\n    },\n    secondary_signers: {\n      type: \"array\",\n      contains: {\n        type: \"AccountSignature\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$MultiEd25519Signature.ts\nvar $MultiEd25519Signature = {\n  description: `A Ed25519 multi-sig signature\n\n    This allows k-of-n signing for a transaction`,\n  properties: {\n    public_keys: {\n      type: \"array\",\n      contains: {\n        type: \"HexEncodedBytes\"\n      },\n      isRequired: true\n    },\n    signatures: {\n      type: \"array\",\n      contains: {\n        type: \"HexEncodedBytes\"\n      },\n      isRequired: true\n    },\n    threshold: {\n      type: \"number\",\n      description: `The number of signatures required for a successful transaction`,\n      isRequired: true,\n      format: \"uint8\"\n    },\n    bitmap: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$PendingTransaction.ts\nvar $PendingTransaction = {\n  description: `A transaction waiting in mempool`,\n  properties: {\n    hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    sender: {\n      type: \"Address\",\n      isRequired: true\n    },\n    sequence_number: {\n      type: \"U64\",\n      isRequired: true\n    },\n    max_gas_amount: {\n      type: \"U64\",\n      isRequired: true\n    },\n    gas_unit_price: {\n      type: \"U64\",\n      isRequired: true\n    },\n    expiration_timestamp_secs: {\n      type: \"U64\",\n      isRequired: true\n    },\n    payload: {\n      type: \"TransactionPayload\",\n      isRequired: true\n    },\n    signature: {\n      type: \"TransactionSignature\"\n    }\n  }\n};\n\n// src/generated/schemas/$RawTableItemRequest.ts\nvar $RawTableItemRequest = {\n  description: `Table Item request for the GetTableItemRaw API`,\n  properties: {\n    key: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$RoleType.ts\nvar $RoleType = {\n  type: \"Enum\"\n};\n\n// src/generated/schemas/$ScriptPayload.ts\nvar $ScriptPayload = {\n  description: `Payload which runs a script that can run multiple functions`,\n  properties: {\n    code: {\n      type: \"MoveScriptBytecode\",\n      isRequired: true\n    },\n    type_arguments: {\n      type: \"array\",\n      contains: {\n        type: \"MoveType\"\n      },\n      isRequired: true\n    },\n    arguments: {\n      type: \"array\",\n      contains: {\n        properties: {}\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$ScriptWriteSet.ts\nvar $ScriptWriteSet = {\n  properties: {\n    execute_as: {\n      type: \"Address\",\n      isRequired: true\n    },\n    script: {\n      type: \"ScriptPayload\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$StateCheckpointTransaction.ts\nvar $StateCheckpointTransaction = {\n  description: `A state checkpoint transaction`,\n  properties: {\n    version: {\n      type: \"U64\",\n      isRequired: true\n    },\n    hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    state_change_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    event_root_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    state_checkpoint_hash: {\n      type: \"HashValue\"\n    },\n    gas_used: {\n      type: \"U64\",\n      isRequired: true\n    },\n    success: {\n      type: \"boolean\",\n      description: `Whether the transaction was successful`,\n      isRequired: true\n    },\n    vm_status: {\n      type: \"string\",\n      description: `The VM status of the transaction, can tell useful information in a failure`,\n      isRequired: true\n    },\n    accumulator_root_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    changes: {\n      type: \"array\",\n      contains: {\n        type: \"WriteSetChange\"\n      },\n      isRequired: true\n    },\n    timestamp: {\n      type: \"U64\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$StateKeyWrapper.ts\nvar $StateKeyWrapper = {\n  type: \"string\",\n  description: `Representation of a StateKey as a hex string. This is used for cursor based pagination.\n    `\n};\n\n// src/generated/schemas/$SubmitTransactionRequest.ts\nvar $SubmitTransactionRequest = {\n  description: `A request to submit a transaction\n\n    This requires a transaction and a signature of it`,\n  properties: {\n    sender: {\n      type: \"Address\",\n      isRequired: true\n    },\n    sequence_number: {\n      type: \"U64\",\n      isRequired: true\n    },\n    max_gas_amount: {\n      type: \"U64\",\n      isRequired: true\n    },\n    gas_unit_price: {\n      type: \"U64\",\n      isRequired: true\n    },\n    expiration_timestamp_secs: {\n      type: \"U64\",\n      isRequired: true\n    },\n    payload: {\n      type: \"TransactionPayload\",\n      isRequired: true\n    },\n    signature: {\n      type: \"TransactionSignature\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$TableItemRequest.ts\nvar $TableItemRequest = {\n  description: `Table Item request for the GetTableItem API`,\n  properties: {\n    key_type: {\n      type: \"MoveType\",\n      isRequired: true\n    },\n    value_type: {\n      type: \"MoveType\",\n      isRequired: true\n    },\n    key: {\n      description: `The value of the table item's key`,\n      properties: {},\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$Transaction.ts\nvar $Transaction = {\n  type: \"one-of\",\n  description: `Enum of the different types of transactions in Aptos`,\n  contains: [{\n    type: \"Transaction_PendingTransaction\"\n  }, {\n    type: \"Transaction_UserTransaction\"\n  }, {\n    type: \"Transaction_GenesisTransaction\"\n  }, {\n    type: \"Transaction_BlockMetadataTransaction\"\n  }, {\n    type: \"Transaction_StateCheckpointTransaction\"\n  }]\n};\n\n// src/generated/schemas/$Transaction_BlockMetadataTransaction.ts\nvar $Transaction_BlockMetadataTransaction = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"BlockMetadataTransaction\"\n  }]\n};\n\n// src/generated/schemas/$Transaction_GenesisTransaction.ts\nvar $Transaction_GenesisTransaction = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"GenesisTransaction\"\n  }]\n};\n\n// src/generated/schemas/$Transaction_PendingTransaction.ts\nvar $Transaction_PendingTransaction = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"PendingTransaction\"\n  }]\n};\n\n// src/generated/schemas/$Transaction_StateCheckpointTransaction.ts\nvar $Transaction_StateCheckpointTransaction = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"StateCheckpointTransaction\"\n  }]\n};\n\n// src/generated/schemas/$Transaction_UserTransaction.ts\nvar $Transaction_UserTransaction = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"UserTransaction\"\n  }]\n};\n\n// src/generated/schemas/$TransactionPayload.ts\nvar $TransactionPayload = {\n  type: \"one-of\",\n  description: `An enum of the possible transaction payloads`,\n  contains: [{\n    type: \"TransactionPayload_EntryFunctionPayload\"\n  }, {\n    type: \"TransactionPayload_ScriptPayload\"\n  }, {\n    type: \"TransactionPayload_ModuleBundlePayload\"\n  }]\n};\n\n// src/generated/schemas/$TransactionPayload_EntryFunctionPayload.ts\nvar $TransactionPayload_EntryFunctionPayload = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"EntryFunctionPayload\"\n  }]\n};\n\n// src/generated/schemas/$TransactionPayload_ModuleBundlePayload.ts\nvar $TransactionPayload_ModuleBundlePayload = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"ModuleBundlePayload\"\n  }]\n};\n\n// src/generated/schemas/$TransactionPayload_ScriptPayload.ts\nvar $TransactionPayload_ScriptPayload = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"ScriptPayload\"\n  }]\n};\n\n// src/generated/schemas/$TransactionsBatchSingleSubmissionFailure.ts\nvar $TransactionsBatchSingleSubmissionFailure = {\n  description: `Information telling which batch submission transactions failed`,\n  properties: {\n    error: {\n      type: \"AptosError\",\n      isRequired: true\n    },\n    transaction_index: {\n      type: \"number\",\n      description: `The index of which transaction failed, same as submission order`,\n      isRequired: true,\n      format: \"uint64\"\n    }\n  }\n};\n\n// src/generated/schemas/$TransactionsBatchSubmissionResult.ts\nvar $TransactionsBatchSubmissionResult = {\n  description: `Batch transaction submission result\n\n    Tells which transactions failed`,\n  properties: {\n    transaction_failures: {\n      type: \"array\",\n      contains: {\n        type: \"TransactionsBatchSingleSubmissionFailure\"\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$TransactionSignature.ts\nvar $TransactionSignature = {\n  type: \"one-of\",\n  description: `An enum representing the different transaction signatures available`,\n  contains: [{\n    type: \"TransactionSignature_Ed25519Signature\"\n  }, {\n    type: \"TransactionSignature_MultiEd25519Signature\"\n  }, {\n    type: \"TransactionSignature_MultiAgentSignature\"\n  }]\n};\n\n// src/generated/schemas/$TransactionSignature_Ed25519Signature.ts\nvar $TransactionSignature_Ed25519Signature = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"Ed25519Signature\"\n  }]\n};\n\n// src/generated/schemas/$TransactionSignature_MultiAgentSignature.ts\nvar $TransactionSignature_MultiAgentSignature = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"MultiAgentSignature\"\n  }]\n};\n\n// src/generated/schemas/$TransactionSignature_MultiEd25519Signature.ts\nvar $TransactionSignature_MultiEd25519Signature = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"MultiEd25519Signature\"\n  }]\n};\n\n// src/generated/schemas/$U128.ts\nvar $U128 = {\n  type: \"string\",\n  description: `A string containing a 128-bit unsigned integer.\n\n    We represent u128 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u128s in JSON natively.\n    `,\n  format: \"uint128\"\n};\n\n// src/generated/schemas/$U256.ts\nvar $U256 = {\n  type: \"string\",\n  description: `A string containing a 256-bit unsigned integer.\n\n    We represent u256 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u256s in JSON natively.\n    `,\n  format: \"uint256\"\n};\n\n// src/generated/schemas/$U64.ts\nvar $U64 = {\n  type: \"string\",\n  description: `A string containing a 64-bit unsigned integer.\n\n    We represent u64 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u64s in JSON natively.\n    `,\n  format: \"uint64\"\n};\n\n// src/generated/schemas/$UserTransaction.ts\nvar $UserTransaction = {\n  description: `A transaction submitted by a user to change the state of the blockchain`,\n  properties: {\n    version: {\n      type: \"U64\",\n      isRequired: true\n    },\n    hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    state_change_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    event_root_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    state_checkpoint_hash: {\n      type: \"HashValue\"\n    },\n    gas_used: {\n      type: \"U64\",\n      isRequired: true\n    },\n    success: {\n      type: \"boolean\",\n      description: `Whether the transaction was successful`,\n      isRequired: true\n    },\n    vm_status: {\n      type: \"string\",\n      description: `The VM status of the transaction, can tell useful information in a failure`,\n      isRequired: true\n    },\n    accumulator_root_hash: {\n      type: \"HashValue\",\n      isRequired: true\n    },\n    changes: {\n      type: \"array\",\n      contains: {\n        type: \"WriteSetChange\"\n      },\n      isRequired: true\n    },\n    sender: {\n      type: \"Address\",\n      isRequired: true\n    },\n    sequence_number: {\n      type: \"U64\",\n      isRequired: true\n    },\n    max_gas_amount: {\n      type: \"U64\",\n      isRequired: true\n    },\n    gas_unit_price: {\n      type: \"U64\",\n      isRequired: true\n    },\n    expiration_timestamp_secs: {\n      type: \"U64\",\n      isRequired: true\n    },\n    payload: {\n      type: \"TransactionPayload\",\n      isRequired: true\n    },\n    signature: {\n      type: \"TransactionSignature\"\n    },\n    events: {\n      type: \"array\",\n      contains: {\n        type: \"Event\"\n      },\n      isRequired: true\n    },\n    timestamp: {\n      type: \"U64\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$VersionedEvent.ts\nvar $VersionedEvent = {\n  description: `An event from a transaction with a version`,\n  properties: {\n    version: {\n      type: \"U64\",\n      isRequired: true\n    },\n    guid: {\n      type: \"EventGuid\",\n      isRequired: true\n    },\n    sequence_number: {\n      type: \"U64\",\n      isRequired: true\n    },\n    type: {\n      type: \"MoveType\",\n      isRequired: true\n    },\n    data: {\n      description: `The JSON representation of the event`,\n      properties: {},\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$ViewRequest.ts\nvar $ViewRequest = {\n  description: `View request for the Move View Function API`,\n  properties: {\n    function: {\n      type: \"EntryFunctionId\",\n      isRequired: true\n    },\n    type_arguments: {\n      type: \"array\",\n      contains: {\n        type: \"MoveType\"\n      },\n      isRequired: true\n    },\n    arguments: {\n      type: \"array\",\n      contains: {\n        properties: {}\n      },\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$WriteModule.ts\nvar $WriteModule = {\n  description: `Write a new module or update an existing one`,\n  properties: {\n    address: {\n      type: \"Address\",\n      isRequired: true\n    },\n    state_key_hash: {\n      type: \"string\",\n      description: `State key hash`,\n      isRequired: true\n    },\n    data: {\n      type: \"MoveModuleBytecode\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$WriteResource.ts\nvar $WriteResource = {\n  description: `Write a resource or update an existing one`,\n  properties: {\n    address: {\n      type: \"Address\",\n      isRequired: true\n    },\n    state_key_hash: {\n      type: \"string\",\n      description: `State key hash`,\n      isRequired: true\n    },\n    data: {\n      type: \"MoveResource\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$WriteSet.ts\nvar $WriteSet = {\n  type: \"one-of\",\n  description: `The associated writeset with a payload`,\n  contains: [{\n    type: \"WriteSet_ScriptWriteSet\"\n  }, {\n    type: \"WriteSet_DirectWriteSet\"\n  }]\n};\n\n// src/generated/schemas/$WriteSet_DirectWriteSet.ts\nvar $WriteSet_DirectWriteSet = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"DirectWriteSet\"\n  }]\n};\n\n// src/generated/schemas/$WriteSet_ScriptWriteSet.ts\nvar $WriteSet_ScriptWriteSet = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"ScriptWriteSet\"\n  }]\n};\n\n// src/generated/schemas/$WriteSetChange.ts\nvar $WriteSetChange = {\n  type: \"one-of\",\n  description: `A final state change of a transaction on a resource or module`,\n  contains: [{\n    type: \"WriteSetChange_DeleteModule\"\n  }, {\n    type: \"WriteSetChange_DeleteResource\"\n  }, {\n    type: \"WriteSetChange_DeleteTableItem\"\n  }, {\n    type: \"WriteSetChange_WriteModule\"\n  }, {\n    type: \"WriteSetChange_WriteResource\"\n  }, {\n    type: \"WriteSetChange_WriteTableItem\"\n  }]\n};\n\n// src/generated/schemas/$WriteSetChange_DeleteModule.ts\nvar $WriteSetChange_DeleteModule = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"DeleteModule\"\n  }]\n};\n\n// src/generated/schemas/$WriteSetChange_DeleteResource.ts\nvar $WriteSetChange_DeleteResource = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"DeleteResource\"\n  }]\n};\n\n// src/generated/schemas/$WriteSetChange_DeleteTableItem.ts\nvar $WriteSetChange_DeleteTableItem = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"DeleteTableItem\"\n  }]\n};\n\n// src/generated/schemas/$WriteSetChange_WriteModule.ts\nvar $WriteSetChange_WriteModule = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"WriteModule\"\n  }]\n};\n\n// src/generated/schemas/$WriteSetChange_WriteResource.ts\nvar $WriteSetChange_WriteResource = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"WriteResource\"\n  }]\n};\n\n// src/generated/schemas/$WriteSetChange_WriteTableItem.ts\nvar $WriteSetChange_WriteTableItem = {\n  type: \"all-of\",\n  contains: [{\n    properties: {\n      type: {\n        type: \"string\",\n        isRequired: true\n      }\n    }\n  }, {\n    type: \"WriteTableItem\"\n  }]\n};\n\n// src/generated/schemas/$WriteSetPayload.ts\nvar $WriteSetPayload = {\n  description: `A writeset payload, used only for genesis`,\n  properties: {\n    write_set: {\n      type: \"WriteSet\",\n      isRequired: true\n    }\n  }\n};\n\n// src/generated/schemas/$WriteTableItem.ts\nvar $WriteTableItem = {\n  description: `Change set to write a table item`,\n  properties: {\n    state_key_hash: {\n      type: \"string\",\n      isRequired: true\n    },\n    handle: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    },\n    key: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    },\n    value: {\n      type: \"HexEncodedBytes\",\n      isRequired: true\n    },\n    data: {\n      type: \"DecodedTableData\"\n    }\n  }\n};\n\n// src/transaction_builder/builder.ts\nimport { sha3_256 as sha3Hash4 } from \"@noble/hashes/sha3\";\n\n// src/transaction_builder/builder_utils.ts\nvar stringStructTag = new StructTag(AccountAddress.fromHex(\"0x1\"), new Identifier(\"string\"), new Identifier(\"String\"), []);\nfunction assertType(val, types, message) {\n  if (!(types == null ? void 0 : types.includes(typeof val))) {\n    throw new Error(message || `Invalid arg: ${val} type should be ${types instanceof Array ? types.join(\" or \") : types}`);\n  }\n}\nfunction bail(message) {\n  throw new Error(message);\n}\nfunction isWhiteSpace(c) {\n  if (c.match(/\\s/)) {\n    return true;\n  }\n  return false;\n}\nfunction isValidAlphabetic(c) {\n  if (c.match(/[_A-Za-z0-9]/g)) {\n    return true;\n  }\n  return false;\n}\nfunction nextToken(tagStr, pos) {\n  const c = tagStr[pos];\n  if (c === \":\") {\n    if (tagStr.slice(pos, pos + 2) === \"::\") {\n      return [[\"COLON\", \"::\"], 2];\n    }\n    bail(\"Unrecognized token.\");\n  } else if (c === \"<\") {\n    return [[\"LT\", \"<\"], 1];\n  } else if (c === \">\") {\n    return [[\"GT\", \">\"], 1];\n  } else if (c === \",\") {\n    return [[\"COMMA\", \",\"], 1];\n  } else if (isWhiteSpace(c)) {\n    let res = \"\";\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n      if (isWhiteSpace(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n    return [[\"SPACE\", res], res.length];\n  } else if (isValidAlphabetic(c)) {\n    let res = \"\";\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n      if (isValidAlphabetic(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n    return [[\"IDENT\", res], res.length];\n  }\n  throw new Error(\"Unrecognized token.\");\n}\nfunction tokenize(tagStr) {\n  let pos = 0;\n  const tokens = [];\n  while (pos < tagStr.length) {\n    const [token, size] = nextToken(tagStr, pos);\n    if (token[0] !== \"SPACE\") {\n      tokens.push(token);\n    }\n    pos += size;\n  }\n  return tokens;\n}\nvar TypeTagParser = class {\n  constructor(tagStr) {\n    this.tokens = tokenize(tagStr);\n  }\n  consume(targetToken) {\n    const token = this.tokens.shift();\n    if (!token || token[1] !== targetToken) {\n      bail(\"Invalid type tag.\");\n    }\n  }\n  parseCommaList(endToken, allowTraillingComma) {\n    const res = [];\n    if (this.tokens.length <= 0) {\n      bail(\"Invalid type tag.\");\n    }\n    while (this.tokens[0][1] !== endToken) {\n      res.push(this.parseTypeTag());\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken) {\n        break;\n      }\n      this.consume(\",\");\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken && allowTraillingComma) {\n        break;\n      }\n      if (this.tokens.length <= 0) {\n        bail(\"Invalid type tag.\");\n      }\n    }\n    return res;\n  }\n  parseTypeTag() {\n    if (this.tokens.length === 0) {\n      bail(\"Invalid type tag.\");\n    }\n    const [tokenTy, tokenVal] = this.tokens.shift();\n    if (tokenVal === \"u8\") {\n      return new TypeTagU8();\n    }\n    if (tokenVal === \"u16\") {\n      return new TypeTagU16();\n    }\n    if (tokenVal === \"u32\") {\n      return new TypeTagU32();\n    }\n    if (tokenVal === \"u64\") {\n      return new TypeTagU64();\n    }\n    if (tokenVal === \"u128\") {\n      return new TypeTagU128();\n    }\n    if (tokenVal === \"u256\") {\n      return new TypeTagU256();\n    }\n    if (tokenVal === \"bool\") {\n      return new TypeTagBool();\n    }\n    if (tokenVal === \"address\") {\n      return new TypeTagAddress();\n    }\n    if (tokenVal === \"vector\") {\n      this.consume(\"<\");\n      const res = this.parseTypeTag();\n      this.consume(\">\");\n      return new TypeTagVector(res);\n    }\n    if (tokenTy === \"IDENT\" && (tokenVal.startsWith(\"0x\") || tokenVal.startsWith(\"0X\"))) {\n      const address = tokenVal;\n      this.consume(\"::\");\n      const [moduleTokenTy, module] = this.tokens.shift();\n      if (moduleTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n      this.consume(\"::\");\n      const [nameTokenTy, name] = this.tokens.shift();\n      if (nameTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n      let tyTags = [];\n      if (this.tokens.length > 0 && this.tokens[0][1] === \"<\") {\n        this.consume(\"<\");\n        tyTags = this.parseCommaList(\">\", true);\n        this.consume(\">\");\n      }\n      const structTag = new StructTag(AccountAddress.fromHex(address), new Identifier(module), new Identifier(name), tyTags);\n      return new TypeTagStruct(structTag);\n    }\n    throw new Error(\"Invalid type tag.\");\n  }\n};\nfunction ensureBoolean(val) {\n  assertType(val, [\"boolean\", \"string\"]);\n  if (typeof val === \"boolean\") {\n    return val;\n  }\n  if (val === \"true\") {\n    return true;\n  }\n  if (val === \"false\") {\n    return false;\n  }\n  throw new Error(\"Invalid boolean string.\");\n}\nfunction ensureNumber(val) {\n  assertType(val, [\"number\", \"string\"]);\n  if (typeof val === \"number\") {\n    return val;\n  }\n  const res = Number.parseInt(val, 10);\n  if (Number.isNaN(res)) {\n    throw new Error(\"Invalid number string.\");\n  }\n  return res;\n}\nfunction ensureBigInt(val) {\n  assertType(val, [\"number\", \"bigint\", \"string\"]);\n  return BigInt(val);\n}\nfunction serializeArg(argVal, argType, serializer) {\n  if (argType instanceof TypeTagBool) {\n    serializer.serializeBool(ensureBoolean(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU8) {\n    serializer.serializeU8(ensureNumber(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU16) {\n    serializer.serializeU16(ensureNumber(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU32) {\n    serializer.serializeU32(ensureNumber(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU64) {\n    serializer.serializeU64(ensureBigInt(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU128) {\n    serializer.serializeU128(ensureBigInt(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU256) {\n    serializer.serializeU256(ensureBigInt(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagAddress) {\n    let addr;\n    if (typeof argVal === \"string\" || argVal instanceof HexString) {\n      addr = AccountAddress.fromHex(argVal);\n    } else if (argVal instanceof AccountAddress) {\n      addr = argVal;\n    } else {\n      throw new Error(\"Invalid account address.\");\n    }\n    addr.serialize(serializer);\n    return;\n  }\n  if (argType instanceof TypeTagVector) {\n    if (argType.value instanceof TypeTagU8) {\n      if (argVal instanceof Uint8Array) {\n        serializer.serializeBytes(argVal);\n        return;\n      }\n      if (typeof argVal === \"string\") {\n        serializer.serializeStr(argVal);\n        return;\n      }\n    }\n    if (!(argVal instanceof Array)) {\n      throw new Error(\"Invalid vector args.\");\n    }\n    serializer.serializeU32AsUleb128(argVal.length);\n    argVal.forEach(arg => serializeArg(arg, argType.value, serializer));\n    return;\n  }\n  if (argType instanceof TypeTagStruct) {\n    const {\n      address,\n      module_name: moduleName,\n      name\n    } = argType.value;\n    if (`${HexString.fromUint8Array(address.address).toShortString()}::${moduleName.value}::${name.value}` !== \"0x1::string::String\") {\n      throw new Error(\"The only supported struct arg is of type 0x1::string::String\");\n    }\n    assertType(argVal, [\"string\"]);\n    serializer.serializeStr(argVal);\n    return;\n  }\n  throw new Error(\"Unsupported arg type.\");\n}\nfunction argToTransactionArgument(argVal, argType) {\n  if (argType instanceof TypeTagBool) {\n    return new TransactionArgumentBool(ensureBoolean(argVal));\n  }\n  if (argType instanceof TypeTagU8) {\n    return new TransactionArgumentU8(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU16) {\n    return new TransactionArgumentU16(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU32) {\n    return new TransactionArgumentU32(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU64) {\n    return new TransactionArgumentU64(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagU128) {\n    return new TransactionArgumentU128(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagU256) {\n    return new TransactionArgumentU256(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagAddress) {\n    let addr;\n    if (typeof argVal === \"string\" || argVal instanceof HexString) {\n      addr = AccountAddress.fromHex(argVal);\n    } else if (argVal instanceof AccountAddress) {\n      addr = argVal;\n    } else {\n      throw new Error(\"Invalid account address.\");\n    }\n    return new TransactionArgumentAddress(addr);\n  }\n  if (argType instanceof TypeTagVector && argType.value instanceof TypeTagU8) {\n    if (!(argVal instanceof Uint8Array)) {\n      throw new Error(`${argVal} should be an instance of Uint8Array`);\n    }\n    return new TransactionArgumentU8Vector(argVal);\n  }\n  throw new Error(\"Unknown type for TransactionArgument.\");\n}\n\n// src/transaction_builder/builder.ts\nvar RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\nvar RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\nvar TransactionBuilder = class {\n  constructor(signingFunction, rawTxnBuilder) {\n    this.rawTxnBuilder = rawTxnBuilder;\n    this.signingFunction = signingFunction;\n  }\n  build(func, ty_tags, args) {\n    if (!this.rawTxnBuilder) {\n      throw new Error(\"this.rawTxnBuilder doesn't exist.\");\n    }\n    return this.rawTxnBuilder.build(func, ty_tags, args);\n  }\n  static getSigningMessage(rawTxn) {\n    const hash = sha3Hash4.create();\n    if (rawTxn instanceof RawTransaction) {\n      hash.update(RAW_TRANSACTION_SALT);\n    } else if (rawTxn instanceof MultiAgentRawTransaction) {\n      hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n    } else {\n      throw new Error(\"Unknown transaction type.\");\n    }\n    const prefix = hash.digest();\n    const body = bcsToBytes(rawTxn);\n    const mergedArray = new Uint8Array(prefix.length + body.length);\n    mergedArray.set(prefix);\n    mergedArray.set(body, prefix.length);\n    return mergedArray;\n  }\n};\nvar TransactionBuilderEd25519 = class extends TransactionBuilder {\n  constructor(signingFunction, publicKey, rawTxnBuilder) {\n    super(signingFunction, rawTxnBuilder);\n    this.publicKey = publicKey;\n  }\n  rawToSigned(rawTxn) {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n    const authenticator = new TransactionAuthenticatorEd25519(new Ed25519PublicKey(this.publicKey), signature);\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n  sign(rawTxn) {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n};\nvar TransactionBuilderMultiEd25519 = class extends TransactionBuilder {\n  constructor(signingFunction, publicKey) {\n    super(signingFunction);\n    this.publicKey = publicKey;\n  }\n  rawToSigned(rawTxn) {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n    const authenticator = new TransactionAuthenticatorMultiEd25519(this.publicKey, signature);\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n  sign(rawTxn) {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n};\nvar TransactionBuilderABI = class {\n  constructor(abis, builderConfig) {\n    this.abiMap = /* @__PURE__ */new Map();\n    abis.forEach(abi => {\n      const deserializer = new Deserializer(abi);\n      const scriptABI = ScriptABI.deserialize(deserializer);\n      let k;\n      if (scriptABI instanceof EntryFunctionABI) {\n        const funcABI = scriptABI;\n        const {\n          address: addr,\n          name: moduleName\n        } = funcABI.module_name;\n        k = `${HexString.fromUint8Array(addr.address).toShortString()}::${moduleName.value}::${funcABI.name}`;\n      } else {\n        const funcABI = scriptABI;\n        k = funcABI.name;\n      }\n      if (this.abiMap.has(k)) {\n        throw new Error(\"Found conflicting ABI interfaces\");\n      }\n      this.abiMap.set(k, scriptABI);\n    });\n    this.builderConfig = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      expSecFromNow: DEFAULT_TXN_EXP_SEC_FROM_NOW,\n      ...builderConfig\n    };\n  }\n  static toBCSArgs(abiArgs, args) {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n    return args.map((arg, i) => {\n      const serializer = new Serializer();\n      serializeArg(arg, abiArgs[i].type_tag, serializer);\n      return serializer.getBytes();\n    });\n  }\n  static toTransactionArguments(abiArgs, args) {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n    return args.map((arg, i) => argToTransactionArgument(arg, abiArgs[i].type_tag));\n  }\n  setSequenceNumber(seqNumber) {\n    this.builderConfig.sequenceNumber = BigInt(seqNumber);\n  }\n  buildTransactionPayload(func, ty_tags, args) {\n    const typeTags = ty_tags.map(ty_arg => new TypeTagParser(ty_arg).parseTypeTag());\n    let payload;\n    if (!this.abiMap.has(func)) {\n      throw new Error(`Cannot find function: ${func}`);\n    }\n    const scriptABI = this.abiMap.get(func);\n    if (scriptABI instanceof EntryFunctionABI) {\n      const funcABI = scriptABI;\n      const bcsArgs = TransactionBuilderABI.toBCSArgs(funcABI.args, args);\n      payload = new TransactionPayloadEntryFunction(new EntryFunction(funcABI.module_name, new Identifier(funcABI.name), typeTags, bcsArgs));\n    } else if (scriptABI instanceof TransactionScriptABI) {\n      const funcABI = scriptABI;\n      const scriptArgs = TransactionBuilderABI.toTransactionArguments(funcABI.args, args);\n      payload = new TransactionPayloadScript(new Script(funcABI.code, typeTags, scriptArgs));\n    } else {\n      throw new Error(\"Unknown ABI format.\");\n    }\n    return payload;\n  }\n  build(func, ty_tags, args) {\n    const {\n      sender,\n      sequenceNumber,\n      gasUnitPrice,\n      maxGasAmount,\n      expSecFromNow,\n      chainId\n    } = this.builderConfig;\n    if (!gasUnitPrice) {\n      throw new Error(\"No gasUnitPrice provided.\");\n    }\n    const senderAccount = sender instanceof AccountAddress ? sender : AccountAddress.fromHex(sender);\n    const expTimestampSec = BigInt(Math.floor(Date.now() / 1e3) + Number(expSecFromNow));\n    const payload = this.buildTransactionPayload(func, ty_tags, args);\n    if (payload) {\n      return new RawTransaction(senderAccount, BigInt(sequenceNumber), payload, BigInt(maxGasAmount), BigInt(gasUnitPrice), expTimestampSec, new ChainId(Number(chainId)));\n    }\n    throw new Error(\"Invalid ABI.\");\n  }\n};\nvar TransactionBuilderRemoteABI = class {\n  constructor(aptosClient, builderConfig) {\n    this.aptosClient = aptosClient;\n    this.builderConfig = builderConfig;\n  }\n  async fetchABI(addr) {\n    const modules = await this.aptosClient.getAccountModules(addr);\n    const abis = modules.map(module => module.abi).flatMap(abi => abi.exposed_functions.filter(ef => ef.is_entry).map(ef => ({\n      fullName: `${abi.address}::${abi.name}::${ef.name}`,\n      ...ef\n    })));\n    const abiMap = /* @__PURE__ */new Map();\n    abis.forEach(abi => {\n      abiMap.set(abi.fullName, abi);\n    });\n    return abiMap;\n  }\n  async build(func, ty_tags, args) {\n    const normlize = s => s.replace(/^0[xX]0*/g, \"0x\");\n    func = normlize(func);\n    const funcNameParts = func.split(\"::\");\n    if (funcNameParts.length !== 3) {\n      throw new Error(\"'func' needs to be a fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coins::transfer\");\n    }\n    const [addr, module] = func.split(\"::\");\n    const abiMap = await this.fetchABI(addr);\n    if (!abiMap.has(func)) {\n      throw new Error(`${func} doesn't exist.`);\n    }\n    const funcAbi = abiMap.get(func);\n    const originalArgs = funcAbi.params.filter(param => param !== \"signer\" && param !== \"&signer\");\n    const typeArgABIs = originalArgs.map((arg, i) => new ArgumentABI(`var${i}`, new TypeTagParser(arg).parseTypeTag()));\n    const entryFunctionABI = new EntryFunctionABI(funcAbi.name, ModuleId.fromStr(`${addr}::${module}`), \"\", funcAbi.generic_type_params.map((_, i) => new TypeArgumentABI(`${i}`)), typeArgABIs);\n    const {\n      sender,\n      ...rest\n    } = this.builderConfig;\n    const senderAddress = sender instanceof AccountAddress ? HexString.fromUint8Array(sender.address) : sender;\n    const [{\n      sequence_number: sequenceNumber\n    }, chainId, {\n      gas_estimate: gasUnitPrice\n    }] = await Promise.all([(rest == null ? void 0 : rest.sequenceNumber) ? Promise.resolve({\n      sequence_number: rest == null ? void 0 : rest.sequenceNumber\n    }) : this.aptosClient.getAccount(senderAddress), (rest == null ? void 0 : rest.chainId) ? Promise.resolve(rest == null ? void 0 : rest.chainId) : this.aptosClient.getChainId(), (rest == null ? void 0 : rest.gasUnitPrice) ? Promise.resolve({\n      gas_estimate: rest == null ? void 0 : rest.gasUnitPrice\n    }) : this.aptosClient.estimateGasPrice()]);\n    const builderABI = new TransactionBuilderABI([bcsToBytes(entryFunctionABI)], {\n      sender,\n      sequenceNumber,\n      chainId,\n      gasUnitPrice: BigInt(gasUnitPrice),\n      ...rest\n    });\n    return builderABI.build(func, ty_tags, args);\n  }\n};\n__decorateClass([MemoizeExpiring(10 * 60 * 1e3)], TransactionBuilderRemoteABI.prototype, \"fetchABI\", 1);\n\n// src/aptos_client.ts\nvar _AptosClient = class {\n  constructor(nodeUrl, config) {\n    let doNotFixNodeUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!nodeUrl) {\n      throw new Error(\"Node URL cannot be empty.\");\n    }\n    const conf = config === void 0 || config === null ? {} : {\n      ...config\n    };\n    if (doNotFixNodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = fixNodeUrl(nodeUrl);\n    }\n    conf.BASE = this.nodeUrl;\n    if ((config == null ? void 0 : config.WITH_CREDENTIALS) === false) {\n      conf.WITH_CREDENTIALS = false;\n    } else {\n      conf.WITH_CREDENTIALS = true;\n    }\n    this.client = new AptosGeneratedClient(conf);\n  }\n  async getAccount(accountAddress) {\n    return this.client.accounts.getAccount(HexString.ensure(accountAddress).hex());\n  }\n  async getAccountTransactions(accountAddress, query) {\n    var _a;\n    return this.client.transactions.getAccountTransactions(HexString.ensure(accountAddress).hex(), (_a = query == null ? void 0 : query.start) == null ? void 0 : _a.toString(), query == null ? void 0 : query.limit);\n  }\n  async getAccountModules(accountAddress, query) {\n    const f = this.client.accounts.getAccountModules.bind({\n      httpRequest: this.client.request\n    });\n    const out = await paginateWithCursor(f, accountAddress, 1e3, query);\n    return out;\n  }\n  async getAccountModule(accountAddress, moduleName, query) {\n    var _a;\n    return this.client.accounts.getAccountModule(HexString.ensure(accountAddress).hex(), moduleName, (_a = query == null ? void 0 : query.ledgerVersion) == null ? void 0 : _a.toString());\n  }\n  async getAccountResources(accountAddress, query) {\n    const f = this.client.accounts.getAccountResources.bind({\n      httpRequest: this.client.request\n    });\n    const out = await paginateWithCursor(f, accountAddress, 9999, query);\n    return out;\n  }\n  async getAccountResource(accountAddress, resourceType, query) {\n    var _a;\n    return this.client.accounts.getAccountResource(HexString.ensure(accountAddress).hex(), resourceType, (_a = query == null ? void 0 : query.ledgerVersion) == null ? void 0 : _a.toString());\n  }\n  static generateBCSTransaction(accountFrom, rawTxn) {\n    const txnBuilder = new TransactionBuilderEd25519(signingMessage => {\n      const sigHexStr = accountFrom.signBuffer(signingMessage);\n      return new aptos_types_exports.Ed25519Signature(sigHexStr.toUint8Array());\n    }, accountFrom.pubKey().toUint8Array());\n    return txnBuilder.sign(rawTxn);\n  }\n  static generateBCSSimulation(accountFrom, rawTxn) {\n    const txnBuilder = new TransactionBuilderEd25519(_signingMessage => {\n      const invalidSigBytes = new Uint8Array(64);\n      return new aptos_types_exports.Ed25519Signature(invalidSigBytes);\n    }, accountFrom.pubKey().toUint8Array());\n    return txnBuilder.sign(rawTxn);\n  }\n  async generateTransaction(sender, payload, options) {\n    const config = {\n      sender\n    };\n    if (options == null ? void 0 : options.sequence_number) {\n      config.sequenceNumber = options.sequence_number;\n    }\n    if (options == null ? void 0 : options.gas_unit_price) {\n      config.gasUnitPrice = options.gas_unit_price;\n    }\n    if (options == null ? void 0 : options.max_gas_amount) {\n      config.maxGasAmount = options.max_gas_amount;\n    }\n    if (options == null ? void 0 : options.expiration_timestamp_secs) {\n      const timestamp = Number.parseInt(options.expiration_timestamp_secs, 10);\n      config.expSecFromNow = timestamp - Math.floor(Date.now() / 1e3);\n    }\n    const builder = new TransactionBuilderRemoteABI(this, config);\n    return builder.build(payload.function, payload.type_arguments, payload.arguments);\n  }\n  async signTransaction(accountFrom, rawTransaction) {\n    return Promise.resolve(_AptosClient.generateBCSTransaction(accountFrom, rawTransaction));\n  }\n  async getEventsByCreationNumber(address, creationNumber, query) {\n    var _a;\n    return this.client.events.getEventsByCreationNumber(HexString.ensure(address).hex(), creationNumber.toString(), (_a = query == null ? void 0 : query.start) == null ? void 0 : _a.toString(), query == null ? void 0 : query.limit);\n  }\n  async getEventsByEventHandle(address, eventHandleStruct, fieldName, query) {\n    var _a;\n    return this.client.events.getEventsByEventHandle(HexString.ensure(address).hex(), eventHandleStruct, fieldName, (_a = query == null ? void 0 : query.start) == null ? void 0 : _a.toString(), query == null ? void 0 : query.limit);\n  }\n  async submitTransaction(signedTxn) {\n    return this.submitSignedBCSTransaction(signedTxn);\n  }\n  async simulateTransaction(accountOrPubkey, rawTransaction, query) {\n    let signedTxn;\n    if (accountOrPubkey instanceof AptosAccount) {\n      signedTxn = _AptosClient.generateBCSSimulation(accountOrPubkey, rawTransaction);\n    } else if (accountOrPubkey instanceof MultiEd25519PublicKey) {\n      const txnBuilder = new TransactionBuilderMultiEd25519(() => {\n        const {\n          threshold\n        } = accountOrPubkey;\n        const bits = [];\n        const signatures = [];\n        for (let i = 0; i < threshold; i += 1) {\n          bits.push(i);\n          signatures.push(new aptos_types_exports.Ed25519Signature(new Uint8Array(64)));\n        }\n        const bitmap = aptos_types_exports.MultiEd25519Signature.createBitmap(bits);\n        return new aptos_types_exports.MultiEd25519Signature(signatures, bitmap);\n      }, accountOrPubkey);\n      signedTxn = txnBuilder.sign(rawTransaction);\n    } else {\n      const txnBuilder = new TransactionBuilderEd25519(() => {\n        const invalidSigBytes = new Uint8Array(64);\n        return new aptos_types_exports.Ed25519Signature(invalidSigBytes);\n      }, accountOrPubkey.toBytes());\n      signedTxn = txnBuilder.sign(rawTransaction);\n    }\n    return this.submitBCSSimulation(signedTxn, query);\n  }\n  async submitSignedBCSTransaction(signedTxn) {\n    return this.client.request.request({\n      url: \"/transactions\",\n      method: \"POST\",\n      body: signedTxn,\n      mediaType: \"application/x.aptos.signed_transaction+bcs\"\n    });\n  }\n  async submitBCSSimulation(bcsBody, query) {\n    var _a, _b, _c;\n    const queryParams = {\n      estimate_gas_unit_price: (_a = query == null ? void 0 : query.estimateGasUnitPrice) != null ? _a : false,\n      estimate_max_gas_amount: (_b = query == null ? void 0 : query.estimateMaxGasAmount) != null ? _b : false,\n      estimate_prioritized_gas_unit_price: (_c = query == null ? void 0 : query.estimatePrioritizedGasUnitPrice) != null ? _c : false\n    };\n    return this.client.request.request({\n      url: \"/transactions/simulate\",\n      query: queryParams,\n      method: \"POST\",\n      body: bcsBody,\n      mediaType: \"application/x.aptos.signed_transaction+bcs\"\n    });\n  }\n  async getTransactions(query) {\n    var _a;\n    return this.client.transactions.getTransactions((_a = query == null ? void 0 : query.start) == null ? void 0 : _a.toString(), query == null ? void 0 : query.limit);\n  }\n  async getTransactionByHash(txnHash) {\n    return this.client.transactions.getTransactionByHash(txnHash);\n  }\n  async getTransactionByVersion(txnVersion) {\n    return this.client.transactions.getTransactionByVersion(txnVersion.toString());\n  }\n  async transactionPending(txnHash) {\n    try {\n      const response = await this.client.transactions.getTransactionByHash(txnHash);\n      return response.type === \"pending_transaction\";\n    } catch (e) {\n      if ((e == null ? void 0 : e.status) === 404) {\n        return true;\n      }\n      throw e;\n    }\n  }\n  async waitForTransactionWithResult(txnHash, extraArgs) {\n    var _a, _b;\n    const timeoutSecs = (_a = extraArgs == null ? void 0 : extraArgs.timeoutSecs) != null ? _a : DEFAULT_TXN_TIMEOUT_SEC;\n    const checkSuccess = (_b = extraArgs == null ? void 0 : extraArgs.checkSuccess) != null ? _b : false;\n    let isPending = true;\n    let count = 0;\n    let lastTxn;\n    while (isPending) {\n      if (count >= timeoutSecs) {\n        break;\n      }\n      try {\n        lastTxn = await this.client.transactions.getTransactionByHash(txnHash);\n        isPending = lastTxn.type === \"pending_transaction\";\n        if (!isPending) {\n          break;\n        }\n      } catch (e) {\n        const isApiError = e instanceof ApiError;\n        const isRequestError = isApiError && e.status !== 404 && e.status >= 400 && e.status < 500;\n        if (!isApiError || isRequestError) {\n          throw e;\n        }\n      }\n      await sleep(1e3);\n      count += 1;\n    }\n    if (lastTxn === void 0) {\n      throw new Error(`Waiting for transaction ${txnHash} failed`);\n    }\n    if (isPending) {\n      throw new WaitForTransactionError(`Waiting for transaction ${txnHash} timed out after ${timeoutSecs} seconds`, lastTxn);\n    }\n    if (!checkSuccess) {\n      return lastTxn;\n    }\n    if (!(lastTxn == null ? void 0 : lastTxn.success)) {\n      throw new FailedTransactionError(`Transaction ${txnHash} committed to the blockchain but execution failed`, lastTxn);\n    }\n    return lastTxn;\n  }\n  async waitForTransaction(txnHash, extraArgs) {\n    await this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n  async getLedgerInfo() {\n    return this.client.general.getLedgerInfo();\n  }\n  async getChainId() {\n    const result = await this.getLedgerInfo();\n    return result.chain_id;\n  }\n  async getTableItem(handle, data, query) {\n    var _a;\n    const tableItem = await this.client.tables.getTableItem(handle, data, (_a = query == null ? void 0 : query.ledgerVersion) == null ? void 0 : _a.toString());\n    return tableItem;\n  }\n  async generateRawTransaction(accountFrom, payload, extraArgs) {\n    const [{\n      sequence_number: sequenceNumber\n    }, chainId, {\n      gas_estimate: gasEstimate\n    }] = await Promise.all([this.getAccount(accountFrom), this.getChainId(), (extraArgs == null ? void 0 : extraArgs.gasUnitPrice) ? Promise.resolve({\n      gas_estimate: extraArgs.gasUnitPrice\n    }) : this.estimateGasPrice()]);\n    const {\n      maxGasAmount,\n      gasUnitPrice,\n      expireTimestamp\n    } = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      gasUnitPrice: BigInt(gasEstimate),\n      expireTimestamp: BigInt(Math.floor(Date.now() / 1e3) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n      ...extraArgs\n    };\n    return new aptos_types_exports.RawTransaction(aptos_types_exports.AccountAddress.fromHex(accountFrom), BigInt(sequenceNumber), payload, maxGasAmount, gasUnitPrice, expireTimestamp, new aptos_types_exports.ChainId(chainId));\n  }\n  async generateSignSubmitTransaction(sender, payload, extraArgs) {\n    const rawTransaction = await this.generateRawTransaction(sender.address(), payload, extraArgs);\n    const bcsTxn = _AptosClient.generateBCSTransaction(sender, rawTransaction);\n    const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n  async publishPackage(sender, packageMetadata, modules, extraArgs) {\n    const codeSerializer = new Serializer();\n    serializeVector(modules, codeSerializer);\n    const payload = new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural(\"0x1::code\", \"publish_package_txn\", [], [bcsSerializeBytes(packageMetadata), codeSerializer.getBytes()]));\n    return this.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n  async generateSignSubmitWaitForTransaction(sender, payload, extraArgs) {\n    const txnHash = await this.generateSignSubmitTransaction(sender, payload, extraArgs);\n    return this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n  async estimateGasPrice() {\n    return this.client.transactions.estimateGasPrice();\n  }\n  async estimateMaxGasAmount(forAccount) {\n    const typeTag = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n    const [{\n      gas_estimate: gasUnitPrice\n    }, resources] = await Promise.all([this.estimateGasPrice(), this.getAccountResources(forAccount)]);\n    const accountResource = resources.find(r => r.type === typeTag);\n    const balance = BigInt(accountResource.data.coin.value);\n    return balance / BigInt(gasUnitPrice);\n  }\n  async rotateAuthKeyEd25519(forAccount, toPrivateKeyBytes, extraArgs) {\n    const {\n      sequence_number: sequenceNumber,\n      authentication_key: authKey\n    } = await this.getAccount(forAccount.address());\n    const helperAccount = new AptosAccount(toPrivateKeyBytes);\n    const challenge = new aptos_types_exports.RotationProofChallenge(aptos_types_exports.AccountAddress.CORE_CODE_ADDRESS, \"account\", \"RotationProofChallenge\", BigInt(sequenceNumber), aptos_types_exports.AccountAddress.fromHex(forAccount.address()), new aptos_types_exports.AccountAddress(new HexString(authKey).toUint8Array()), helperAccount.pubKey().toUint8Array());\n    const challengeHex = HexString.fromUint8Array(bcsToBytes(challenge));\n    const proofSignedByCurrentPrivateKey = forAccount.signHexString(challengeHex);\n    const proofSignedByNewPrivateKey = helperAccount.signHexString(challengeHex);\n    const payload = new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural(\"0x1::account\", \"rotate_authentication_key\", [], [bcsSerializeU8(0), bcsSerializeBytes(forAccount.pubKey().toUint8Array()), bcsSerializeU8(0), bcsSerializeBytes(helperAccount.pubKey().toUint8Array()), bcsSerializeBytes(proofSignedByCurrentPrivateKey.toUint8Array()), bcsSerializeBytes(proofSignedByNewPrivateKey.toUint8Array())]));\n    const rawTransaction = await this.generateRawTransaction(forAccount.address(), payload, extraArgs);\n    const bcsTxn = _AptosClient.generateBCSTransaction(forAccount, rawTransaction);\n    return this.submitSignedBCSTransaction(bcsTxn);\n  }\n  async lookupOriginalAddress(addressOrAuthKey) {\n    const resource = await this.getAccountResource(\"0x1\", \"0x1::account::OriginatingAddress\");\n    const {\n      address_map: {\n        handle\n      }\n    } = resource.data;\n    const origAddress = await this.getTableItem(handle, {\n      key_type: \"address\",\n      value_type: \"address\",\n      key: HexString.ensure(addressOrAuthKey).hex()\n    });\n    return new HexString(origAddress);\n  }\n  async getBlockByHeight(blockHeight, withTransactions) {\n    return this.client.blocks.getBlockByHeight(blockHeight, withTransactions);\n  }\n  async getBlockByVersion(version, withTransactions) {\n    return this.client.blocks.getBlockByVersion(version, withTransactions);\n  }\n  async view(payload, ledger_version) {\n    return this.client.view.view(payload, ledger_version);\n  }\n  clearCache(tags) {\n    clear(tags);\n  }\n};\nvar AptosClient = _AptosClient;\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccount\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccountTransactions\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccountModules\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccountModule\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccountResources\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccountResource\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getEventsByCreationNumber\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getEventsByEventHandle\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"submitSignedBCSTransaction\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"submitBCSSimulation\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getTransactions\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getTransactionByHash\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getTransactionByVersion\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getLedgerInfo\", 1);\n__decorateClass([Memoize()], AptosClient.prototype, \"getChainId\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getTableItem\", 1);\n__decorateClass([parseApiError, Memoize({\n  ttlMs: 5 * 60 * 1e3,\n  tags: [\"gas_estimates\"]\n})], AptosClient.prototype, \"estimateGasPrice\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"estimateMaxGasAmount\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getBlockByHeight\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"getBlockByVersion\", 1);\n__decorateClass([parseApiError], AptosClient.prototype, \"view\", 1);\nvar ApiError2 = class extends Error {\n  constructor(status, message, errorCode, vmErrorCode) {\n    super(message);\n    this.status = status;\n    this.message = message;\n    this.errorCode = errorCode;\n    this.vmErrorCode = vmErrorCode;\n  }\n};\nvar WaitForTransactionError = class extends Error {\n  constructor(message, lastSubmittedTransaction) {\n    super(message);\n    this.lastSubmittedTransaction = lastSubmittedTransaction;\n  }\n};\nvar FailedTransactionError = class extends Error {\n  constructor(message, transaction) {\n    super(message);\n    this.transaction = transaction;\n  }\n};\nfunction parseApiError(target, propertyKey, descriptor) {\n  const childFunction = descriptor.value;\n  descriptor.value = async function wrapper() {\n    var _a, _b;\n    try {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      const res = await childFunction.apply(this, [...args]);\n      return res;\n    } catch (e) {\n      if (e instanceof ApiError) {\n        throw new ApiError2(e.status, JSON.stringify({\n          message: e.message,\n          ...e.body\n        }), (_a = e.body) == null ? void 0 : _a.error_code, (_b = e.body) == null ? void 0 : _b.vm_error_code);\n      }\n      throw e;\n    }\n  };\n  return descriptor;\n}\n\n// src/abis.ts\nvar TOKEN_TRANSFER_OPT_IN = \"a11ceb0b0500000006010004020408030c0a05161d073339086c400000010100020700010307000104030100010504020007060c0508000800030503010801000405080008000304060c0801050306737472696e6705746f6b656e06537472696e6707546f6b656e4964136372656174655f746f6b656e5f69645f726177087472616e73666572000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000010c0b010b020b030b0411000c070b000b070b050b06110102\";\nvarf7472616e736665725f736372697074000000000000000000000000000000000000000000000000000000000000000305746f6b656e0000051063726561746f72735f61646472657373040a636f6c6c656374696f6e07000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e6700046e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67001070726f70657274795f76657273696f6e0206616d6f756ed75746174655f746f6b656e5f70726f70657274696573000000000000000000000000000000000000000000000000000000000000000305746f6b656eba02206d75746174652074686520746f6b656e2070726f706572747920616e64207361766520746865206e65772070726f706572747920696e20546f6b656e53746f72650a2069662074686520746f6b656e2070726f70657274795f76657273696f6e20697320302c2077652077696c6c206372656174652061206e65772070726f70657274795f76657273696f6e2070657220746f6b656e20746f2067656e65726174652061206e657720746f6b656e5f69642070657220746f6b656e0a2069662074686520746f6b656e2070726f70657274795f76657273696f6e206973206e6f7420302c2077652077696c6c206a75737420757064617465207468652070726f70657274794d617020616e642075736520746865206578697374696e6720746f6b656e5f6964202870726f70657274795f76657273696f6e2900090b746f6b656e5f6f776e6572040763726561746f72040f636f6c6c656374696f6e5f6e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67000a746f6b656e5f6e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e670016746f6b656e5f70726f70657274795f76657273696f6e0206616d6f756e7402046b6579730607000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67000676616c7565730606010574797065730607000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e6700\", \"01166f70745f696e5f6469726563745f7472616e73666572000000000000000000000000000000000000000000000000000000000000000305746f6b656e000001066f70745f696e00\", \"01046275726e000000000000000000000000000000000000000000000000000000000000000305746f6b656e20204275726e206120746f6b656e2062792074686520746f6b656e206f776e657200051063726561746f72735f61646472657373040a636f6c6c656374696f6e07000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e6700046e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67001070726f70657274795f76657273696f6e0206616d6f756e7402\", \"010f6275726e5f62795f63726561746f72000000000000000000000000000000000000000000000000000000000000000305746f6b656e6a204275726e206120746f6b656e2062792063726561746f72207768656e2074686520746f6b656e2773204255524e41424c455f42595f43524541544f5220697320747275650a2054686520746f6b656e206973206f776e65642061742061646472657373206f776e65720005056f776e6572040a636f6c6c656374696f6e07000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e6700046e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67001070726f70657274795f76657273696f6e0206616d6f756e7402\"];\nvar COIN_ABIS = [\"01087472616E73666572000000000000000000000000000000000000000000000000000000000000000104636F696E3C205472616E73666572732060616D6F756E7460206F6620636F696E732060436F696E54797065602066726F6D206066726F6D6020746F2060746F602E0109636F696E5F747970650202746F0406616D6F756E7402\", \"01087472616e7366657200000000000000000000000000000000000000000000000000000000000000010d6170746f735f6163636f756e7400000202746f0406616d6f756e7402\"];\n\n// src/coin_client.ts\nvar CoinClient = class {\n  constructor(aptosClient) {\n    this.aptosClient = aptosClient;\n    this.transactionBuilder = new TransactionBuilderABI(COIN_ABIS.map(abi => new HexString(abi).toUint8Array()));\n  }\n  async transfer(from, to, amount, extraArgs) {\n    var _a;\n    const coinTypeToTransfer = (_a = extraArgs == null ? void 0 : extraArgs.coinType) != null ? _a : APTOS_COIN;\n    const func = (extraArgs == null ? void 0 : extraArgs.createReceiverIfMissing) ? \"0x1::aptos_account::transfer\" : \"0x1::coin::transfer\";\n    const typeArgs = (extraArgs == null ? void 0 : extraArgs.createReceiverIfMissing) ? [] : [coinTypeToTransfer];\n    const toAddress = getAddressFromAccountOrAddress(to);\n    const payload = this.transactionBuilder.buildTransactionPayload(func, typeArgs, [toAddress, amount]);\n    return this.aptosClient.generateSignSubmitTransaction(from, payload, extraArgs);\n  }\n  async checkBalance(account, extraArgs) {\n    var _a;\n    const coinType = (_a = extraArgs == null ? void 0 : extraArgs.coinType) != null ? _a : APTOS_COIN;\n    const typeTag = `0x1::coin::CoinStore<${coinType}>`;\n    const address = getAddressFromAccountOrAddress(account);\n    const accountResource = await this.aptosClient.getAccountResource(address, typeTag);\n    return BigInt(accountResource.data.coin.value);\n  }\n};\n\n// src/faucet_client.ts\nvar FaucetClient = class extends AptosClient {\n  constructor(nodeUrl, faucetUrl, config) {\n    var _a, _b, _c;\n    super(nodeUrl, config);\n    if (!faucetUrl) {\n      throw new Error(\"Faucet URL cannot be empty.\");\n    }\n    this.faucetRequester = new AxiosHttpRequest({\n      BASE: faucetUrl,\n      VERSION: (_a = config == null ? void 0 : config.VERSION) != null ? _a : \"0.1.0\",\n      WITH_CREDENTIALS: (_b = config == null ? void 0 : config.WITH_CREDENTIALS) != null ? _b : false,\n      CREDENTIALS: (_c = config == null ? void 0 : config.CREDENTIALS) != null ? _c : \"include\",\n      TOKEN: config == null ? void 0 : config.TOKEN,\n      USERNAME: config == null ? void 0 : config.USERNAME,\n      PASSWORD: config == null ? void 0 : config.PASSWORD,\n      HEADERS: config == null ? void 0 : config.HEADERS,\n      ENCODE_PATH: config == null ? void 0 : config.ENCODE_PATH\n    });\n  }\n  async fundAccount(address, amount) {\n    let timeoutSecs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_TXN_TIMEOUT_SEC;\n    const tnxHashes = await this.faucetRequester.request({\n      method: \"POST\",\n      url: \"/mint\",\n      query: {\n        address: HexString.ensure(address).noPrefix(),\n        amount\n      }\n    });\n    const promises = [];\n    for (let i = 0; i < tnxHashes.length; i += 1) {\n      const tnxHash = tnxHashes[i];\n      promises.push(this.waitForTransaction(tnxHash, {\n        timeoutSecs\n      }));\n    }\n    await Promise.all(promises);\n    return tnxHashes;\n  }\n};\n\n// src/utils/property_map_serde.ts\nvar PropertyValue = class {\n  constructor(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n};\nvar PropertyMap = class {\n  constructor() {\n    this.data = {};\n  }\n  setProperty(key, value) {\n    this.data[key] = value;\n  }\n};\nfunction getPropertyType(typ) {\n  let typeTag;\n  if (typ === \"string\" || typ === \"String\") {\n    typeTag = new TypeTagStruct(stringStructTag);\n  } else {\n    typeTag = new TypeTagParser(typ).parseTypeTag();\n  }\n  return typeTag;\n}\nfunction getPropertyValueRaw(values, types) {\n  if (values.length !== types.length) {\n    throw new Error(\"Length of property values and types not match\");\n  }\n  const results = new Array();\n  types.forEach((typ, index) => {\n    try {\n      const typeTag = getPropertyType(typ);\n      const serializer = new Serializer();\n      serializeArg(values[index], typeTag, serializer);\n      results.push(serializer.getBytes());\n    } catch (error) {\n      results.push(new TextEncoder().encode(values[index]));\n    }\n  });\n  return results;\n}\nfunction deserializePropertyMap(rawPropertyMap) {\n  const entries = rawPropertyMap.map.data;\n  const pm = new PropertyMap();\n  entries.forEach(prop => {\n    const {\n      key\n    } = prop;\n    const val = prop.value.value;\n    const typ = prop.value.type;\n    const typeTag = getPropertyType(typ);\n    const newValue = deserializeValueBasedOnTypeTag(typeTag, val);\n    const pv = new PropertyValue(typ, newValue);\n    pm.setProperty(key, pv);\n  });\n  return pm;\n}\nfunction deserializeValueBasedOnTypeTag(tag, val) {\n  const de = new Deserializer(new HexString(val).toUint8Array());\n  let res = \"\";\n  if (tag instanceof TypeTagU8) {\n    res = de.deserializeU8().toString();\n  } else if (tag instanceof TypeTagU64) {\n    res = de.deserializeU64().toString();\n  } else if (tag instanceof TypeTagU128) {\n    res = de.deserializeU128().toString();\n  } else if (tag instanceof TypeTagBool) {\n    res = de.deserializeBool() ? \"true\" : \"false\";\n  } else if (tag instanceof TypeTagAddress) {\n    res = HexString.fromUint8Array(de.deserializeFixedBytes(32)).hex();\n  } else if (tag instanceof TypeTagStruct && tag.isStringTypeTag()) {\n    res = de.deserializeStr();\n  } else {\n    res = val;\n  }\n  return res;\n}\n\n// src/token_types.ts\nvar token_types_exports = {};\n__export(token_types_exports, {\n  PropertyMap: () => PropertyMap,\n  PropertyValue: () => PropertyValue,\n  Token: () => Token,\n  TokenData: () => TokenData\n});\nvar TokenData = class {\n  constructor(collection, description, name, maximum, supply, uri, default_properties, mutability_config) {\n    this.collection = collection;\n    this.description = description;\n    this.name = name;\n    this.maximum = maximum;\n    this.supply = supply;\n    this.uri = uri;\n    this.default_properties = deserializePropertyMap(default_properties);\n    this.mutability_config = mutability_config;\n  }\n};\nvar Token = class {\n  constructor(id, amount, token_properties) {\n    this.id = id;\n    this.amount = amount;\n    this.token_properties = deserializePropertyMap(token_properties);\n  }\n};\n\n// src/token_client.ts\nvar TokenClient = class {\n  constructor(aptosClient) {\n    this.aptosClient = aptosClient;\n    this.transactionBuilder = new TransactionBuilderABI(TOKEN_ABIS.map(abi => new HexString(abi).toUint8Array()));\n  }\n  async createCollection(account, name, description, uri) {\n    let maxAmount = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : MAX_U64_BIG_INT;\n    let extraArgs = arguments.length > 5 ? arguments[5] : undefined;\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token::create_collection_script\", [], [name, description, uri, maxAmount, [false, false, false]]);\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n  async createToken(account, collectionName, name, description, supply, uri) {\n    let max = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : MAX_U64_BIG_INT;\n    let royalty_payee_address = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : account.address();\n    let royalty_points_denominator = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n    let royalty_points_numerator = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let property_keys = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : [];\n    let property_values = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : [];\n    let property_types = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : [];\n    let extraArgs = arguments.length > 13 ? arguments[13] : undefined;\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token::create_token_script\", [], [collectionName, name, description, supply, max, uri, royalty_payee_address, royalty_points_denominator, royalty_points_numerator, [false, false, false, false, false], property_keys, getPropertyValueRaw(property_values, property_types), property_types]);\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n  async createTokenWithMutabilityConfig(account, collectionName, name, description, supply, uri) {\n    let max = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : MAX_U64_BIG_INT;\n    let royalty_payee_address = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : account.address();\n    let royalty_points_denominator = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n    let royalty_points_numerator = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let property_keys = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : [];\n    let property_values = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : [];\n    let property_types = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : [];\n    let mutability_config = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : [false, false, false, false, false];\n    let extraArgs = arguments.length > 14 ? arguments[14] : undefined;\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token::create_token_script\", [], [collectionName, name, description, supply, max, uri, royalty_payee_address, royalty_points_denominator, royalty_points_numerator, mutability_config, property_keys, property_values, property_types]);\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n  async offerToken(account, receiver, creator, collectionName, name, amount) {\n    let property_version = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let extraArgs = arguments.length > 7 ? arguments[7] : undefined;\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token_transfers::offer_script\", [], [receiver, creator, collectionName, name, property_version, amount]);\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n  async claimToken(account, sender, creator, collectionName, name) {\n    let property_version = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let extraArgs = arguments.length > 6 ? arguments[6] : undefined;\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token_transfers::claim_script\", [], [sender, creator, collectionName, name, property_version]);\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n  async cancelTokenOffer(account, receiver, creator, collectionName, name) {\n    let property_version = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let extraArgs = arguments.length > 6 ? arguments[6] : undefined;\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token_transfers::cancel_offer_script\", [], [receiver, creator, collectionName, name, property_version]);\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n  async directTransferToken(sender, receiver, creator, collectionName, name, amount) {\n    let propertyVersion = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let extraArgs = arguments.length > 7 ? arguments[7] : undefined;\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token::direct_transfer_script\", [], [creator, collectionName, name, propertyVersion, amount]);\n    const rawTxn = await this.aptosClient.generateRawTransaction(sender.address(), payload, extraArgs);\n    const multiAgentTxn = new aptos_types_exports.MultiAgentRawTransaction(rawTxn, [aptos_types_exports.AccountAddress.fromHex(receiver.address())]);\n    const senderSignature = new aptos_types_exports.Ed25519Signature(sender.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array());\n    const senderAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(sender.signingKey.publicKey), senderSignature);\n    const receiverSignature = new aptos_types_exports.Ed25519Signature(receiver.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array());\n    const receiverAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(receiver.signingKey.publicKey), receiverSignature);\n    const multiAgentAuthenticator = new aptos_types_exports.TransactionAuthenticatorMultiAgent(senderAuthenticator, [aptos_types_exports.AccountAddress.fromHex(receiver.address())], [receiverAuthenticator]);\n    const bcsTxn = bcsToBytes(new aptos_types_exports.SignedTransaction(rawTxn, multiAgentAuthenticator));\n    const transactionRes = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return transactionRes.hash;\n  }\n  async optInTokenTransfer(sender, optIn, extraArgs) {\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token::opt_in_direct_transfer\", [], [optIn]);\n    return this.aptosClient.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n  async transferWithOptIn(sender, creator, collectionName, tokenName, propertyVersion, receiver, amount, extraArgs) {\n    const payload = new TransactionPayloadScript(new Script(new HexString(TOKEN_TRANSFER_OPT_IN).toUint8Array(), [], [new TransactionArgumentAddress(aptos_types_exports.AccountAddress.fromHex(creator)), new TransactionArgumentU8Vector(new TextEncoder().encode(collectionName)), new TransactionArgumentU8Vector(new TextEncoder().encode(tokenName)), new TransactionArgumentU64(BigInt(propertyVersion)), new TransactionArgumentAddress(aptos_types_exports.AccountAddress.fromHex(receiver)), new TransactionArgumentU64(BigInt(amount))]));\n    return this.aptosClient.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n  async burnByCreator(creator, ownerAddress, collection, name, PropertyVersion, amount, extraArgs) {\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token::burn_by_creator\", [], [ownerAddress, collection, name, PropertyVersion, amount]);\n    return this.aptosClient.generateSignSubmitTransaction(creator, payload, extraArgs);\n  }\n  async burnByOwner(owner, creatorAddress, collection, name, PropertyVersion, amount, extraArgs) {\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token::burn\", [], [creatorAddress, collection, name, PropertyVersion, amount]);\n    return this.aptosClient.generateSignSubmitTransaction(owner, payload, extraArgs);\n  }\n  async mutateTokenProperties(account, tokenOwner, creator, collection_name, tokenName, propertyVersion, amount, keys, values, types, extraArgs) {\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token::mutate_token_properties\", [], [tokenOwner, creator, collection_name, tokenName, propertyVersion, amount, keys, values, types]);\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n  async getCollectionData(creator, collectionName) {\n    const resources = await this.aptosClient.getAccountResources(creator);\n    const accountResource = resources.find(r => r.type === \"0x3::token::Collections\");\n    const {\n      handle\n    } = accountResource.data.collection_data;\n    const getCollectionTableItemRequest = {\n      key_type: \"0x1::string::String\",\n      value_type: \"0x3::token::CollectionData\",\n      key: collectionName\n    };\n    const collectionTable = await this.aptosClient.getTableItem(handle, getCollectionTableItemRequest);\n    return collectionTable;\n  }\n  async getTokenData(creator, collectionName, tokenName) {\n    const creatorHex = creator instanceof HexString ? creator.hex() : creator;\n    const collection = await this.aptosClient.getAccountResource(creatorHex, \"0x3::token::Collections\");\n    const {\n      handle\n    } = collection.data.token_data;\n    const tokenDataId = {\n      creator: creatorHex,\n      collection: collectionName,\n      name: tokenName\n    };\n    const getTokenTableItemRequest = {\n      key_type: \"0x3::token::TokenDataId\",\n      value_type: \"0x3::token::TokenData\",\n      key: tokenDataId\n    };\n    const rawTokenData = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n    return new TokenData(rawTokenData.collection, rawTokenData.description, rawTokenData.name, rawTokenData.maximum, rawTokenData.supply, rawTokenData.uri, rawTokenData.default_properties, rawTokenData.mutability_config);\n  }\n  async getToken(creator, collectionName, tokenName) {\n    let property_version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"0\";\n    const tokenDataId = {\n      creator: creator instanceof HexString ? creator.hex() : creator,\n      collection: collectionName,\n      name: tokenName\n    };\n    return this.getTokenForAccount(creator, {\n      token_data_id: tokenDataId,\n      property_version\n    });\n  }\n  async getTokenForAccount(account, tokenId) {\n    const tokenStore = await this.aptosClient.getAccountResource(account instanceof HexString ? account.hex() : account, \"0x3::token::TokenStore\");\n    const {\n      handle\n    } = tokenStore.data.tokens;\n    const getTokenTableItemRequest = {\n      key_type: \"0x3::token::TokenId\",\n      value_type: \"0x3::token::Token\",\n      key: tokenId\n    };\n    try {\n      const rawToken = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n      return new Token(rawToken.id, rawToken.amount, rawToken.token_properties);\n    } catch (error) {\n      if ((error == null ? void 0 : error.status) === 404) {\n        return {\n          id: tokenId,\n          amount: \"0\",\n          token_properties: new PropertyMap()\n        };\n      }\n      return error;\n    }\n  }\n};\nexport { ApiError2 as ApiError, AptosAccount, AptosClient, bcs_exports as BCS, CoinClient, FailedTransactionError, FaucetClient, HexString, TokenClient, token_types_exports as TokenTypes, TransactionBuilder, TransactionBuilderABI, TransactionBuilderEd25519, TransactionBuilderMultiEd25519, TransactionBuilderRemoteABI, aptos_types_exports as TxnBuilderTypes, TypeTagParser, generated_exports as Types, WaitForTransactionError, derivePath, deserializePropertyMap, deserializeValueBasedOnTypeTag, getAddressFromAccountOrAddress, getPropertyValueRaw };","map":{"version":3,"mappings":"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","names":["nacl","bip39","bytesToHex","sha3_256","sha3Hash","hmac","sha512","hexToBytes","pathRegex","replaceDerive","val","replace","HMAC_KEY","HARDENED_OFFSET","getMasterKeyFromSeed","seed","h","create","I","update","digest","IL","slice","IR","key","chainCode","CKDPriv","index","buffer","ArrayBuffer","DataView","setUint32","indexBytes","Uint8Array","zero","data","isValidPath","path","test","split","map","some","Number","isNaN","derivePath","offset","Error","segments","el","parseInt","reduce","parentKeys","segment","HexString","fromBuffer","fromUint8Array","arr","ensure","hexString","constructor","startsWith","hex","noPrefix","toString","toShortString","trimmed","toUint8Array","from","sleep","timeMs","Promise","resolve","setTimeout","DEFAULT_VERSION_PATH_BASE","fixNodeUrl","nodeUrl","out","endsWith","substring","length","DEFAULT_MAX_GAS_AMOUNT","DEFAULT_TXN_EXP_SEC_FROM_NOW","DEFAULT_TXN_TIMEOUT_SEC","APTOS_COIN","Memoize","args","hashFunction","ttlMs","tags","target","propertyKey","descriptor","value","getNewFunction","get","MemoizeExpiring","clearCacheTagsMap","Map","clear","cleared","Set","tag","maps","mp","has","add","size","originalMethod","propMapName","Symbol","returnedValue","that","hasOwnProperty","Object","defineProperty","configurable","enumerable","writable","myMap","Array","isArray","push","set","hashKey","a","join","apply","timestampKey","isExpired","timestamp","Date","now","paginateWithCursor","apiFunction","accountAddress","limitPerRequest","query","cursor","response","_a","ledgerVersion","__headers","__export","AccountAddress","AccountAuthenticator","AccountAuthenticatorEd25519","AccountAuthenticatorMultiEd25519","ArgumentABI","AuthenticationKey","ChainId","ChangeSet","Ed25519PublicKey","Ed25519Signature","EntryFunction","EntryFunctionABI","Identifier","Module","ModuleId","MultiAgentRawTransaction","MultiEd25519PublicKey","MultiEd25519Signature","RawTransaction","RawTransactionWithData","RotationProofChallenge","Script","ScriptABI","SignedTransaction","StructTag","Transaction","TransactionArgument","TransactionArgumentAddress","TransactionArgumentBool","TransactionArgumentU128","TransactionArgumentU16","TransactionArgumentU256","TransactionArgumentU32","TransactionArgumentU64","TransactionArgumentU8","TransactionArgumentU8Vector","TransactionAuthenticator","TransactionAuthenticatorEd25519","TransactionAuthenticatorMultiAgent","TransactionAuthenticatorMultiEd25519","TransactionPayload","TransactionPayloadEntryFunction","TransactionPayloadScript","TransactionScriptABI","TypeArgumentABI","TypeTag","TypeTagAddress","TypeTagBool","TypeTagSigner","TypeTagStruct","TypeTagU128","TypeTagU16","TypeTagU256","TypeTagU32","TypeTagU64","TypeTagU8","TypeTagVector","UserTransaction","WriteSet","Deserializer","Serializer","bcsSerializeBool","bcsSerializeBytes","bcsSerializeFixedBytes","bcsSerializeStr","bcsSerializeU128","bcsSerializeU16","bcsSerializeU32","bcsSerializeU8","bcsSerializeUint64","bcsToBytes","deserializeVector","serializeVector","serializeVectorWithFunc","MAX_U8_NUMBER","MAX_U16_NUMBER","MAX_U32_NUMBER","MAX_U64_BIG_INT","BigInt","MAX_U128_BIG_INT","MAX_U256_BIG_INT","ensureBufferWillHandleSize","bytes","byteLength","newBuffer","serialize","values","serializeWithFunction","fn","bytesLength","dv","serializeStr","textEncoder","TextEncoder","serializeBytes","encode","serializeU32AsUleb128","serializeFixedBytes","serializeBool","byteValue","serializeU8","serializeU16","prototype","setUint16","serializeU32","serializeU64","low","high","serializeU128","serializeU256","valueArray","getBytes","__decorateClass","checkNumberRange","minValue","maxValue","message","childFunction","deco","valueBigInt","read","deserializeStr","deserializeBytes","textDecoder","TextDecoder","decode","len","deserializeUleb128AsU32","deserializeFixedBytes","deserializeBool","bool","deserializeU8","getUint8","deserializeU16","getUint16","deserializeU32","getUint32","deserializeU64","deserializeU128","deserializeU256","shift","byte","serializer","forEach","item","func","f","call","deserializer","cls","list","i","deserialize","_AccountAddress","address","LENGTH","fromHex","addr","addressBytes","res","isValid","toHexString","CORE_CODE_ADDRESS","_Ed25519PublicKey","toBytes","_Ed25519Signature","MAX_SIGNATURES_SUPPORTED","public_keys","threshold","k","keys","begin","subarray","_MultiEd25519Signature","signatures","bitmap","BITMAP_LEN","createBitmap","bits","firstBitInByte","dupCheckSet","bit","byteOffset","Math","floor","sigs","load","public_key","signature","sender","secondary_signer_addresses","secondary_signers","_deserializer","isStringTypeTag","module_name","name","type_args","fromString","structTag","includes","parts","moduleName","typeArgs","sequence_number","payload","max_gas_amount","gas_unit_price","expiration_timestamp_secs","chain_id","code","ty_args","function_name","natural","module","fromStr","natual","moduleId","raw_txn","authenticator","rawTxn","secondarySignerAddresses","getHashSalt","hash","type_tag","typeTag","doc","tyArgs","_AuthenticationKey","fromMultiEd25519PublicKey","publicKey","pubKeyBytes","MULTI_ED25519_SCHEME","fromEd25519PublicKey","ED25519_SCHEME","derivedAddress","DERIVE_RESOURCE_ACCOUNT_SCHEME","structName","sequenceNumber","originator","currentAuthKey","newPublicKey","_AptosAccount","fromAptosAccountObject","obj","privateKeyHex","fromDerivePath","mnemonics","normalizeMnemonics","trim","part","toLowerCase","privateKeyBytes","signingKey","sign","keyPair","fromSeed","authKey","pubKey","getResourceAccountAddress","sourceAddress","source","signBuffer","secretKey","signHexString","toSign","toPrivateKeyObject","publicKeyHex","AptosAccount","getAddressFromAccountOrAddress","accountOrAddress","$AccountData","$AccountSignature","$AccountSignature_Ed25519Signature","$AccountSignature_MultiEd25519Signature","$Address","$AptosError","$AptosErrorCode","$Block","$BlockMetadataTransaction","$DecodedTableData","$DeleteModule","$DeleteResource","$DeleteTableItem","$DeletedTableData","$DirectWriteSet","$Ed25519Signature","$EncodeSubmissionRequest","$EntryFunctionId","$EntryFunctionPayload","$Event","$EventGuid","$GasEstimation","$GenesisPayload","$GenesisPayload_WriteSetPayload","$GenesisTransaction","$HashValue","$HealthCheckSuccess","$HexEncodedBytes","$IdentifierWrapper","$IndexResponse","$ModuleBundlePayload","$MoveAbility","$MoveFunction","$MoveFunctionGenericTypeParam","$MoveFunctionVisibility","$MoveModule","$MoveModuleBytecode","$MoveModuleId","$MoveResource","$MoveScriptBytecode","$MoveStruct","$MoveStructField","$MoveStructGenericTypeParam","$MoveStructTag","$MoveStructValue","$MoveType","$MoveValue","$MultiAgentSignature","$MultiEd25519Signature","$PendingTransaction","$RawTableItemRequest","$RoleType","$ScriptPayload","$ScriptWriteSet","$StateCheckpointTransaction","$StateKeyWrapper","$SubmitTransactionRequest","$TableItemRequest","$Transaction","$TransactionPayload","$TransactionPayload_EntryFunctionPayload","$TransactionPayload_ModuleBundlePayload","$TransactionPayload_ScriptPayload","$TransactionSignature","$TransactionSignature_Ed25519Signature","$TransactionSignature_MultiAgentSignature","$TransactionSignature_MultiEd25519Signature","$Transaction_BlockMetadataTransaction","$Transaction_GenesisTransaction","$Transaction_PendingTransaction","$Transaction_StateCheckpointTransaction","$Transaction_UserTransaction","$TransactionsBatchSingleSubmissionFailure","$TransactionsBatchSubmissionResult","$U128","$U256","$U64","$UserTransaction","$VersionedEvent","$ViewRequest","$WriteModule","$WriteResource","$WriteSet","$WriteSetChange","$WriteSetChange_DeleteModule","$WriteSetChange_DeleteResource","$WriteSetChange_DeleteTableItem","$WriteSetChange_WriteModule","$WriteSetChange_WriteResource","$WriteSetChange_WriteTableItem","$WriteSetPayload","$WriteSet_DirectWriteSet","$WriteSet_ScriptWriteSet","$WriteTableItem","AccountsService","ApiError","AptosErrorCode","AptosGeneratedClient","BaseHttpRequest","BlocksService","CancelError","CancelablePromise","EventsService","GeneralService","MoveFunctionVisibility","OpenAPI","RoleType","TablesService","TransactionsService","ViewService","config","axios","FormData","request","url","status","statusText","body","isCancelled","executor","_isResolved","_isRejected","_isCancelled","_cancelHandlers","_promise","reject","_resolve","_reject","onResolve","onReject","reason","onCancel","cancelHandler","then","onFulfilled","onRejected","catch","finally","onFinally","cancel","error","console","warn","toStringTag","CookieJar","jar","setCookie","cookieStr","origin","cookie","parse","filter","c","getCookies","expires","str","nameLow","charAt","sameSite","secure","interceptors","use","headers","URL","cookies","isDefined","isString","isStringWithValue","isBlob","type","stream","arrayBuffer","isFormData","isSuccess","base64","btoa","getQueryString","params","qs","append","encodeURIComponent","String","process","v","entries","getUrl","options","encoder","ENCODE_PATH","encodeURI","VERSION","group","BASE","getFormData","formData","JSON","stringify","_","resolver","getHeaders","token","TOKEN","username","USERNAME","password","PASSWORD","additionalHeaders","HEADERS","formHeaders","Accept","credentials","mediaType","getRequestBody","sendRequest","CancelToken","requestConfig","method","withCredentials","WITH_CREDENTIALS","cancelToken","isBCS","responseType","axiosError","getResponseHeader","responseHeader","content","getResponseBody","catchErrorCodes","result","errors","ok","responseBody","AxiosHttpRequest","httpRequest","getAccount","getAccountResources","start","limit","getAccountModules","getAccountResource","resourceType","getAccountModule","getBlockByHeight","blockHeight","withTransactions","getBlockByVersion","version","getEventsByCreationNumber","creationNumber","getEventsByEventHandle","eventHandle","fieldName","spec","healthy","durationSecs","getLedgerInfo","getTableItem","tableHandle","requestBody","getRawTableItem","getTransactions","submitTransaction","getTransactionByHash","txnHash","getTransactionByVersion","txnVersion","getAccountTransactions","submitBatchTransactions","simulateTransaction","estimateMaxGasAmount","estimateGasUnitPrice","estimatePrioritizedGasUnitPrice","encodeSubmission","estimateGasPrice","view","HttpRequest","_b","_c","CREDENTIALS","_d","accounts","blocks","events","general","tables","transactions","description","properties","isRequired","authentication_key","contains","format","error_code","vm_error_code","block_height","block_hash","block_timestamp","first_version","last_version","state_change_hash","event_root_hash","state_checkpoint_hash","gas_used","success","vm_status","accumulator_root_hash","changes","id","epoch","round","previous_block_votes_bitvec","proposer","failed_proposer_indices","key_type","value_type","state_key_hash","resource","handle","function","type_arguments","arguments","guid","creation_number","account_address","deprioritized_gas_estimate","gas_estimate","prioritized_gas_estimate","ledger_version","oldest_ledger_version","ledger_timestamp","node_role","oldest_block_height","git_hash","modules","visibility","is_entry","generic_type_params","return","constraints","friends","exposed_functions","structs","bytecode","abi","is_native","abilities","fields","pattern","execute_as","script","transaction_index","transaction_failures","write_set","stringStructTag","assertType","types","bail","isWhiteSpace","match","isValidAlphabetic","nextToken","tagStr","pos","char","tokenize","tokens","TypeTagParser","consume","targetToken","parseCommaList","endToken","allowTraillingComma","parseTypeTag","tokenTy","tokenVal","moduleTokenTy","nameTokenTy","tyTags","ensureBoolean","ensureNumber","ensureBigInt","serializeArg","argVal","argType","arg","argToTransactionArgument","RAW_TRANSACTION_SALT","RAW_TRANSACTION_WITH_DATA_SALT","TransactionBuilder","signingFunction","rawTxnBuilder","build","ty_tags","getSigningMessage","prefix","mergedArray","TransactionBuilderEd25519","rawToSigned","signingMessage","TransactionBuilderMultiEd25519","TransactionBuilderABI","abis","builderConfig","abiMap","scriptABI","funcABI","maxGasAmount","expSecFromNow","toBCSArgs","abiArgs","toTransactionArguments","setSequenceNumber","seqNumber","buildTransactionPayload","typeTags","ty_arg","bcsArgs","scriptArgs","gasUnitPrice","chainId","senderAccount","expTimestampSec","TransactionBuilderRemoteABI","aptosClient","fetchABI","flatMap","ef","fullName","normlize","s","funcNameParts","funcAbi","originalArgs","param","typeArgABIs","entryFunctionABI","rest","senderAddress","all","getChainId","builderABI","_AptosClient","doNotFixNodeUrl","conf","client","bind","generateBCSTransaction","accountFrom","txnBuilder","sigHexStr","aptos_types_exports","generateBCSSimulation","_signingMessage","invalidSigBytes","generateTransaction","builder","signTransaction","rawTransaction","eventHandleStruct","signedTxn","submitSignedBCSTransaction","accountOrPubkey","submitBCSSimulation","bcsBody","queryParams","estimate_gas_unit_price","estimate_max_gas_amount","estimate_prioritized_gas_unit_price","transactionPending","e","waitForTransactionWithResult","extraArgs","timeoutSecs","checkSuccess","isPending","count","lastTxn","isApiError","isRequestError","WaitForTransactionError","FailedTransactionError","waitForTransaction","tableItem","generateRawTransaction","gasEstimate","expireTimestamp","generateSignSubmitTransaction","bcsTxn","pendingTransaction","publishPackage","packageMetadata","codeSerializer","generateSignSubmitWaitForTransaction","forAccount","resources","accountResource","find","r","balance","coin","rotateAuthKeyEd25519","toPrivateKeyBytes","helperAccount","challenge","challengeHex","proofSignedByCurrentPrivateKey","proofSignedByNewPrivateKey","lookupOriginalAddress","addressOrAuthKey","address_map","origAddress","clearCache","AptosClient","parseApiError","errorCode","vmErrorCode","lastSubmittedTransaction","transaction","wrapper","TOKEN_TRANSFER_OPT_IN","TOKEN_ABIS","COIN_ABIS","CoinClient","transactionBuilder","transfer","to","amount","coinTypeToTransfer","coinType","createReceiverIfMissing","toAddress","checkBalance","account","FaucetClient","faucetUrl","faucetRequester","fundAccount","tnxHashes","promises","tnxHash","PropertyValue","PropertyMap","setProperty","getPropertyType","typ","getPropertyValueRaw","results","deserializePropertyMap","rawPropertyMap","pm","prop","newValue","deserializeValueBasedOnTypeTag","pv","de","Token","TokenData","collection","maximum","supply","uri","default_properties","mutability_config","token_properties","TokenClient","createCollection","maxAmount","createToken","collectionName","max","royalty_payee_address","royalty_points_denominator","royalty_points_numerator","property_keys","property_values","property_types","createTokenWithMutabilityConfig","offerToken","receiver","creator","property_version","claimToken","cancelTokenOffer","directTransferToken","propertyVersion","multiAgentTxn","senderSignature","senderAuthenticator","receiverSignature","receiverAuthenticator","multiAgentAuthenticator","transactionRes","optInTokenTransfer","optIn","transferWithOptIn","tokenName","burnByCreator","ownerAddress","PropertyVersion","burnByOwner","owner","creatorAddress","mutateTokenProperties","tokenOwner","collection_name","getCollectionData","collection_data","getCollectionTableItemRequest","collectionTable","getTokenData","creatorHex","token_data","tokenDataId","getTokenTableItemRequest","rawTokenData","getToken","getTokenForAccount","token_data_id","tokenId","tokenStore","rawToken"],"sources":["/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_account.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/utils/hd-key.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/hex_string.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/utils/misc.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/utils/memoize-decorator.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/utils/pagination_helpers.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/index.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/bcs/index.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/bcs/consts.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/bcs/serializer.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/bcs/deserializer.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/bcs/helper.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/transaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/account_address.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/ed25519.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/multi_ed25519.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/authenticator.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/identifier.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/type_tag.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/abi.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/authentication_key.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_types/rotation_proof_challenge.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/index.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/core/BaseHttpRequest.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/core/request.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/core/ApiError.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/core/CancelablePromise.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/core/AxiosHttpRequest.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/services/AccountsService.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/services/BlocksService.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/services/EventsService.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/services/GeneralService.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/services/TablesService.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/services/TransactionsService.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/services/ViewService.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/AptosGeneratedClient.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/core/OpenAPI.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/models/AptosErrorCode.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/models/MoveFunctionVisibility.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/models/RoleType.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$AccountData.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$AccountSignature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$AccountSignature_Ed25519Signature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$AccountSignature_MultiEd25519Signature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Address.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$AptosError.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$AptosErrorCode.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Block.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$BlockMetadataTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$DecodedTableData.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$DeletedTableData.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$DeleteModule.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$DeleteResource.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$DeleteTableItem.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$DirectWriteSet.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Ed25519Signature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$EncodeSubmissionRequest.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$EntryFunctionId.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$EntryFunctionPayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Event.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$EventGuid.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$GasEstimation.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$GenesisPayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$GenesisPayload_WriteSetPayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$GenesisTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$HashValue.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$HealthCheckSuccess.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$HexEncodedBytes.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$IdentifierWrapper.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$IndexResponse.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$ModuleBundlePayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveAbility.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveFunction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveFunctionGenericTypeParam.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveFunctionVisibility.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveModule.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveModuleBytecode.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveModuleId.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveResource.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveScriptBytecode.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveStruct.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveStructField.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveStructGenericTypeParam.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveStructTag.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveStructValue.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveType.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MoveValue.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MultiAgentSignature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$MultiEd25519Signature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$PendingTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$RawTableItemRequest.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$RoleType.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$ScriptPayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$ScriptWriteSet.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$StateCheckpointTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$StateKeyWrapper.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$SubmitTransactionRequest.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TableItemRequest.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Transaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Transaction_BlockMetadataTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Transaction_GenesisTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Transaction_PendingTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Transaction_StateCheckpointTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$Transaction_UserTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionPayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionPayload_EntryFunctionPayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionPayload_ModuleBundlePayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionPayload_ScriptPayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionsBatchSingleSubmissionFailure.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionsBatchSubmissionResult.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionSignature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionSignature_Ed25519Signature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionSignature_MultiAgentSignature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$TransactionSignature_MultiEd25519Signature.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$U128.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$U256.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$U64.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$UserTransaction.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$VersionedEvent.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$ViewRequest.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteModule.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteResource.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSet.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSet_DirectWriteSet.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSet_ScriptWriteSet.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSetChange.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSetChange_DeleteModule.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSetChange_DeleteResource.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSetChange_DeleteTableItem.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSetChange_WriteModule.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSetChange_WriteResource.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSetChange_WriteTableItem.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteSetPayload.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/generated/schemas/$WriteTableItem.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/transaction_builder/builder.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/transaction_builder/builder_utils.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/aptos_client.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/abis.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/coin_client.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/faucet_client.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/utils/property_map_serde.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/token_types.ts","/home/akhil/aptos-stuff/vibs/aptos-todo/client/node_modules/aptos/src/token_client.ts"],"sourcesContent":["// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport nacl from \"tweetnacl\";\nimport * as bip39 from \"@scure/bip39\";\nimport { bytesToHex } from \"@noble/hashes/utils\";\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { derivePath } from \"./utils/hd-key\";\nimport { HexString, MaybeHexString } from \"./hex_string\";\nimport * as Gen from \"./generated/index\";\nimport { Memoize } from \"./utils\";\nimport { AccountAddress, AuthenticationKey, Ed25519PublicKey } from \"./aptos_types\";\nimport { bcsToBytes } from \"./bcs\";\n\nexport interface AptosAccountObject {\n  address?: Gen.HexEncodedBytes;\n  publicKeyHex?: Gen.HexEncodedBytes;\n  privateKeyHex: Gen.HexEncodedBytes;\n}\n\n/**\n * Class for creating and managing Aptos account\n */\nexport class AptosAccount {\n  /**\n   * A private key and public key, associated with the given account\n   */\n  readonly signingKey: nacl.SignKeyPair;\n\n  /**\n   * Address associated with the given account\n   */\n  private readonly accountAddress: HexString;\n\n  static fromAptosAccountObject(obj: AptosAccountObject): AptosAccount {\n    return new AptosAccount(HexString.ensure(obj.privateKeyHex).toUint8Array(), obj.address);\n  }\n\n  /**\n   * Test derive path\n   */\n  static isValidPath = (path: string): boolean => {\n    if (!/^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'+$/.test(path)) {\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Creates new account with bip44 path and mnemonics,\n   * @param path. (e.g. m/44'/637'/0'/0'/0')\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param mnemonics.\n   * @returns AptosAccount\n   */\n  static fromDerivePath(path: string, mnemonics: string): AptosAccount {\n    if (!AptosAccount.isValidPath(path)) {\n      throw new Error(\"Invalid derivation path\");\n    }\n\n    const normalizeMnemonics = mnemonics\n      .trim()\n      .split(/\\s+/)\n      .map((part) => part.toLowerCase())\n      .join(\" \");\n\n    const { key } = derivePath(path, bytesToHex(bip39.mnemonicToSeedSync(normalizeMnemonics)));\n\n    return new AptosAccount(key);\n  }\n\n  /**\n   * Creates new account instance. Constructor allows passing in an address,\n   * to handle account key rotation, where auth_key != public_key\n   * @param privateKeyBytes  Private key from which account key pair will be generated.\n   * If not specified, new key pair is going to be created.\n   * @param address Account address (e.g. 0xe8012714cd17606cee7188a2a365eef3fe760be598750678c8c5954eb548a591).\n   * If not specified, a new one will be generated from public key\n   */\n  constructor(privateKeyBytes?: Uint8Array | undefined, address?: MaybeHexString) {\n    if (privateKeyBytes) {\n      this.signingKey = nacl.sign.keyPair.fromSeed(privateKeyBytes.slice(0, 32));\n    } else {\n      this.signingKey = nacl.sign.keyPair();\n    }\n    this.accountAddress = HexString.ensure(address || this.authKey().hex());\n  }\n\n  /**\n   * This is the key by which Aptos account is referenced.\n   * It is the 32-byte of the SHA-3 256 cryptographic hash\n   * of the public key(s) concatenated with a signature scheme identifier byte\n   * @returns Address associated with the given account\n   */\n  address(): HexString {\n    return this.accountAddress;\n  }\n\n  /**\n   * This key enables account owners to rotate their private key(s)\n   * associated with the account without changing the address that hosts their account.\n   * See here for more info: {@link https://aptos.dev/concepts/accounts#single-signer-authentication}\n   * @returns Authentication key for the associated account\n   */\n  @Memoize()\n  authKey(): HexString {\n    const pubKey = new Ed25519PublicKey(this.signingKey.publicKey);\n    const authKey = AuthenticationKey.fromEd25519PublicKey(pubKey);\n    return authKey.derivedAddress();\n  }\n\n  /**\n   * Takes source address and seeds and returns the resource account address\n   * @param sourceAddress Address used to derive the resource account\n   * @param seed The seed bytes\n   * @returns The resource account address\n   */\n\n  static getResourceAccountAddress(sourceAddress: MaybeHexString, seed: Uint8Array): HexString {\n    const source = bcsToBytes(AccountAddress.fromHex(sourceAddress));\n\n    const bytes = new Uint8Array([...source, ...seed, AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME]);\n\n    const hash = sha3Hash.create();\n    hash.update(bytes);\n\n    return HexString.fromUint8Array(hash.digest());\n  }\n\n  /**\n   * This key is generated with Ed25519 scheme.\n   * Public key is used to check a signature of transaction, signed by given account\n   * @returns The public key for the associated account\n   */\n  pubKey(): HexString {\n    return HexString.fromUint8Array(this.signingKey.publicKey);\n  }\n\n  /**\n   * Signs specified `buffer` with account's private key\n   * @param buffer A buffer to sign\n   * @returns A signature HexString\n   */\n  signBuffer(buffer: Uint8Array): HexString {\n    const signature = nacl.sign(buffer, this.signingKey.secretKey);\n    return HexString.fromUint8Array(signature.slice(0, 64));\n  }\n\n  /**\n   * Signs specified `hexString` with account's private key\n   * @param hexString A regular string or HexString to sign\n   * @returns A signature HexString\n   */\n  signHexString(hexString: MaybeHexString): HexString {\n    const toSign = HexString.ensure(hexString).toUint8Array();\n    return this.signBuffer(toSign);\n  }\n\n  /**\n   * Derives account address, public key and private key\n   * @returns AptosAccountObject instance.\n   * @example An example of the returned AptosAccountObject object\n   * ```\n   * {\n   *    address: \"0xe8012714cd17606cee7188a2a365eef3fe760be598750678c8c5954eb548a591\",\n   *    publicKeyHex: \"0xf56d8524faf79fbc0f48c13aeed3b0ce5dd376b4db93b8130a107c0a5e04ba04\",\n   *    privateKeyHex: `0x009c9f7c992a06cfafe916f125d8adb7a395fca243e264a8e56a4b3e6accf940\n   *      d2b11e9ece3049ce60e3c7b4a1c58aebfa9298e29a30a58a67f1998646135204`\n   * }\n   * ```\n   */\n  toPrivateKeyObject(): AptosAccountObject {\n    return {\n      address: this.address().hex(),\n      publicKeyHex: this.pubKey().hex(),\n      privateKeyHex: HexString.fromUint8Array(this.signingKey.secretKey.slice(0, 32)).hex(),\n    };\n  }\n}\n\n// Returns an account address as a HexString given either an AptosAccount or a MaybeHexString.\nexport function getAddressFromAccountOrAddress(accountOrAddress: AptosAccount | MaybeHexString): HexString {\n  return accountOrAddress instanceof AptosAccount ? accountOrAddress.address() : HexString.ensure(accountOrAddress);\n}\n","import nacl from \"tweetnacl\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { hexToBytes } from \"@noble/hashes/utils\";\n\ntype Hex = string;\ntype Path = string;\n\ntype Keys = {\n  key: Uint8Array;\n  chainCode: Uint8Array;\n};\n\nconst pathRegex = /^m(\\/[0-9]+')+$/;\n\nconst replaceDerive = (val: string): string => val.replace(\"'\", \"\");\n\nconst HMAC_KEY = \"ed25519 seed\";\nconst HARDENED_OFFSET = 0x80000000;\n\nexport const getMasterKeyFromSeed = (seed: Hex): Keys => {\n  const h = hmac.create(sha512, HMAC_KEY);\n  const I = h.update(hexToBytes(seed)).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR,\n  };\n};\n\nexport const CKDPriv = ({ key, chainCode }: Keys, index: number): Keys => {\n  const buffer = new ArrayBuffer(4);\n  new DataView(buffer).setUint32(0, index);\n  const indexBytes = new Uint8Array(buffer);\n  const zero = new Uint8Array([0]);\n  const data = new Uint8Array([...zero, ...key, ...indexBytes]);\n\n  const I = hmac.create(sha512, chainCode).update(data).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR,\n  };\n};\n\nexport const getPublicKey = (privateKey: Uint8Array, withZeroByte = true): Uint8Array => {\n  const keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n  const signPk = keyPair.secretKey.subarray(32);\n  const zero = new Uint8Array([0]);\n  return withZeroByte ? new Uint8Array([...zero, ...signPk]) : signPk;\n};\n\nexport const isValidPath = (path: string): boolean => {\n  if (!pathRegex.test(path)) {\n    return false;\n  }\n  return !path\n    .split(\"/\")\n    .slice(1)\n    .map(replaceDerive)\n    .some(Number.isNaN as any);\n};\n\nexport const derivePath = (path: Path, seed: Hex, offset = HARDENED_OFFSET): Keys => {\n  if (!isValidPath(path)) {\n    throw new Error(\"Invalid derivation path\");\n  }\n\n  const { key, chainCode } = getMasterKeyFromSeed(seed);\n  const segments = path\n    .split(\"/\")\n    .slice(1)\n    .map(replaceDerive)\n    .map((el) => parseInt(el, 10));\n\n  return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), { key, chainCode });\n};\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { HexEncodedBytes } from \"./generated\";\n\n// eslint-disable-next-line no-use-before-define\nexport type MaybeHexString = HexString | string | HexEncodedBytes;\n\n/**\n * A util class for working with hex strings.\n * Hex strings are strings that are prefixed with `0x`\n */\nexport class HexString {\n  /// We want to make sure this hexString has the `0x` hex prefix\n  private readonly hexString: string;\n\n  /**\n   * Creates new hex string from Buffer\n   * @param buffer A buffer to convert\n   * @returns New HexString\n   */\n  static fromBuffer(buffer: Uint8Array): HexString {\n    return HexString.fromUint8Array(buffer);\n  }\n\n  /**\n   * Creates new hex string from Uint8Array\n   * @param arr Uint8Array to convert\n   * @returns New HexString\n   */\n  static fromUint8Array(arr: Uint8Array): HexString {\n    return new HexString(bytesToHex(arr));\n  }\n\n  /**\n   * Ensures `hexString` is instance of `HexString` class\n   * @param hexString String to check\n   * @returns New HexString if `hexString` is regular string or `hexString` if it is HexString instance\n   * @example\n   * ```\n   *  const regularString = \"string\";\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  HexString.ensure(regularString); // \"0xstring\"\n   *  HexString.ensure(hexString); // \"0xstring\"\n   * ```\n   */\n  static ensure(hexString: MaybeHexString): HexString {\n    if (typeof hexString === \"string\") {\n      return new HexString(hexString);\n    }\n    return hexString;\n  }\n\n  /**\n   * Creates new HexString instance from regular string. If specified string already starts with \"0x\" prefix,\n   * it will not add another one\n   * @param hexString String to convert\n   * @example\n   * ```\n   *  const string = \"string\";\n   *  new HexString(string); // \"0xstring\"\n   * ```\n   */\n  constructor(hexString: string | HexEncodedBytes) {\n    if (hexString.startsWith(\"0x\")) {\n      this.hexString = hexString;\n    } else {\n      this.hexString = `0x${hexString}`;\n    }\n  }\n\n  /**\n   * Getter for inner hexString\n   * @returns Inner hex string\n   */\n  hex(): string {\n    return this.hexString;\n  }\n\n  /**\n   * Getter for inner hexString without prefix\n   * @returns Inner hex string without prefix\n   * @example\n   * ```\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  hexString.noPrefix(); // \"string\"\n   * ```\n   */\n  noPrefix(): string {\n    return this.hexString.slice(2);\n  }\n\n  /**\n   * Overrides default `toString` method\n   * @returns Inner hex string\n   */\n  toString(): string {\n    return this.hex();\n  }\n\n  /**\n   * Trimmes extra zeroes in the begining of a string\n   * @returns Inner hexString without leading zeroes\n   * @example\n   * ```\n   *  new HexString(\"0x000000string\").toShortString(); // result = \"0xstring\"\n   * ```\n   */\n  toShortString(): string {\n    const trimmed = this.hexString.replace(/^0x0*/, \"\");\n    return `0x${trimmed}`;\n  }\n\n  /**\n   * Converts hex string to a Uint8Array\n   * @returns Uint8Array from inner hexString without prefix\n   */\n  toUint8Array(): Uint8Array {\n    return Uint8Array.from(hexToBytes(this.noPrefix()));\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport type Nullable<T> = { [P in keyof T]: T[P] | null };\n\nexport type AnyObject = { [key: string]: any };\n\nexport async function sleep(timeMs: number): Promise<null> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeMs);\n  });\n}\n\nexport const DEFAULT_VERSION_PATH_BASE = \"/v1\";\n\nexport function fixNodeUrl(nodeUrl: string): string {\n  let out = `${nodeUrl}`;\n  if (out.endsWith(\"/\")) {\n    out = out.substring(0, out.length - 1);\n  }\n  if (!out.endsWith(DEFAULT_VERSION_PATH_BASE)) {\n    out = `${out}${DEFAULT_VERSION_PATH_BASE}`;\n  }\n  return out;\n}\n\nexport const DEFAULT_MAX_GAS_AMOUNT = 200000;\n// Transaction expire timestamp\nexport const DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\n// How long does SDK wait for txhn to finish\nexport const DEFAULT_TXN_TIMEOUT_SEC = 20;\nexport const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n","/**\n * Credits to https://github.com/darrylhodgins/typescript-memoize\n */\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-restricted-syntax */\n\ninterface MemoizeArgs {\n  // ttl in milliseconds for cached items. After `ttlMs`, cached items are evicted automatically. If no `ttlMs`\n  // is provided, cached items won't get auto-evicted.\n  ttlMs?: number;\n  // produces the cache key based on `args`.\n  hashFunction?: boolean | ((...args: any[]) => any);\n  // cached items can be taged with `tags`. `tags` can be used to evict cached items\n  tags?: string[];\n}\n\nexport function Memoize(args?: MemoizeArgs | MemoizeArgs[\"hashFunction\"]) {\n  let hashFunction: MemoizeArgs[\"hashFunction\"];\n  let ttlMs: MemoizeArgs[\"ttlMs\"];\n  let tags: MemoizeArgs[\"tags\"];\n\n  if (typeof args === \"object\") {\n    hashFunction = args.hashFunction;\n    ttlMs = args.ttlMs;\n    tags = args.tags;\n  } else {\n    hashFunction = args;\n  }\n\n  return (target: Object, propertyKey: string, descriptor: TypedPropertyDescriptor<any>) => {\n    if (descriptor.value != null) {\n      descriptor.value = getNewFunction(descriptor.value, hashFunction, ttlMs, tags);\n    } else if (descriptor.get != null) {\n      descriptor.get = getNewFunction(descriptor.get, hashFunction, ttlMs, tags);\n    } else {\n      throw new Error(\"Only put a Memoize() decorator on a method or get accessor.\");\n    }\n  };\n}\n\nexport function MemoizeExpiring(ttlMs: number, hashFunction?: MemoizeArgs[\"hashFunction\"]) {\n  return Memoize({\n    ttlMs,\n    hashFunction,\n  });\n}\n\nconst clearCacheTagsMap: Map<string, Map<any, any>[]> = new Map();\n\nexport function clear(tags: string[]): number {\n  const cleared: Set<Map<any, any>> = new Set();\n  for (const tag of tags) {\n    const maps = clearCacheTagsMap.get(tag);\n    if (maps) {\n      for (const mp of maps) {\n        if (!cleared.has(mp)) {\n          mp.clear();\n          cleared.add(mp);\n        }\n      }\n    }\n  }\n  return cleared.size;\n}\n\nfunction getNewFunction(\n  originalMethod: () => void,\n  hashFunction?: MemoizeArgs[\"hashFunction\"],\n  ttlMs: number = 0,\n  tags?: MemoizeArgs[\"tags\"],\n) {\n  const propMapName = Symbol(\"__memoized_map__\");\n\n  // The function returned here gets called instead of originalMethod.\n  // eslint-disable-next-line func-names\n  return function (...args: any[]) {\n    let returnedValue: any;\n\n    // @ts-ignore\n    const that: any = this;\n\n    // Get or create map\n    // eslint-disable-next-line no-prototype-builtins\n    if (!that.hasOwnProperty(propMapName)) {\n      Object.defineProperty(that, propMapName, {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: new Map<any, any>(),\n      });\n    }\n    const myMap: Map<any, any> = that[propMapName];\n\n    if (Array.isArray(tags)) {\n      for (const tag of tags) {\n        if (clearCacheTagsMap.has(tag)) {\n          clearCacheTagsMap.get(tag)!.push(myMap);\n        } else {\n          clearCacheTagsMap.set(tag, [myMap]);\n        }\n      }\n    }\n\n    if (hashFunction || args.length > 0 || ttlMs > 0) {\n      let hashKey: any;\n\n      // If true is passed as first parameter, will automatically use every argument, passed to string\n      if (hashFunction === true) {\n        hashKey = args.map((a) => a.toString()).join(\"!\");\n      } else if (hashFunction) {\n        hashKey = hashFunction.apply(that, args);\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        hashKey = args[0];\n      }\n\n      const timestampKey = `${hashKey}__timestamp`;\n      let isExpired: boolean = false;\n      if (ttlMs > 0) {\n        if (!myMap.has(timestampKey)) {\n          // \"Expired\" since it was never called before\n          isExpired = true;\n        } else {\n          const timestamp = myMap.get(timestampKey);\n          isExpired = Date.now() - timestamp > ttlMs;\n        }\n      }\n\n      if (myMap.has(hashKey) && !isExpired) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args as any);\n        myMap.set(hashKey, returnedValue);\n        if (ttlMs > 0) {\n          myMap.set(timestampKey, Date.now());\n        }\n      }\n    } else {\n      const hashKey = that;\n      if (myMap.has(hashKey)) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args as any);\n        myMap.set(hashKey, returnedValue);\n      }\n    }\n\n    return returnedValue;\n  };\n}\n","import { AnyNumber } from \"../bcs\";\nimport { HexString, MaybeHexString } from \"../hex_string\";\n\n/// This function is a helper for paginating using a function wrapping an API\nexport async function paginateWithCursor<T>(\n  apiFunction: (\n    address: string,\n    ledgerVersion?: string | undefined,\n    start?: string | undefined,\n    limit?: number | undefined,\n  ) => Promise<T[]>,\n  accountAddress: MaybeHexString,\n  limitPerRequest: number,\n  query?: { ledgerVersion?: AnyNumber },\n): Promise<T[]> {\n  const out = [];\n  let cursor: string | undefined;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await apiFunction(\n      HexString.ensure(accountAddress).hex(),\n      query?.ledgerVersion?.toString(),\n      cursor,\n      limitPerRequest,\n    );\n    // Response is the main response, i.e. the T[]. Attached to that are the headers as `__headers`.\n    // eslint-disable-next-line no-underscore-dangle\n    cursor = (response as any).__headers[\"x-aptos-cursor\"];\n    // Now that we have the cursor (if any), we remove the headers before\n    // adding these to the output of this function.\n    // eslint-disable-next-line no-underscore-dangle\n    delete (response as any).__headers;\n    out.push(...response);\n    if (cursor === null || cursor === undefined) {\n      break;\n    }\n  }\n  return out;\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from \"./abi\";\nexport * from \"./account_address\";\nexport * from \"./authenticator\";\nexport * from \"./transaction\";\nexport * from \"./type_tag\";\nexport * from \"./identifier\";\nexport * from \"./ed25519\";\nexport * from \"./multi_ed25519\";\nexport * from \"./authentication_key\";\nexport * from \"./rotation_proof_challenge\";\n\nexport type SigningMessage = Uint8Array;\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from \"./types\";\nexport * from \"./serializer\";\nexport * from \"./deserializer\";\nexport * from \"./helper\";\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Uint128, Uint16, Uint32, Uint64, Uint8, Uint256 } from \"./types\";\n\n// Upper bound values for uint8, uint16, uint64 and uint128\nexport const MAX_U8_NUMBER: Uint8 = 2 ** 8 - 1;\nexport const MAX_U16_NUMBER: Uint16 = 2 ** 16 - 1;\nexport const MAX_U32_NUMBER: Uint32 = 2 ** 32 - 1;\nexport const MAX_U64_BIG_INT: Uint64 = BigInt(2 ** 64) - BigInt(1);\nexport const MAX_U128_BIG_INT: Uint128 = BigInt(2 ** 128) - BigInt(1);\nexport const MAX_U256_BIG_INT: Uint256 = BigInt(2 ** 256) - BigInt(1);\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport {\n  MAX_U128_BIG_INT,\n  MAX_U16_NUMBER,\n  MAX_U32_NUMBER,\n  MAX_U64_BIG_INT,\n  MAX_U8_NUMBER,\n  MAX_U256_BIG_INT,\n} from \"./consts\";\nimport { AnyNumber, Bytes, Uint16, Uint32, Uint8 } from \"./types\";\n\nexport class Serializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  constructor() {\n    this.buffer = new ArrayBuffer(64);\n    this.offset = 0;\n  }\n\n  private ensureBufferWillHandleSize(bytes: number) {\n    while (this.buffer.byteLength < this.offset + bytes) {\n      const newBuffer = new ArrayBuffer(this.buffer.byteLength * 2);\n      new Uint8Array(newBuffer).set(new Uint8Array(this.buffer));\n      this.buffer = newBuffer;\n    }\n  }\n\n  protected serialize(values: Bytes) {\n    this.ensureBufferWillHandleSize(values.length);\n    new Uint8Array(this.buffer, this.offset).set(values);\n    this.offset += values.length;\n  }\n\n  private serializeWithFunction(\n    fn: (byteOffset: number, value: number, littleEndian?: boolean) => void,\n    bytesLength: number,\n    value: number,\n  ) {\n    this.ensureBufferWillHandleSize(bytesLength);\n    const dv = new DataView(this.buffer, this.offset);\n    fn.apply(dv, [0, value, true]);\n    this.offset += bytesLength;\n  }\n\n  /**\n   * Serializes a string. UTF8 string is supported. Serializes the string's bytes length \"l\" first,\n   * and then serializes \"l\" bytes of the string content.\n   *\n   * BCS layout for \"string\": string_length | string_content. string_length is the bytes length of\n   * the string that is uleb128 encoded. string_length is a u32 integer.\n   *\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeStr(\"çå∞≠¢õß∂ƒ∫\");\n   * assert(serializer.getBytes() === new Uint8Array([24, 0xc3, 0xa7, 0xc3, 0xa5, 0xe2, 0x88, 0x9e,\n   * 0xe2, 0x89, 0xa0, 0xc2, 0xa2, 0xc3, 0xb5, 0xc3, 0x9f, 0xe2, 0x88, 0x82, 0xc6, 0x92, 0xe2, 0x88, 0xab]));\n   * ```\n   */\n  serializeStr(value: string): void {\n    const textEncoder = new TextEncoder();\n    this.serializeBytes(textEncoder.encode(value));\n  }\n\n  /**\n   * Serializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes. bytes_length is the length of the bytes array that is\n   * uleb128 encoded. bytes_length is a u32 integer.\n   */\n  serializeBytes(value: Bytes): void {\n    this.serializeU32AsUleb128(value.length);\n    this.serialize(value);\n  }\n\n  /**\n   * Serializes an array of bytes with known length. Therefore length doesn't need to be\n   * serialized to help deserialization.  When deserializing, the number of\n   * bytes to deserialize needs to be passed in.\n   */\n  serializeFixedBytes(value: Bytes): void {\n    this.serialize(value);\n  }\n\n  /**\n   * Serializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for True and \"0x00\" for False.\n   */\n  serializeBool(value: boolean): void {\n    if (typeof value !== \"boolean\") {\n      throw new Error(\"Value needs to be a boolean\");\n    }\n    const byteValue = value ? 1 : 0;\n    this.serialize(new Uint8Array([byteValue]));\n  }\n\n  /**\n   * Serializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  @checkNumberRange(0, MAX_U8_NUMBER)\n  serializeU8(value: Uint8): void {\n    this.serialize(new Uint8Array([value]));\n  }\n\n  /**\n   * Serializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU16(4660);\n   * assert(serializer.getBytes() === new Uint8Array([0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U16_NUMBER)\n  serializeU16(value: Uint16): void {\n    this.serializeWithFunction(DataView.prototype.setUint16, 2, value);\n  }\n\n  /**\n   * Serializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU32(305419896);\n   * assert(serializer.getBytes() === new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32(value: Uint32): void {\n    this.serializeWithFunction(DataView.prototype.setUint32, 4, value);\n  }\n\n  /**\n   * Serializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU64(1311768467750121216);\n   * assert(serializer.getBytes() === new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(BigInt(0), MAX_U64_BIG_INT)\n  serializeU64(value: AnyNumber): void {\n    const low = BigInt(value.toString()) & BigInt(MAX_U32_NUMBER);\n    const high = BigInt(value.toString()) >> BigInt(32);\n\n    // write little endian number\n    this.serializeU32(Number(low));\n    this.serializeU32(Number(high));\n  }\n\n  /**\n   * Serializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U128_BIG_INT)\n  serializeU128(value: AnyNumber): void {\n    const low = BigInt(value.toString()) & MAX_U64_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(64);\n\n    // write little endian number\n    this.serializeU64(low);\n    this.serializeU64(high);\n  }\n\n  /**\n   * Serializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U256_BIG_INT)\n  serializeU256(value: AnyNumber): void {\n    const low = BigInt(value.toString()) & MAX_U128_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(128);\n\n    // write little endian number\n    this.serializeU128(low);\n    this.serializeU128(high);\n  }\n\n  /**\n   * Serializes a uint32 number with uleb128.\n   *\n   * BCS use uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32AsUleb128(val: Uint32): void {\n    let value = val;\n    const valueArray = [];\n    while (value >>> 7 !== 0) {\n      valueArray.push((value & 0x7f) | 0x80);\n      value >>>= 7;\n    }\n    valueArray.push(value);\n    this.serialize(new Uint8Array(valueArray));\n  }\n\n  /**\n   * Returns the buffered bytes\n   */\n  getBytes(): Bytes {\n    return new Uint8Array(this.buffer).slice(0, this.offset);\n  }\n}\n\n/**\n * Creates a decorator to make sure the arg value of the decorated function is within a range.\n * @param minValue The arg value of decorated function must >= minValue\n * @param maxValue The arg value of decorated function must <= maxValue\n * @param message Error message\n */\nfunction checkNumberRange<T extends AnyNumber>(minValue: T, maxValue: T, message?: string) {\n  return (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const childFunction = descriptor.value;\n    // eslint-disable-next-line no-param-reassign\n    descriptor.value = function deco(value: AnyNumber) {\n      const valueBigInt = BigInt(value.toString());\n      if (valueBigInt > BigInt(maxValue.toString()) || valueBigInt < BigInt(minValue.toString())) {\n        throw new Error(message || \"Value is out of range\");\n      }\n      childFunction.apply(this, [value]);\n    };\n    return descriptor;\n  };\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport { MAX_U32_NUMBER } from \"./consts\";\nimport { Bytes, Uint128, Uint16, Uint256, Uint32, Uint64, Uint8 } from \"./types\";\n\nexport class Deserializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  constructor(data: Bytes) {\n    // copies data to prevent outside mutation of buffer.\n    this.buffer = new ArrayBuffer(data.length);\n    new Uint8Array(this.buffer).set(data, 0);\n    this.offset = 0;\n  }\n\n  private read(length: number): ArrayBuffer {\n    if (this.offset + length > this.buffer.byteLength) {\n      throw new Error(\"Reached to the end of buffer\");\n    }\n\n    const bytes = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return bytes;\n  }\n\n  /**\n   * Deserializes a string. UTF8 string is supported. Reads the string's bytes length \"l\" first,\n   * and then reads \"l\" bytes of content. Decodes the byte array into a string.\n   *\n   * BCS layout for \"string\": string_length | string_content. string_length is the bytes length of\n   * the string that is uleb128 encoded. string_length is a u32 integer.\n   *\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([24, 0xc3, 0xa7, 0xc3, 0xa5, 0xe2, 0x88, 0x9e,\n   * 0xe2, 0x89, 0xa0, 0xc2, 0xa2, 0xc3, 0xb5, 0xc3, 0x9f, 0xe2, 0x88, 0x82, 0xc6, 0x92, 0xe2, 0x88, 0xab]));\n   * assert(deserializer.deserializeStr() === \"çå∞≠¢õß∂ƒ∫\");\n   * ```\n   */\n  deserializeStr(): string {\n    const value = this.deserializeBytes();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(value);\n  }\n\n  /**\n   * Deserializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes. bytes_length is the length of the bytes array that is\n   * uleb128 encoded. bytes_length is a u32 integer.\n   */\n  deserializeBytes(): Bytes {\n    const len = this.deserializeUleb128AsU32();\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes an array of bytes. The number of bytes to read is already known.\n   *\n   */\n  deserializeFixedBytes(len: number): Bytes {\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for True and \"0x00\" for False.\n   */\n  deserializeBool(): boolean {\n    const bool = new Uint8Array(this.read(1))[0];\n    if (bool !== 1 && bool !== 0) {\n      throw new Error(\"Invalid boolean value\");\n    }\n    return bool === 1;\n  }\n\n  /**\n   * Deserializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  deserializeU8(): Uint8 {\n    return new DataView(this.read(1)).getUint8(0);\n  }\n\n  /**\n   * Deserializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x34, 0x12]));\n   * assert(deserializer.deserializeU16() === 4660);\n   * ```\n   */\n  deserializeU16(): Uint16 {\n    return new DataView(this.read(2)).getUint16(0, true);\n  }\n\n  /**\n   * Deserializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU32() === 305419896);\n   * ```\n   */\n  deserializeU32(): Uint32 {\n    return new DataView(this.read(4)).getUint32(0, true);\n  }\n\n  /**\n   * Deserializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU64() === 1311768467750121216);\n   * ```\n   */\n  deserializeU64(): Uint64 {\n    const low = this.deserializeU32();\n    const high = this.deserializeU32();\n\n    // combine the two 32-bit values and return (little endian)\n    return BigInt((BigInt(high) << BigInt(32)) | BigInt(low));\n  }\n\n  /**\n   * Deserializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  deserializeU128(): Uint128 {\n    const low = this.deserializeU64();\n    const high = this.deserializeU64();\n\n    // combine the two 64-bit values and return (little endian)\n    return BigInt((high << BigInt(64)) | low);\n  }\n\n  /**\n   * Deserializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Thirty-two bytes. Binary format in little-endian representation.\n   */\n  deserializeU256(): Uint256 {\n    const low = this.deserializeU128();\n    const high = this.deserializeU128();\n\n    // combine the two 128-bit values and return (little endian)\n    return BigInt((high << BigInt(128)) | low);\n  }\n\n  /**\n   * Deserializes a uleb128 encoded uint32 number.\n   *\n   * BCS use uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  deserializeUleb128AsU32(): Uint32 {\n    let value: bigint = BigInt(0);\n    let shift = 0;\n\n    while (value < MAX_U32_NUMBER) {\n      const byte = this.deserializeU8();\n      value |= BigInt(byte & 0x7f) << BigInt(shift);\n\n      if ((byte & 0x80) === 0) {\n        break;\n      }\n      shift += 7;\n    }\n\n    if (value > MAX_U32_NUMBER) {\n      throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n    }\n\n    return Number(value);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer } from \"./deserializer\";\nimport { Serializer } from \"./serializer\";\nimport { AnyNumber, Bytes, Seq, Uint16, Uint32, Uint8 } from \"./types\";\n\ninterface Serializable {\n  serialize(serializer: Serializer): void;\n}\n\n/**\n * Serializes a vector values that are \"Serializable\".\n */\nexport function serializeVector<T extends Serializable>(value: Seq<T>, serializer: Serializer): void {\n  serializer.serializeU32AsUleb128(value.length);\n  value.forEach((item: T) => {\n    item.serialize(serializer);\n  });\n}\n\n/**\n * Serializes a vector with specified item serialization function.\n * Very dynamic function and bypasses static typechecking.\n */\nexport function serializeVectorWithFunc(value: any[], func: string): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU32AsUleb128(value.length);\n  const f = (serializer as any)[func];\n  value.forEach((item) => {\n    f.call(serializer, item);\n  });\n  return serializer.getBytes();\n}\n\n/**\n * Deserializes a vector of values.\n */\nexport function deserializeVector(deserializer: Deserializer, cls: any): any[] {\n  const length = deserializer.deserializeUleb128AsU32();\n  const list: Seq<typeof cls> = [];\n  for (let i = 0; i < length; i += 1) {\n    list.push(cls.deserialize(deserializer));\n  }\n  return list;\n}\n\nexport function bcsToBytes<T extends Serializable>(value: T): Bytes {\n  const serializer = new Serializer();\n  value.serialize(serializer);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeUint64(value: AnyNumber): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU64(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU8(value: Uint8): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU8(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU16(value: Uint16): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU16(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU32(value: Uint32): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU32(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU128(value: AnyNumber): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU128(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeBool(value: boolean): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeBool(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeStr(value: string): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeStr(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeBytes(value: Bytes): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeBytes(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeFixedBytes(value: Bytes): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeFixedBytes(value);\n  return serializer.getBytes();\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable max-classes-per-file */\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { HexString } from \"../hex_string\";\nimport {\n  Deserializer,\n  Serializer,\n  Uint64,\n  Bytes,\n  Seq,\n  Uint8,\n  Uint128,\n  deserializeVector,\n  serializeVector,\n  bcsToBytes,\n  Uint16,\n  Uint256,\n} from \"../bcs\";\nimport { AccountAddress } from \"./account_address\";\nimport { TransactionAuthenticator } from \"./authenticator\";\nimport { Identifier } from \"./identifier\";\nimport { TypeTag } from \"./type_tag\";\n\nexport class RawTransaction {\n  /**\n   * RawTransactions contain the metadata and payloads that can be submitted to Aptos chain for execution.\n   * RawTransactions must be signed before Aptos chain can execute them.\n   *\n   * @param sender Account address of the sender.\n   * @param sequence_number Sequence number of this transaction. This must match the sequence number stored in\n   *   the sender's account at the time the transaction executes.\n   * @param payload Instructions for the Aptos Blockchain, including publishing a module,\n   *   execute a entry function or execute a script payload.\n   * @param max_gas_amount Maximum total gas to spend for this transaction. The account must have more\n   *   than this gas or the transaction will be discarded during validation.\n   * @param gas_unit_price Price to be paid per gas unit.\n   * @param expiration_timestamp_secs The blockchain timestamp at which the blockchain would discard this transaction.\n   * @param chain_id The chain ID of the blockchain that this transaction is intended to be run on.\n   */\n  constructor(\n    public readonly sender: AccountAddress,\n    public readonly sequence_number: Uint64,\n    public readonly payload: TransactionPayload,\n    public readonly max_gas_amount: Uint64,\n    public readonly gas_unit_price: Uint64,\n    public readonly expiration_timestamp_secs: Uint64,\n    public readonly chain_id: ChainId,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    this.sender.serialize(serializer);\n    serializer.serializeU64(this.sequence_number);\n    this.payload.serialize(serializer);\n    serializer.serializeU64(this.max_gas_amount);\n    serializer.serializeU64(this.gas_unit_price);\n    serializer.serializeU64(this.expiration_timestamp_secs);\n    this.chain_id.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): RawTransaction {\n    const sender = AccountAddress.deserialize(deserializer);\n    const sequence_number = deserializer.deserializeU64();\n    const payload = TransactionPayload.deserialize(deserializer);\n    const max_gas_amount = deserializer.deserializeU64();\n    const gas_unit_price = deserializer.deserializeU64();\n    const expiration_timestamp_secs = deserializer.deserializeU64();\n    const chain_id = ChainId.deserialize(deserializer);\n    return new RawTransaction(\n      sender,\n      sequence_number,\n      payload,\n      max_gas_amount,\n      gas_unit_price,\n      expiration_timestamp_secs,\n      chain_id,\n    );\n  }\n}\n\nexport class Script {\n  /**\n   * Scripts contain the Move bytecodes payload that can be submitted to Aptos chain for execution.\n   * @param code Move bytecode\n   * @param ty_args Type arguments that bytecode requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arugments to bytecode function.\n   *\n   * @example\n   * A coin transfer function has three arugments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   */\n  constructor(\n    public readonly code: Bytes,\n    public readonly ty_args: Seq<TypeTag>,\n    public readonly args: Seq<TransactionArgument>,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.code);\n    serializeVector<TypeTag>(this.ty_args, serializer);\n    serializeVector<TransactionArgument>(this.args, serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): Script {\n    const code = deserializer.deserializeBytes();\n    const ty_args = deserializeVector(deserializer, TypeTag);\n    const args = deserializeVector(deserializer, TransactionArgument);\n    return new Script(code, ty_args, args);\n  }\n}\n\nexport class EntryFunction {\n  /**\n   * Contains the payload to run a function within a module.\n   * @param module_name Fully qualified module name. ModuleId consists of account address and module name.\n   * @param function_name The function to run.\n   * @param ty_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arugments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arugments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   */\n  constructor(\n    public readonly module_name: ModuleId,\n    public readonly function_name: Identifier,\n    public readonly ty_args: Seq<TypeTag>,\n    public readonly args: Seq<Bytes>,\n  ) {}\n\n  /**\n   *\n   * @param module Fully qualified module name in format \"AccountAddress::module_name\" e.g. \"0x1::coin\"\n   * @param func Function name\n   * @param ty_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arugments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arugments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @returns\n   */\n  static natural(module: string, func: string, ty_args: Seq<TypeTag>, args: Seq<Bytes>): EntryFunction {\n    return new EntryFunction(ModuleId.fromStr(module), new Identifier(func), ty_args, args);\n  }\n\n  /**\n   * `natual` is deprecated, please use `natural`\n   *\n   * @deprecated.\n   */\n  static natual(module: string, func: string, ty_args: Seq<TypeTag>, args: Seq<Bytes>): EntryFunction {\n    return EntryFunction.natural(module, func, ty_args, args);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.module_name.serialize(serializer);\n    this.function_name.serialize(serializer);\n    serializeVector<TypeTag>(this.ty_args, serializer);\n\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: Bytes) => {\n      serializer.serializeBytes(item);\n    });\n  }\n\n  static deserialize(deserializer: Deserializer): EntryFunction {\n    const module_name = ModuleId.deserialize(deserializer);\n    const function_name = Identifier.deserialize(deserializer);\n    const ty_args = deserializeVector(deserializer, TypeTag);\n\n    const length = deserializer.deserializeUleb128AsU32();\n    const list: Seq<Bytes> = [];\n    for (let i = 0; i < length; i += 1) {\n      list.push(deserializer.deserializeBytes());\n    }\n\n    const args = list;\n    return new EntryFunction(module_name, function_name, ty_args, args);\n  }\n}\n\nexport class Module {\n  /**\n   * Contains the bytecode of a Move module that can be published to the Aptos chain.\n   * @param code Move bytecode of a module.\n   */\n  constructor(public readonly code: Bytes) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.code);\n  }\n\n  static deserialize(deserializer: Deserializer): Module {\n    const code = deserializer.deserializeBytes();\n    return new Module(code);\n  }\n}\n\nexport class ModuleId {\n  /**\n   * Full name of a module.\n   * @param address The account address.\n   * @param name The name of the module under the account at \"address\".\n   */\n  constructor(public readonly address: AccountAddress, public readonly name: Identifier) {}\n\n  /**\n   * Converts a string literal to a ModuleId\n   * @param moduleId String literal in format \"AccountAddress::module_name\",\n   *   e.g. \"0x1::coin\"\n   * @returns\n   */\n  static fromStr(moduleId: string): ModuleId {\n    const parts = moduleId.split(\"::\");\n    if (parts.length !== 2) {\n      throw new Error(\"Invalid module id.\");\n    }\n    return new ModuleId(AccountAddress.fromHex(new HexString(parts[0])), new Identifier(parts[1]));\n  }\n\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.name.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ModuleId {\n    const address = AccountAddress.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    return new ModuleId(address, name);\n  }\n}\n\nexport class ChangeSet {\n  serialize(serializer: Serializer): void {\n    throw new Error(\"Not implemented.\");\n  }\n\n  static deserialize(deserializer: Deserializer): ChangeSet {\n    throw new Error(\"Not implemented.\");\n  }\n}\n\nexport class WriteSet {\n  serialize(serializer: Serializer): void {\n    throw new Error(\"Not implmented.\");\n  }\n\n  static deserialize(deserializer: Deserializer): WriteSet {\n    throw new Error(\"Not implmented.\");\n  }\n}\n\nexport class SignedTransaction {\n  /**\n   * A SignedTransaction consists of a raw transaction and an authenticator. The authenticator\n   * contains a client's public key and the signature of the raw transaction.\n   *\n   * @see {@link https://aptos.dev/guides/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   *\n   * @param raw_txn\n   * @param authenticator Contains a client's public key and the signature of the raw transaction.\n   *   Authenticator has 3 flavors: single signature, multi-signature and multi-agent.\n   *   @see authenticator.ts for details.\n   */\n  constructor(public readonly raw_txn: RawTransaction, public readonly authenticator: TransactionAuthenticator) {}\n\n  serialize(serializer: Serializer): void {\n    this.raw_txn.serialize(serializer);\n    this.authenticator.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): SignedTransaction {\n    const raw_txn = RawTransaction.deserialize(deserializer);\n    const authenticator = TransactionAuthenticator.deserialize(deserializer);\n    return new SignedTransaction(raw_txn, authenticator);\n  }\n}\n\nexport abstract class RawTransactionWithData {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): RawTransactionWithData {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return MultiAgentRawTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n    }\n  }\n}\n\nexport class MultiAgentRawTransaction extends RawTransactionWithData {\n  constructor(\n    public readonly raw_txn: RawTransaction,\n    public readonly secondary_signer_addresses: Seq<AccountAddress>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    // enum variant index\n    serializer.serializeU32AsUleb128(0);\n    this.raw_txn.serialize(serializer);\n    serializeVector<TransactionArgument>(this.secondary_signer_addresses, serializer);\n  }\n\n  static load(deserializer: Deserializer): MultiAgentRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializeVector(deserializer, AccountAddress);\n\n    return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n  }\n}\n\nexport abstract class TransactionPayload {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionPayload {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionPayloadScript.load(deserializer);\n      // TODO: change to 1 once ModuleBundle has been removed from rust\n      case 2:\n        return TransactionPayloadEntryFunction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\nexport class TransactionPayloadScript extends TransactionPayload {\n  constructor(public readonly value: Script) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadScript {\n    const value = Script.deserialize(deserializer);\n    return new TransactionPayloadScript(value);\n  }\n}\n\nexport class TransactionPayloadEntryFunction extends TransactionPayload {\n  constructor(public readonly value: EntryFunction) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadEntryFunction {\n    const value = EntryFunction.deserialize(deserializer);\n    return new TransactionPayloadEntryFunction(value);\n  }\n}\n\nexport class ChainId {\n  constructor(public readonly value: Uint8) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): ChainId {\n    const value = deserializer.deserializeU8();\n    return new ChainId(value);\n  }\n}\n\nexport abstract class TransactionArgument {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionArgument {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionArgumentU8.load(deserializer);\n      case 1:\n        return TransactionArgumentU64.load(deserializer);\n      case 2:\n        return TransactionArgumentU128.load(deserializer);\n      case 3:\n        return TransactionArgumentAddress.load(deserializer);\n      case 4:\n        return TransactionArgumentU8Vector.load(deserializer);\n      case 5:\n        return TransactionArgumentBool.load(deserializer);\n      case 6:\n        return TransactionArgumentU16.load(deserializer);\n      case 7:\n        return TransactionArgumentU32.load(deserializer);\n      case 8:\n        return TransactionArgumentU256.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionArgument: ${index}`);\n    }\n  }\n}\n\nexport class TransactionArgumentU8 extends TransactionArgument {\n  constructor(public readonly value: Uint8) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeU8(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU8 {\n    const value = deserializer.deserializeU8();\n    return new TransactionArgumentU8(value);\n  }\n}\n\nexport class TransactionArgumentU16 extends TransactionArgument {\n  constructor(public readonly value: Uint16) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(6);\n    serializer.serializeU16(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU16 {\n    const value = deserializer.deserializeU16();\n    return new TransactionArgumentU16(value);\n  }\n}\n\nexport class TransactionArgumentU32 extends TransactionArgument {\n  constructor(public readonly value: Uint16) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(7);\n    serializer.serializeU32(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU32 {\n    const value = deserializer.deserializeU32();\n    return new TransactionArgumentU32(value);\n  }\n}\n\nexport class TransactionArgumentU64 extends TransactionArgument {\n  constructor(public readonly value: Uint64) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeU64(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU64 {\n    const value = deserializer.deserializeU64();\n    return new TransactionArgumentU64(value);\n  }\n}\n\nexport class TransactionArgumentU128 extends TransactionArgument {\n  constructor(public readonly value: Uint128) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n    serializer.serializeU128(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU128 {\n    const value = deserializer.deserializeU128();\n    return new TransactionArgumentU128(value);\n  }\n}\n\nexport class TransactionArgumentU256 extends TransactionArgument {\n  constructor(public readonly value: Uint256) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(8);\n    serializer.serializeU256(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU256 {\n    const value = deserializer.deserializeU256();\n    return new TransactionArgumentU256(value);\n  }\n}\n\nexport class TransactionArgumentAddress extends TransactionArgument {\n  constructor(public readonly value: AccountAddress) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(3);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentAddress {\n    const value = AccountAddress.deserialize(deserializer);\n    return new TransactionArgumentAddress(value);\n  }\n}\n\nexport class TransactionArgumentU8Vector extends TransactionArgument {\n  constructor(public readonly value: Bytes) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(4);\n    serializer.serializeBytes(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU8Vector {\n    const value = deserializer.deserializeBytes();\n    return new TransactionArgumentU8Vector(value);\n  }\n}\n\nexport class TransactionArgumentBool extends TransactionArgument {\n  constructor(public readonly value: boolean) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(5);\n    serializer.serializeBool(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentBool {\n    const value = deserializer.deserializeBool();\n    return new TransactionArgumentBool(value);\n  }\n}\n\nexport abstract class Transaction {\n  abstract serialize(serializer: Serializer): void;\n\n  abstract hash(): Bytes;\n\n  getHashSalt(): Bytes {\n    const hash = sha3Hash.create();\n    hash.update(\"APTOS::Transaction\");\n    return hash.digest();\n  }\n\n  static deserialize(deserializer: Deserializer): Transaction {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return UserTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for Transaction: ${index}`);\n    }\n  }\n}\n\nexport class UserTransaction extends Transaction {\n  constructor(public readonly value: SignedTransaction) {\n    super();\n  }\n\n  hash(): Bytes {\n    const hash = sha3Hash.create();\n    hash.update(this.getHashSalt());\n    hash.update(bcsToBytes(this));\n    return hash.digest();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): UserTransaction {\n    return new UserTransaction(SignedTransaction.deserialize(deserializer));\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexString, MaybeHexString } from \"../hex_string\";\nimport { Serializer, Deserializer, Bytes } from \"../bcs\";\n\nexport class AccountAddress {\n  static readonly LENGTH: number = 32;\n\n  readonly address: Bytes;\n\n  static CORE_CODE_ADDRESS: AccountAddress = AccountAddress.fromHex(\"0x1\");\n\n  constructor(address: Bytes) {\n    if (address.length !== AccountAddress.LENGTH) {\n      throw new Error(\"Expected address of length 32\");\n    }\n    this.address = address;\n  }\n\n  /**\n   * Creates AccountAddress from a hex string.\n   * @param addr Hex string can be with a prefix or without a prefix,\n   *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\n   */\n  static fromHex(addr: MaybeHexString): AccountAddress {\n    let address = HexString.ensure(addr);\n\n    // If an address hex has odd number of digits, padd the hex string with 0\n    // e.g. '1aa' would become '01aa'.\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n\n    const addressBytes = address.toUint8Array();\n\n    if (addressBytes.length > AccountAddress.LENGTH) {\n      // eslint-disable-next-line quotes\n      throw new Error(\"Hex string is too long. Address's length is 32 bytes.\");\n    } else if (addressBytes.length === AccountAddress.LENGTH) {\n      return new AccountAddress(addressBytes);\n    }\n\n    const res: Bytes = new Uint8Array(AccountAddress.LENGTH);\n    res.set(addressBytes, AccountAddress.LENGTH - addressBytes.length);\n\n    return new AccountAddress(res);\n  }\n\n  /**\n   * Checks if the string is a valid AccountAddress\n   * @param addr Hex string can be with a prefix or without a prefix,\n   *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\n   */\n  static isValid(addr: MaybeHexString): boolean {\n    // At least one zero is required\n    if (addr === \"\") {\n      return false;\n    }\n\n    let address = HexString.ensure(addr);\n\n    // If an address hex has odd number of digits, padd the hex string with 0\n    // e.g. '1aa' would become '01aa'.\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n\n    const addressBytes = address.toUint8Array();\n\n    return addressBytes.length <= AccountAddress.LENGTH;\n  }\n\n  /**\n   * Return a hex string from account Address.\n   */\n  toHexString(): MaybeHexString {\n    return HexString.fromUint8Array(this.address).hex();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.address);\n  }\n\n  static deserialize(deserializer: Deserializer): AccountAddress {\n    return new AccountAddress(deserializer.deserializeFixedBytes(AccountAddress.LENGTH));\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Bytes, Deserializer, Serializer } from \"../bcs\";\n\nexport class Ed25519PublicKey {\n  static readonly LENGTH: number = 32;\n\n  readonly value: Bytes;\n\n  constructor(value: Bytes) {\n    if (value.length !== Ed25519PublicKey.LENGTH) {\n      throw new Error(`Ed25519PublicKey length should be ${Ed25519PublicKey.LENGTH}`);\n    }\n    this.value = value;\n  }\n\n  toBytes(): Bytes {\n    return this.value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519PublicKey {\n    const value = deserializer.deserializeBytes();\n    return new Ed25519PublicKey(value);\n  }\n}\n\nexport class Ed25519Signature {\n  static readonly LENGTH = 64;\n\n  constructor(public readonly value: Bytes) {\n    if (value.length !== Ed25519Signature.LENGTH) {\n      throw new Error(`Ed25519Signature length should be ${Ed25519Signature.LENGTH}`);\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519Signature {\n    const value = deserializer.deserializeBytes();\n    return new Ed25519Signature(value);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport { Bytes, Deserializer, Seq, Serializer, Uint8 } from \"../bcs\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\n\n/**\n * MultiEd25519 currently supports at most 32 signatures.\n */\nconst MAX_SIGNATURES_SUPPORTED = 32;\n\nexport class MultiEd25519PublicKey {\n  /**\n   * Public key for a K-of-N multisig transaction. A K-of-N multisig transaction means that for such a\n   * transaction to be executed, at least K out of the N authorized signers have signed the transaction\n   * and passed the check conducted by the chain.\n   *\n   * @see {@link\n   * https://aptos.dev/guides/creating-a-signed-transaction#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param public_keys A list of public keys\n   * @param threshold At least \"threshold\" signatures must be valid\n   */\n  constructor(public readonly public_keys: Seq<Ed25519PublicKey>, public readonly threshold: Uint8) {\n    if (threshold > MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(`\"threshold\" cannot be larger than ${MAX_SIGNATURES_SUPPORTED}`);\n    }\n  }\n\n  /**\n   * Converts a MultiEd25519PublicKey into bytes with: bytes = p1_bytes | ... | pn_bytes | threshold\n   */\n  toBytes(): Bytes {\n    const bytes = new Uint8Array(this.public_keys.length * Ed25519PublicKey.LENGTH + 1);\n    this.public_keys.forEach((k: Ed25519PublicKey, i: number) => {\n      bytes.set(k.value, i * Ed25519PublicKey.LENGTH);\n    });\n\n    bytes[this.public_keys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n\n    return bytes;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toBytes());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    const threshold = bytes[bytes.length - 1];\n\n    const keys: Seq<Ed25519PublicKey> = [];\n\n    for (let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH) {\n      const begin = i;\n      keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n    }\n    return new MultiEd25519PublicKey(keys, threshold);\n  }\n}\n\nexport class MultiEd25519Signature {\n  static BITMAP_LEN: Uint8 = 4;\n\n  /**\n   * Signature for a K-of-N multisig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/guides/creating-a-signed-transaction#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param signatures A list of ed25519 signatures\n   * @param bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right\n   */\n  constructor(public readonly signatures: Seq<Ed25519Signature>, public readonly bitmap: Uint8Array) {\n    if (bitmap.length !== MultiEd25519Signature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiEd25519Signature.BITMAP_LEN}`);\n    }\n  }\n\n  /**\n   * Converts a MultiEd25519Signature into bytes with `bytes = s1_bytes | ... | sn_bytes | bitmap`\n   */\n  toBytes(): Bytes {\n    const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + MultiEd25519Signature.BITMAP_LEN);\n    this.signatures.forEach((k: Ed25519Signature, i: number) => {\n      bytes.set(k.value, i * Ed25519Signature.LENGTH);\n    });\n\n    bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n\n    return bytes;\n  }\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions\n   * @param bits The bitmap positions that should be set. A position starts at index 0.\n   * Valid position should range between 0 and 31.\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32bit long\n   */\n  static createBitmap(bits: Seq<Uint8>): Uint8Array {\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number) => {\n      if (bit >= MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Invalid bit value ${bit}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicated bits detected.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toBytes());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    const bitmap = bytes.subarray(bytes.length - 4);\n\n    const sigs: Seq<Ed25519Signature> = [];\n\n    for (let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH) {\n      const begin = i;\n      sigs.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n    }\n    return new MultiEd25519Signature(sigs, bitmap);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Serializer, Deserializer, Seq, deserializeVector, serializeVector } from \"../bcs\";\nimport { AccountAddress } from \"./account_address\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"./multi_ed25519\";\n\nexport abstract class TransactionAuthenticator {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionAuthenticatorEd25519.load(deserializer);\n      case 1:\n        return TransactionAuthenticatorMultiEd25519.load(deserializer);\n      case 2:\n        return TransactionAuthenticatorMultiAgent.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n    }\n  }\n}\n\nexport class TransactionAuthenticatorEd25519 extends TransactionAuthenticator {\n  /**\n   * An authenticator for single signature.\n   *\n   * @param public_key Client's public key.\n   * @param signature Signature of a raw transaction.\n   * @see {@link https://aptos.dev/guides/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   * for details about generating a signature.\n   */\n  constructor(public readonly public_key: Ed25519PublicKey, public readonly signature: Ed25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorEd25519(public_key, signature);\n  }\n}\n\nexport class TransactionAuthenticatorMultiEd25519 extends TransactionAuthenticator {\n  /**\n   * An authenticator for multiple signatures.\n   *\n   * @param public_key\n   * @param signature\n   *\n   */\n  constructor(public readonly public_key: MultiEd25519PublicKey, public readonly signature: MultiEd25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\nexport class TransactionAuthenticatorMultiAgent extends TransactionAuthenticator {\n  constructor(\n    public readonly sender: AccountAuthenticator,\n    public readonly secondary_signer_addresses: Seq<AccountAddress>,\n    public readonly secondary_signers: Seq<AccountAuthenticator>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n    this.sender.serialize(serializer);\n    serializeVector<AccountAddress>(this.secondary_signer_addresses, serializer);\n    serializeVector<AccountAuthenticator>(this.secondary_signers, serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializeVector(deserializer, AccountAddress);\n    const secondary_signers = deserializeVector(deserializer, AccountAuthenticator);\n    return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n  }\n}\n\nexport abstract class AccountAuthenticator {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): AccountAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return AccountAuthenticatorEd25519.load(deserializer);\n      case 1:\n        return AccountAuthenticatorMultiEd25519.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n    }\n  }\n}\n\nexport class AccountAuthenticatorEd25519 extends AccountAuthenticator {\n  constructor(public readonly public_key: Ed25519PublicKey, public readonly signature: Ed25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorEd25519(public_key, signature);\n  }\n}\n\nexport class AccountAuthenticatorMultiEd25519 extends AccountAuthenticator {\n  constructor(public readonly public_key: MultiEd25519PublicKey, public readonly signature: MultiEd25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from \"../bcs\";\n\nexport class Identifier {\n  constructor(public value: string) {}\n\n  public serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): Identifier {\n    const value = deserializer.deserializeStr();\n    return new Identifier(value);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { Deserializer, Seq, Serializer, deserializeVector, serializeVector } from \"../bcs\";\nimport { AccountAddress } from \"./account_address\";\nimport { Identifier } from \"./identifier\";\n\nexport abstract class TypeTag {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TypeTag {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TypeTagBool.load(deserializer);\n      case 1:\n        return TypeTagU8.load(deserializer);\n      case 2:\n        return TypeTagU64.load(deserializer);\n      case 3:\n        return TypeTagU128.load(deserializer);\n      case 4:\n        return TypeTagAddress.load(deserializer);\n      case 5:\n        return TypeTagSigner.load(deserializer);\n      case 6:\n        return TypeTagVector.load(deserializer);\n      case 7:\n        return TypeTagStruct.load(deserializer);\n      case 8:\n        return TypeTagU16.load(deserializer);\n      case 9:\n        return TypeTagU32.load(deserializer);\n      case 10:\n        return TypeTagU256.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TypeTag: ${index}`);\n    }\n  }\n}\n\nexport class TypeTagBool extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n  }\n\n  static load(deserializer: Deserializer): TypeTagBool {\n    return new TypeTagBool();\n  }\n}\n\nexport class TypeTagU8 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU8 {\n    return new TypeTagU8();\n  }\n}\n\nexport class TypeTagU16 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU16 {\n    return new TypeTagU16();\n  }\n}\n\nexport class TypeTagU32 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU32 {\n    return new TypeTagU32();\n  }\n}\n\nexport class TypeTagU64 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU64 {\n    return new TypeTagU64();\n  }\n}\n\nexport class TypeTagU128 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(3);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU128 {\n    return new TypeTagU128();\n  }\n}\n\nexport class TypeTagU256 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU256 {\n    return new TypeTagU256();\n  }\n}\n\nexport class TypeTagAddress extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(4);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagAddress {\n    return new TypeTagAddress();\n  }\n}\n\nexport class TypeTagSigner extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(5);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagSigner {\n    return new TypeTagSigner();\n  }\n}\n\nexport class TypeTagVector extends TypeTag {\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(6);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagVector {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagVector(value);\n  }\n}\n\nexport class TypeTagStruct extends TypeTag {\n  constructor(public readonly value: StructTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(7);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagStruct {\n    const value = StructTag.deserialize(deserializer);\n    return new TypeTagStruct(value);\n  }\n\n  isStringTypeTag(): boolean {\n    if (\n      this.value.module_name.value === \"string\" &&\n      this.value.name.value === \"String\" &&\n      this.value.address.toHexString() === AccountAddress.fromHex(\"0x1\").toHexString()\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport class StructTag {\n  constructor(\n    public readonly address: AccountAddress,\n    public readonly module_name: Identifier,\n    public readonly name: Identifier,\n    public readonly type_args: Seq<TypeTag>,\n  ) {}\n\n  /**\n   * Converts a string literal to a StructTag\n   * @param structTag String literal in format \"AcountAddress::module_name::ResourceName\",\n   *   e.g. \"0x1::aptos_coin::AptosCoin\"\n   * @returns\n   */\n  static fromString(structTag: string): StructTag {\n    // Type args are not supported in string literal\n    if (structTag.includes(\"<\")) {\n      throw new Error(\"Not implemented\");\n    }\n\n    const parts = structTag.split(\"::\");\n    if (parts.length !== 3) {\n      throw new Error(\"Invalid struct tag string literal.\");\n    }\n\n    return new StructTag(AccountAddress.fromHex(parts[0]), new Identifier(parts[1]), new Identifier(parts[2]), []);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.module_name.serialize(serializer);\n    this.name.serialize(serializer);\n    serializeVector<TypeTag>(this.type_args, serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): StructTag {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializeVector(deserializer, TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer, Bytes, Seq, deserializeVector, serializeVector } from \"../bcs\";\n\nimport { ModuleId } from \"./transaction\";\n\nimport { TypeTag } from \"./type_tag\";\n\nexport class TypeArgumentABI {\n  /**\n   * Constructs a TypeArgumentABI instance.\n   * @param name\n   */\n  constructor(public readonly name: string) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.name);\n  }\n\n  static deserialize(deserializer: Deserializer): TypeArgumentABI {\n    const name = deserializer.deserializeStr();\n    return new TypeArgumentABI(name);\n  }\n}\n\nexport class ArgumentABI {\n  /**\n   * Constructs an ArgumentABI instance.\n   * @param name\n   * @param type_tag\n   */\n  constructor(public readonly name: string, public readonly type_tag: TypeTag) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.name);\n    this.type_tag.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ArgumentABI {\n    const name = deserializer.deserializeStr();\n    const typeTag = TypeTag.deserialize(deserializer);\n    return new ArgumentABI(name, typeTag);\n  }\n}\n\nexport abstract class ScriptABI {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): ScriptABI {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionScriptABI.load(deserializer);\n      case 1:\n        return EntryFunctionABI.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\nexport class TransactionScriptABI extends ScriptABI {\n  /**\n   * Constructs a TransactionScriptABI instance.\n   * @param name Entry function name\n   * @param doc\n   * @param code\n   * @param ty_args\n   * @param args\n   */\n  constructor(\n    public readonly name: string,\n    public readonly doc: string,\n    public readonly code: Bytes,\n    public readonly ty_args: Seq<TypeArgumentABI>,\n    public readonly args: Seq<ArgumentABI>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeStr(this.name);\n    serializer.serializeStr(this.doc);\n    serializer.serializeBytes(this.code);\n    serializeVector<TypeArgumentABI>(this.ty_args, serializer);\n    serializeVector<ArgumentABI>(this.args, serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionScriptABI {\n    const name = deserializer.deserializeStr();\n    const doc = deserializer.deserializeStr();\n    const code = deserializer.deserializeBytes();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new TransactionScriptABI(name, doc, code, tyArgs, args);\n  }\n}\n\nexport class EntryFunctionABI extends ScriptABI {\n  /**\n   * Constructs a EntryFunctionABI instance\n   * @param name\n   * @param module_name Fully qualified module id\n   * @param doc\n   * @param ty_args\n   * @param args\n   */\n  constructor(\n    public readonly name: string,\n    public readonly module_name: ModuleId,\n    public readonly doc: string,\n    public readonly ty_args: Seq<TypeArgumentABI>,\n    public readonly args: Seq<ArgumentABI>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeStr(this.name);\n    this.module_name.serialize(serializer);\n    serializer.serializeStr(this.doc);\n    serializeVector<TypeArgumentABI>(this.ty_args, serializer);\n    serializeVector<ArgumentABI>(this.args, serializer);\n  }\n\n  static load(deserializer: Deserializer): EntryFunctionABI {\n    const name = deserializer.deserializeStr();\n    const moduleName = ModuleId.deserialize(deserializer);\n    const doc = deserializer.deserializeStr();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new EntryFunctionABI(name, moduleName, doc, tyArgs, args);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { HexString } from \"../hex_string\";\nimport { Bytes } from \"../bcs\";\nimport { MultiEd25519PublicKey } from \"./multi_ed25519\";\nimport { Ed25519PublicKey } from \"./ed25519\";\n\n/**\n * Each account stores an authentication key. Authentication key enables account owners to rotate\n * their private key(s) associated with the account without changing the address that hosts their account.\n * @see {@link * https://aptos.dev/concepts/accounts | Account Basics}\n *\n * Account addresses can be derived from AuthenticationKey\n */\nexport class AuthenticationKey {\n  static readonly LENGTH: number = 32;\n\n  static readonly MULTI_ED25519_SCHEME: number = 1;\n\n  static readonly ED25519_SCHEME: number = 0;\n\n  static readonly DERIVE_RESOURCE_ACCOUNT_SCHEME: number = 255;\n\n  readonly bytes: Bytes;\n\n  constructor(bytes: Bytes) {\n    if (bytes.length !== AuthenticationKey.LENGTH) {\n      throw new Error(\"Expected a byte array of length 32\");\n    }\n    this.bytes = bytes;\n  }\n\n  /**\n   * Converts a K-of-N MultiEd25519PublicKey to AuthenticationKey with:\n   * `auth_key = sha3-256(p_1 | … | p_n | K | 0x01)`. `K` represents the K-of-N required for\n   * authenticating the transaction. `0x01` is the 1-byte scheme for multisig.\n   */\n  static fromMultiEd25519PublicKey(publicKey: MultiEd25519PublicKey): AuthenticationKey {\n    const pubKeyBytes = publicKey.toBytes();\n\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([AuthenticationKey.MULTI_ED25519_SCHEME], pubKeyBytes.length);\n\n    const hash = sha3Hash.create();\n    hash.update(bytes);\n\n    return new AuthenticationKey(hash.digest());\n  }\n\n  static fromEd25519PublicKey(publicKey: Ed25519PublicKey): AuthenticationKey {\n    const pubKeyBytes = publicKey.value;\n\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([AuthenticationKey.ED25519_SCHEME], pubKeyBytes.length);\n\n    const hash = sha3Hash.create();\n    hash.update(bytes);\n\n    return new AuthenticationKey(hash.digest());\n  }\n\n  /**\n   * Derives an account address from AuthenticationKey. Since current AccountAddress is 32 bytes,\n   * AuthenticationKey bytes are directly translated to AccountAddress.\n   */\n  derivedAddress(): HexString {\n    return HexString.fromUint8Array(this.bytes);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer } from \"../bcs\";\nimport { AccountAddress } from \"./account_address\";\n\nexport class RotationProofChallenge {\n  constructor(\n    public readonly accountAddress: AccountAddress,\n    public readonly moduleName: string,\n    public readonly structName: string,\n    public readonly sequenceNumber: number | bigint,\n    public readonly originator: AccountAddress,\n    public readonly currentAuthKey: AccountAddress,\n    public readonly newPublicKey: Uint8Array,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    this.accountAddress.serialize(serializer);\n    serializer.serializeStr(this.moduleName);\n    serializer.serializeStr(this.structName);\n    serializer.serializeU64(this.sequenceNumber);\n    this.originator.serialize(serializer);\n    this.currentAuthKey.serialize(serializer);\n    serializer.serializeBytes(this.newPublicKey);\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport { AptosGeneratedClient } from './AptosGeneratedClient';\n\nexport { ApiError } from './core/ApiError';\nexport { BaseHttpRequest } from './core/BaseHttpRequest';\nexport { CancelablePromise, CancelError } from './core/CancelablePromise';\nexport { OpenAPI } from './core/OpenAPI';\nexport type { OpenAPIConfig } from './core/OpenAPI';\n\nexport type { AccountData } from './models/AccountData';\nexport type { AccountSignature } from './models/AccountSignature';\nexport type { AccountSignature_Ed25519Signature } from './models/AccountSignature_Ed25519Signature';\nexport type { AccountSignature_MultiEd25519Signature } from './models/AccountSignature_MultiEd25519Signature';\nexport type { Address } from './models/Address';\nexport type { AptosError } from './models/AptosError';\nexport { AptosErrorCode } from './models/AptosErrorCode';\nexport type { Block } from './models/Block';\nexport type { BlockMetadataTransaction } from './models/BlockMetadataTransaction';\nexport type { DecodedTableData } from './models/DecodedTableData';\nexport type { DeletedTableData } from './models/DeletedTableData';\nexport type { DeleteModule } from './models/DeleteModule';\nexport type { DeleteResource } from './models/DeleteResource';\nexport type { DeleteTableItem } from './models/DeleteTableItem';\nexport type { DirectWriteSet } from './models/DirectWriteSet';\nexport type { Ed25519Signature } from './models/Ed25519Signature';\nexport type { EncodeSubmissionRequest } from './models/EncodeSubmissionRequest';\nexport type { EntryFunctionId } from './models/EntryFunctionId';\nexport type { EntryFunctionPayload } from './models/EntryFunctionPayload';\nexport type { Event } from './models/Event';\nexport type { EventGuid } from './models/EventGuid';\nexport type { GasEstimation } from './models/GasEstimation';\nexport type { GenesisPayload } from './models/GenesisPayload';\nexport type { GenesisPayload_WriteSetPayload } from './models/GenesisPayload_WriteSetPayload';\nexport type { GenesisTransaction } from './models/GenesisTransaction';\nexport type { HashValue } from './models/HashValue';\nexport type { HealthCheckSuccess } from './models/HealthCheckSuccess';\nexport type { HexEncodedBytes } from './models/HexEncodedBytes';\nexport type { IdentifierWrapper } from './models/IdentifierWrapper';\nexport type { IndexResponse } from './models/IndexResponse';\nexport type { ModuleBundlePayload } from './models/ModuleBundlePayload';\nexport type { MoveAbility } from './models/MoveAbility';\nexport type { MoveFunction } from './models/MoveFunction';\nexport type { MoveFunctionGenericTypeParam } from './models/MoveFunctionGenericTypeParam';\nexport { MoveFunctionVisibility } from './models/MoveFunctionVisibility';\nexport type { MoveModule } from './models/MoveModule';\nexport type { MoveModuleBytecode } from './models/MoveModuleBytecode';\nexport type { MoveModuleId } from './models/MoveModuleId';\nexport type { MoveResource } from './models/MoveResource';\nexport type { MoveScriptBytecode } from './models/MoveScriptBytecode';\nexport type { MoveStruct } from './models/MoveStruct';\nexport type { MoveStructField } from './models/MoveStructField';\nexport type { MoveStructGenericTypeParam } from './models/MoveStructGenericTypeParam';\nexport type { MoveStructTag } from './models/MoveStructTag';\nexport type { MoveStructValue } from './models/MoveStructValue';\nexport type { MoveType } from './models/MoveType';\nexport type { MoveValue } from './models/MoveValue';\nexport type { MultiAgentSignature } from './models/MultiAgentSignature';\nexport type { MultiEd25519Signature } from './models/MultiEd25519Signature';\nexport type { PendingTransaction } from './models/PendingTransaction';\nexport type { RawTableItemRequest } from './models/RawTableItemRequest';\nexport { RoleType } from './models/RoleType';\nexport type { ScriptPayload } from './models/ScriptPayload';\nexport type { ScriptWriteSet } from './models/ScriptWriteSet';\nexport type { StateCheckpointTransaction } from './models/StateCheckpointTransaction';\nexport type { StateKeyWrapper } from './models/StateKeyWrapper';\nexport type { SubmitTransactionRequest } from './models/SubmitTransactionRequest';\nexport type { TableItemRequest } from './models/TableItemRequest';\nexport type { Transaction } from './models/Transaction';\nexport type { Transaction_BlockMetadataTransaction } from './models/Transaction_BlockMetadataTransaction';\nexport type { Transaction_GenesisTransaction } from './models/Transaction_GenesisTransaction';\nexport type { Transaction_PendingTransaction } from './models/Transaction_PendingTransaction';\nexport type { Transaction_StateCheckpointTransaction } from './models/Transaction_StateCheckpointTransaction';\nexport type { Transaction_UserTransaction } from './models/Transaction_UserTransaction';\nexport type { TransactionPayload } from './models/TransactionPayload';\nexport type { TransactionPayload_EntryFunctionPayload } from './models/TransactionPayload_EntryFunctionPayload';\nexport type { TransactionPayload_ModuleBundlePayload } from './models/TransactionPayload_ModuleBundlePayload';\nexport type { TransactionPayload_ScriptPayload } from './models/TransactionPayload_ScriptPayload';\nexport type { TransactionsBatchSingleSubmissionFailure } from './models/TransactionsBatchSingleSubmissionFailure';\nexport type { TransactionsBatchSubmissionResult } from './models/TransactionsBatchSubmissionResult';\nexport type { TransactionSignature } from './models/TransactionSignature';\nexport type { TransactionSignature_Ed25519Signature } from './models/TransactionSignature_Ed25519Signature';\nexport type { TransactionSignature_MultiAgentSignature } from './models/TransactionSignature_MultiAgentSignature';\nexport type { TransactionSignature_MultiEd25519Signature } from './models/TransactionSignature_MultiEd25519Signature';\nexport type { U128 } from './models/U128';\nexport type { U256 } from './models/U256';\nexport type { U64 } from './models/U64';\nexport type { UserTransaction } from './models/UserTransaction';\nexport type { VersionedEvent } from './models/VersionedEvent';\nexport type { ViewRequest } from './models/ViewRequest';\nexport type { WriteModule } from './models/WriteModule';\nexport type { WriteResource } from './models/WriteResource';\nexport type { WriteSet } from './models/WriteSet';\nexport type { WriteSet_DirectWriteSet } from './models/WriteSet_DirectWriteSet';\nexport type { WriteSet_ScriptWriteSet } from './models/WriteSet_ScriptWriteSet';\nexport type { WriteSetChange } from './models/WriteSetChange';\nexport type { WriteSetChange_DeleteModule } from './models/WriteSetChange_DeleteModule';\nexport type { WriteSetChange_DeleteResource } from './models/WriteSetChange_DeleteResource';\nexport type { WriteSetChange_DeleteTableItem } from './models/WriteSetChange_DeleteTableItem';\nexport type { WriteSetChange_WriteModule } from './models/WriteSetChange_WriteModule';\nexport type { WriteSetChange_WriteResource } from './models/WriteSetChange_WriteResource';\nexport type { WriteSetChange_WriteTableItem } from './models/WriteSetChange_WriteTableItem';\nexport type { WriteSetPayload } from './models/WriteSetPayload';\nexport type { WriteTableItem } from './models/WriteTableItem';\n\nexport { $AccountData } from './schemas/$AccountData';\nexport { $AccountSignature } from './schemas/$AccountSignature';\nexport { $AccountSignature_Ed25519Signature } from './schemas/$AccountSignature_Ed25519Signature';\nexport { $AccountSignature_MultiEd25519Signature } from './schemas/$AccountSignature_MultiEd25519Signature';\nexport { $Address } from './schemas/$Address';\nexport { $AptosError } from './schemas/$AptosError';\nexport { $AptosErrorCode } from './schemas/$AptosErrorCode';\nexport { $Block } from './schemas/$Block';\nexport { $BlockMetadataTransaction } from './schemas/$BlockMetadataTransaction';\nexport { $DecodedTableData } from './schemas/$DecodedTableData';\nexport { $DeletedTableData } from './schemas/$DeletedTableData';\nexport { $DeleteModule } from './schemas/$DeleteModule';\nexport { $DeleteResource } from './schemas/$DeleteResource';\nexport { $DeleteTableItem } from './schemas/$DeleteTableItem';\nexport { $DirectWriteSet } from './schemas/$DirectWriteSet';\nexport { $Ed25519Signature } from './schemas/$Ed25519Signature';\nexport { $EncodeSubmissionRequest } from './schemas/$EncodeSubmissionRequest';\nexport { $EntryFunctionId } from './schemas/$EntryFunctionId';\nexport { $EntryFunctionPayload } from './schemas/$EntryFunctionPayload';\nexport { $Event } from './schemas/$Event';\nexport { $EventGuid } from './schemas/$EventGuid';\nexport { $GasEstimation } from './schemas/$GasEstimation';\nexport { $GenesisPayload } from './schemas/$GenesisPayload';\nexport { $GenesisPayload_WriteSetPayload } from './schemas/$GenesisPayload_WriteSetPayload';\nexport { $GenesisTransaction } from './schemas/$GenesisTransaction';\nexport { $HashValue } from './schemas/$HashValue';\nexport { $HealthCheckSuccess } from './schemas/$HealthCheckSuccess';\nexport { $HexEncodedBytes } from './schemas/$HexEncodedBytes';\nexport { $IdentifierWrapper } from './schemas/$IdentifierWrapper';\nexport { $IndexResponse } from './schemas/$IndexResponse';\nexport { $ModuleBundlePayload } from './schemas/$ModuleBundlePayload';\nexport { $MoveAbility } from './schemas/$MoveAbility';\nexport { $MoveFunction } from './schemas/$MoveFunction';\nexport { $MoveFunctionGenericTypeParam } from './schemas/$MoveFunctionGenericTypeParam';\nexport { $MoveFunctionVisibility } from './schemas/$MoveFunctionVisibility';\nexport { $MoveModule } from './schemas/$MoveModule';\nexport { $MoveModuleBytecode } from './schemas/$MoveModuleBytecode';\nexport { $MoveModuleId } from './schemas/$MoveModuleId';\nexport { $MoveResource } from './schemas/$MoveResource';\nexport { $MoveScriptBytecode } from './schemas/$MoveScriptBytecode';\nexport { $MoveStruct } from './schemas/$MoveStruct';\nexport { $MoveStructField } from './schemas/$MoveStructField';\nexport { $MoveStructGenericTypeParam } from './schemas/$MoveStructGenericTypeParam';\nexport { $MoveStructTag } from './schemas/$MoveStructTag';\nexport { $MoveStructValue } from './schemas/$MoveStructValue';\nexport { $MoveType } from './schemas/$MoveType';\nexport { $MoveValue } from './schemas/$MoveValue';\nexport { $MultiAgentSignature } from './schemas/$MultiAgentSignature';\nexport { $MultiEd25519Signature } from './schemas/$MultiEd25519Signature';\nexport { $PendingTransaction } from './schemas/$PendingTransaction';\nexport { $RawTableItemRequest } from './schemas/$RawTableItemRequest';\nexport { $RoleType } from './schemas/$RoleType';\nexport { $ScriptPayload } from './schemas/$ScriptPayload';\nexport { $ScriptWriteSet } from './schemas/$ScriptWriteSet';\nexport { $StateCheckpointTransaction } from './schemas/$StateCheckpointTransaction';\nexport { $StateKeyWrapper } from './schemas/$StateKeyWrapper';\nexport { $SubmitTransactionRequest } from './schemas/$SubmitTransactionRequest';\nexport { $TableItemRequest } from './schemas/$TableItemRequest';\nexport { $Transaction } from './schemas/$Transaction';\nexport { $Transaction_BlockMetadataTransaction } from './schemas/$Transaction_BlockMetadataTransaction';\nexport { $Transaction_GenesisTransaction } from './schemas/$Transaction_GenesisTransaction';\nexport { $Transaction_PendingTransaction } from './schemas/$Transaction_PendingTransaction';\nexport { $Transaction_StateCheckpointTransaction } from './schemas/$Transaction_StateCheckpointTransaction';\nexport { $Transaction_UserTransaction } from './schemas/$Transaction_UserTransaction';\nexport { $TransactionPayload } from './schemas/$TransactionPayload';\nexport { $TransactionPayload_EntryFunctionPayload } from './schemas/$TransactionPayload_EntryFunctionPayload';\nexport { $TransactionPayload_ModuleBundlePayload } from './schemas/$TransactionPayload_ModuleBundlePayload';\nexport { $TransactionPayload_ScriptPayload } from './schemas/$TransactionPayload_ScriptPayload';\nexport { $TransactionsBatchSingleSubmissionFailure } from './schemas/$TransactionsBatchSingleSubmissionFailure';\nexport { $TransactionsBatchSubmissionResult } from './schemas/$TransactionsBatchSubmissionResult';\nexport { $TransactionSignature } from './schemas/$TransactionSignature';\nexport { $TransactionSignature_Ed25519Signature } from './schemas/$TransactionSignature_Ed25519Signature';\nexport { $TransactionSignature_MultiAgentSignature } from './schemas/$TransactionSignature_MultiAgentSignature';\nexport { $TransactionSignature_MultiEd25519Signature } from './schemas/$TransactionSignature_MultiEd25519Signature';\nexport { $U128 } from './schemas/$U128';\nexport { $U256 } from './schemas/$U256';\nexport { $U64 } from './schemas/$U64';\nexport { $UserTransaction } from './schemas/$UserTransaction';\nexport { $VersionedEvent } from './schemas/$VersionedEvent';\nexport { $ViewRequest } from './schemas/$ViewRequest';\nexport { $WriteModule } from './schemas/$WriteModule';\nexport { $WriteResource } from './schemas/$WriteResource';\nexport { $WriteSet } from './schemas/$WriteSet';\nexport { $WriteSet_DirectWriteSet } from './schemas/$WriteSet_DirectWriteSet';\nexport { $WriteSet_ScriptWriteSet } from './schemas/$WriteSet_ScriptWriteSet';\nexport { $WriteSetChange } from './schemas/$WriteSetChange';\nexport { $WriteSetChange_DeleteModule } from './schemas/$WriteSetChange_DeleteModule';\nexport { $WriteSetChange_DeleteResource } from './schemas/$WriteSetChange_DeleteResource';\nexport { $WriteSetChange_DeleteTableItem } from './schemas/$WriteSetChange_DeleteTableItem';\nexport { $WriteSetChange_WriteModule } from './schemas/$WriteSetChange_WriteModule';\nexport { $WriteSetChange_WriteResource } from './schemas/$WriteSetChange_WriteResource';\nexport { $WriteSetChange_WriteTableItem } from './schemas/$WriteSetChange_WriteTableItem';\nexport { $WriteSetPayload } from './schemas/$WriteSetPayload';\nexport { $WriteTableItem } from './schemas/$WriteTableItem';\n\nexport { AccountsService } from './services/AccountsService';\nexport { BlocksService } from './services/BlocksService';\nexport { EventsService } from './services/EventsService';\nexport { GeneralService } from './services/GeneralService';\nexport { TablesService } from './services/TablesService';\nexport { TransactionsService } from './services/TransactionsService';\nexport { ViewService } from './services/ViewService';\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport abstract class BaseHttpRequest {\n\n    constructor(public readonly config: OpenAPIConfig) {}\n\n    public abstract request<T>(options: ApiRequestOptions): CancelablePromise<T>;\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport axios from 'axios';\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport FormData from 'form-data';\n\nimport { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\ninterface Cookie {\n  name: string;\n  value: string;\n  expires?: Date;\n  path?: string;\n  sameSite?: \"Lax\" | \"None\" | \"Strict\";\n  secure?: boolean;\n}\n\nclass CookieJar {\n  constructor(private jar = new Map<string, Cookie[]>()) {}\n\n  setCookie(url: URL, cookieStr: string) {\n    const key = url.origin.toLowerCase();\n    if (!this.jar.has(key)) {\n      this.jar.set(key, []);\n    }\n\n    const cookie = CookieJar.parse(cookieStr);\n    this.jar.set(key, [...(this.jar.get(key)?.filter((c) => c.name !== cookie.name) || []), cookie]);\n  }\n\n  getCookies(url: URL): Cookie[] {\n    const key = url.origin.toLowerCase();\n    if (!this.jar.get(key)) {\n      return [];\n    }\n\n    // Filter out expired cookies\n    return this.jar.get(key)?.filter((cookie) => !cookie.expires || cookie.expires > new Date()) || [];\n  }\n\n  static parse(str: string): Cookie {\n    if (typeof str !== \"string\") {\n      throw new Error(\"argument str must be a string\");\n    }\n\n    const parts = str.split(\";\").map((part) => part.trim());\n\n    let cookie: Cookie;\n\n    if (parts.length > 0) {\n      const [name, value] = parts[0].split(\"=\");\n      if (!name || !value) {\n        throw new Error(\"Invalid cookie\");\n      }\n\n      cookie = {\n        name,\n        value,\n      };\n    } else {\n      throw new Error(\"Invalid cookie\");\n    }\n\n    parts.slice(1).forEach((part) => {\n      const [name, value] = part.split(\"=\");\n      if (!name.trim()) {\n        throw new Error(\"Invalid cookie\");\n      }\n\n      const nameLow = name.toLowerCase();\n      // eslint-disable-next-line quotes\n      const val = value?.charAt(0) === \"'\" || value?.charAt(0) === '\"' ? value?.slice(1, -1) : value;\n      if (nameLow === \"expires\") {\n        cookie.expires = new Date(val);\n      }\n      if (nameLow === \"path\") {\n        cookie.path = val;\n      }\n      if (nameLow === \"samesite\") {\n        if (val !== \"Lax\" && val !== \"None\" && val !== \"Strict\") {\n          throw new Error(\"Invalid cookie SameSite value\");\n        }\n        cookie.sameSite = val;\n      }\n      if (nameLow === \"secure\") {\n        cookie.secure = true;\n      }\n    });\n\n    return cookie;\n  }\n}\n\nconst jar = new CookieJar();\n\naxios.interceptors.response.use((response) => {\n  if (Array.isArray(response.headers[\"set-cookie\"])) {\n    response.headers[\"set-cookie\"].forEach((c) => {\n      jar.setCookie(new URL(response.config.url!), c);\n    });\n  }\n  return response;\n});\n\naxios.interceptors.request.use(function (config) {\n  const cookies = jar.getCookies(new URL(config.url!));\n\n  if (cookies?.length > 0 && config.headers) {\n    config.headers.cookie = cookies.map((cookie) => `${cookie.name}=${cookie.value}`).join(\"; \");\n  }\n  return config;\n});\n\nconst isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\n    return value !== undefined && value !== null;\n};\n\nconst isString = (value: any): value is string => {\n    return typeof value === 'string';\n};\n\nconst isStringWithValue = (value: any): value is string => {\n    return isString(value) && value !== '';\n};\n\nconst isBlob = (value: any): value is Blob => {\n    return (\n        typeof value === 'object' &&\n        typeof value.type === 'string' &&\n        typeof value.stream === 'function' &&\n        typeof value.arrayBuffer === 'function' &&\n        typeof value.constructor === 'function' &&\n        typeof value.constructor.name === 'string' &&\n        /^(Blob|File)$/.test(value.constructor.name) &&\n        /^(Blob|File)$/.test(value[Symbol.toStringTag])\n    );\n};\n\nconst isFormData = (value: any): value is FormData => {\n    return value instanceof FormData;\n};\n\nconst isSuccess = (status: number): boolean => {\n    return status >= 200 && status < 300;\n};\n\nconst base64 = (str: string): string => { return btoa(str); };\n\nconst getQueryString = (params: Record<string, any>): string => {\n    const qs: string[] = [];\n\n    const append = (key: string, value: any) => {\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n\n    const process = (key: string, value: any) => {\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach(v => {\n                    process(key, v);\n                });\n            } else if (typeof value === 'object') {\n                Object.entries(value).forEach(([k, v]) => {\n                    process(`${key}[${k}]`, v);\n                });\n            } else {\n                append(key, value);\n            }\n        }\n    };\n\n    Object.entries(params).forEach(([key, value]) => {\n        process(key, value);\n    });\n\n    if (qs.length > 0) {\n        return `?${qs.join('&')}`;\n    }\n\n    return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n    const encoder = config.ENCODE_PATH || encodeURI;\n\n    const path = options.url\n        .replace('{api-version}', config.VERSION)\n        .replace(/{(.*?)}/g, (substring: string, group: string) => {\n            if (options.path?.hasOwnProperty(group)) {\n                return encoder(String(options.path[group]));\n            }\n            return substring;\n        });\n\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n    if (options.formData) {\n        const formData = new FormData();\n\n        const process = (key: string, value: any) => {\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            } else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n\n        Object.entries(options.formData)\n            .filter(([_, value]) => isDefined(value))\n            .forEach(([key, value]) => {\n                if (Array.isArray(value)) {\n                    value.forEach(v => process(key, v));\n                } else {\n                    process(key, value);\n                }\n            });\n\n        return formData;\n    }\n    return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nconst resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n    if (typeof resolver === 'function') {\n        return (resolver as Resolver<T>)(options);\n    }\n    return resolver;\n};\n\nconst getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions, formData?: FormData): Promise<Record<string, string>> => {\n    const token = await resolve(options, config.TOKEN);\n    const username = await resolve(options, config.USERNAME);\n    const password = await resolve(options, config.PASSWORD);\n    const additionalHeaders = await resolve(options, config.HEADERS);\n    const formHeaders = typeof formData?.getHeaders === 'function' && formData?.getHeaders() || {}\n\n    const headers = Object.entries({\n        Accept: 'application/json',\n        ...additionalHeaders,\n        ...options.headers,\n        ...formHeaders,\n    })\n    .filter(([_, value]) => isDefined(value))\n    .reduce((headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n    }), {} as Record<string, string>);\n\n    if (isStringWithValue(token)) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers['Authorization'] = `Basic ${credentials}`;\n    }\n\n    if (options.body) {\n        if (options.mediaType) {\n            headers['Content-Type'] = options.mediaType;\n        } else if (isBlob(options.body)) {\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\n        } else if (isString(options.body)) {\n            headers['Content-Type'] = 'text/plain';\n        } else if (!isFormData(options.body)) {\n            headers['Content-Type'] = 'application/json';\n        }\n    }\n\n    return headers;\n};\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n    if (options.body) {\n        return options.body;\n    }\n    return undefined;\n};\n\nconst sendRequest = async <T>(\n    config: OpenAPIConfig,\n    options: ApiRequestOptions,\n    url: string,\n    body: any,\n    formData: FormData | undefined,\n    headers: Record<string, string>,\n    onCancel: OnCancel\n): Promise<AxiosResponse<T>> => {\n    const source = axios.CancelToken.source();\n\n    const requestConfig: AxiosRequestConfig = {\n        url,\n        headers,\n        data: body ?? formData,\n        method: options.method,\n        withCredentials: config.WITH_CREDENTIALS,\n        cancelToken: source.token,\n    };\n\n    const isBCS = Object.keys(config.HEADERS || {})\n    .filter((k) => k.toLowerCase() === \"accept\")\n    .map((k) => (config.HEADERS as Record<string, string>)[k])\n    .includes(\"application/x-bcs\");\n  if (isBCS) {\n    requestConfig.responseType = \"arraybuffer\";\n  }\n\n    onCancel(() => source.cancel('The user aborted a request.'));\n\n    try {\n        return await axios.request(requestConfig);\n    } catch (error) {\n        const axiosError = error as AxiosError<T>;\n        if (axiosError.response) {\n            return axiosError.response;\n        }\n        throw error;\n    }\n};\n\nconst getResponseHeader = (response: AxiosResponse<any>, responseHeader?: string): string | undefined => {\n    if (responseHeader) {\n        const content = response.headers[responseHeader];\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\n\nconst getResponseBody = (response: AxiosResponse<any>): any => {\n    if (response.status !== 204) {\n        return response.data;\n    }\n    return undefined;\n};\n\nconst catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n    const errors: Record<number, string> = {\n        400: 'Bad Request',\n        401: 'Unauthorized',\n        403: 'Forbidden',\n        404: 'Not Found',\n        429: 'Too Many Requests',\n        500: 'Internal Server Error',\n        502: 'Bad Gateway',\n        503: 'Service Unavailable',\n        ...options.errors,\n    }\n\n    const error = errors[result.status];\n    if (error) {\n        throw new ApiError(options, result, error);\n    }\n\n    if (!result.ok) {\n        throw new ApiError(options, result, 'Generic Error');\n    }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options, formData);\n\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest<T>(config, options, url, body, formData, headers, onCancel);\n                const responseBody = getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n\n                const result: ApiResult = {\n                    url,\n                    ok: isSuccess(response.status),\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody,\n                };\n\n                catchErrorCodes(options, result);\n\n                // Attach the response headers to the output. This is a hack to fix\n                // https://github.com/ferdikoomen/openapi-typescript-codegen/issues/1295\n                const out = result.body;\n                try {\n                    out[\"__headers\"] = response.headers;\n                } catch (_) {}\n\n                resolve(out);\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n    public readonly url: string;\n    public readonly status: number;\n    public readonly statusText: string;\n    public readonly body: any;\n    public readonly request: ApiRequestOptions;\n\n    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n        super(message);\n\n        this.name = 'ApiError';\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n    constructor(message: string) {\n        super(message);\n        this.name = 'CancelError';\n    }\n\n    public get isCancelled(): boolean {\n        return true;\n    }\n}\n\nexport interface OnCancel {\n    readonly isResolved: boolean;\n    readonly isRejected: boolean;\n    readonly isCancelled: boolean;\n\n    (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n    readonly [Symbol.toStringTag]!: string;\n\n    private _isResolved: boolean;\n    private _isRejected: boolean;\n    private _isCancelled: boolean;\n    private readonly _cancelHandlers: (() => void)[];\n    private readonly _promise: Promise<T>;\n    private _resolve?: (value: T | PromiseLike<T>) => void;\n    private _reject?: (reason?: any) => void;\n\n    constructor(\n        executor: (\n            resolve: (value: T | PromiseLike<T>) => void,\n            reject: (reason?: any) => void,\n            onCancel: OnCancel\n        ) => void\n    ) {\n        this._isResolved = false;\n        this._isRejected = false;\n        this._isCancelled = false;\n        this._cancelHandlers = [];\n        this._promise = new Promise<T>((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n\n            const onResolve = (value: T | PromiseLike<T>): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isResolved = true;\n                this._resolve?.(value);\n            };\n\n            const onReject = (reason?: any): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isRejected = true;\n                this._reject?.(reason);\n            };\n\n            const onCancel = (cancelHandler: () => void): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._cancelHandlers.push(cancelHandler);\n            };\n\n            Object.defineProperty(onCancel, 'isResolved', {\n                get: (): boolean => this._isResolved,\n            });\n\n            Object.defineProperty(onCancel, 'isRejected', {\n                get: (): boolean => this._isRejected,\n            });\n\n            Object.defineProperty(onCancel, 'isCancelled', {\n                get: (): boolean => this._isCancelled,\n            });\n\n            return executor(onResolve, onReject, onCancel as OnCancel);\n        });\n    }\n\n    public then<TResult1 = T, TResult2 = never>(\n        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n    ): Promise<TResult1 | TResult2> {\n        return this._promise.then(onFulfilled, onRejected);\n    }\n\n    public catch<TResult = never>(\n        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n    ): Promise<T | TResult> {\n        return this._promise.catch(onRejected);\n    }\n\n    public finally(onFinally?: (() => void) | null): Promise<T> {\n        return this._promise.finally(onFinally);\n    }\n\n    public cancel(): void {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n            return;\n        }\n        this._isCancelled = true;\n        if (this._cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this._cancelHandlers) {\n                    cancelHandler();\n                }\n            } catch (error) {\n                console.warn('Cancellation threw an error', error);\n                return;\n            }\n        }\n        this._cancelHandlers.length = 0;\n        this._reject?.(new CancelError('Request aborted'));\n    }\n\n    public get isCancelled(): boolean {\n        return this._isCancelled;\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport { BaseHttpRequest } from './BaseHttpRequest';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\nimport { request as __request } from './request';\n\nexport class AxiosHttpRequest extends BaseHttpRequest {\n\n    constructor(config: OpenAPIConfig) {\n        super(config);\n    }\n\n    /**\n     * Request method\n     * @param options The request options from the service\n     * @returns CancelablePromise<T>\n     * @throws ApiError\n     */\n    public request<T>(options: ApiRequestOptions): CancelablePromise<T> {\n        return __request(this.config, options);\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AccountData } from '../models/AccountData';\nimport type { Address } from '../models/Address';\nimport type { IdentifierWrapper } from '../models/IdentifierWrapper';\nimport type { MoveModuleBytecode } from '../models/MoveModuleBytecode';\nimport type { MoveResource } from '../models/MoveResource';\nimport type { MoveStructTag } from '../models/MoveStructTag';\nimport type { StateKeyWrapper } from '../models/StateKeyWrapper';\nimport type { U64 } from '../models/U64';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class AccountsService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get account\n     * Return the authentication key and the sequence number for an account\n     * address. Optionally, a ledger version can be specified. If the ledger\n     * version is not specified in the request, the latest ledger version is used.\n     * @param address Address of account with or without a `0x` prefix\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns AccountData\n     * @throws ApiError\n     */\n    public getAccount(\n        address: Address,\n        ledgerVersion?: U64,\n    ): CancelablePromise<AccountData> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}',\n            path: {\n                'address': address,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n        });\n    }\n\n    /**\n     * Get account resources\n     * Retrieves all account resources for a given account and a specific ledger version.  If the\n     * ledger version is not specified in the request, the latest ledger version is used.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param address Address of account with or without a `0x` prefix\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @param start Cursor specifying where to start for pagination\n     *\n     * This cursor cannot be derived manually client-side. Instead, you must\n     * call this endpoint once without this query parameter specified, and\n     * then use the cursor returned in the X-Aptos-Cursor header in the\n     * response.\n     * @param limit Max number of account resources to retrieve\n     *\n     * If not provided, defaults to default page size.\n     * @returns MoveResource\n     * @throws ApiError\n     */\n    public getAccountResources(\n        address: Address,\n        ledgerVersion?: U64,\n        start?: StateKeyWrapper,\n        limit?: number,\n    ): CancelablePromise<Array<MoveResource>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/resources',\n            path: {\n                'address': address,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Get account modules\n     * Retrieves all account modules' bytecode for a given account at a specific ledger version.\n     * If the ledger version is not specified in the request, the latest ledger version is used.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param address Address of account with or without a `0x` prefix\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @param start Cursor specifying where to start for pagination\n     *\n     * This cursor cannot be derived manually client-side. Instead, you must\n     * call this endpoint once without this query parameter specified, and\n     * then use the cursor returned in the X-Aptos-Cursor header in the\n     * response.\n     * @param limit Max number of account modules to retrieve\n     *\n     * If not provided, defaults to default page size.\n     * @returns MoveModuleBytecode\n     * @throws ApiError\n     */\n    public getAccountModules(\n        address: Address,\n        ledgerVersion?: U64,\n        start?: StateKeyWrapper,\n        limit?: number,\n    ): CancelablePromise<Array<MoveModuleBytecode>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/modules',\n            path: {\n                'address': address,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Get account resource\n     * Retrieves an individual resource from a given account and at a specific ledger version. If the\n     * ledger version is not specified in the request, the latest ledger version is used.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param address Address of account with or without a `0x` prefix\n     * @param resourceType Name of struct to retrieve e.g. `0x1::account::Account`\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveResource\n     * @throws ApiError\n     */\n    public getAccountResource(\n        address: Address,\n        resourceType: MoveStructTag,\n        ledgerVersion?: U64,\n    ): CancelablePromise<MoveResource> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/resource/{resource_type}',\n            path: {\n                'address': address,\n                'resource_type': resourceType,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n        });\n    }\n\n    /**\n     * Get account module\n     * Retrieves an individual module from a given account and at a specific ledger version. If the\n     * ledger version is not specified in the request, the latest ledger version is used.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param address Address of account with or without a `0x` prefix\n     * @param moduleName Name of module to retrieve e.g. `coin`\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveModuleBytecode\n     * @throws ApiError\n     */\n    public getAccountModule(\n        address: Address,\n        moduleName: IdentifierWrapper,\n        ledgerVersion?: U64,\n    ): CancelablePromise<MoveModuleBytecode> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/module/{module_name}',\n            path: {\n                'address': address,\n                'module_name': moduleName,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Block } from '../models/Block';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class BlocksService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get blocks by height\n     * This endpoint allows you to get the transactions in a block\n     * and the corresponding block information.\n     *\n     * Transactions are limited by max default transactions size.  If not all transactions\n     * are present, the user will need to query for the rest of the transactions via the\n     * get transactions API.\n     *\n     * If the block is pruned, it will return a 410\n     * @param blockHeight Block height to lookup.  Starts at 0\n     * @param withTransactions If set to true, include all transactions in the block\n     *\n     * If not provided, no transactions will be retrieved\n     * @returns Block\n     * @throws ApiError\n     */\n    public getBlockByHeight(\n        blockHeight: number,\n        withTransactions?: boolean,\n    ): CancelablePromise<Block> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/blocks/by_height/{block_height}',\n            path: {\n                'block_height': blockHeight,\n            },\n            query: {\n                'with_transactions': withTransactions,\n            },\n        });\n    }\n\n    /**\n     * Get blocks by version\n     * This endpoint allows you to get the transactions in a block\n     * and the corresponding block information given a version in the block.\n     *\n     * Transactions are limited by max default transactions size.  If not all transactions\n     * are present, the user will need to query for the rest of the transactions via the\n     * get transactions API.\n     *\n     * If the block has been pruned, it will return a 410\n     * @param version Ledger version to lookup block information for.\n     * @param withTransactions If set to true, include all transactions in the block\n     *\n     * If not provided, no transactions will be retrieved\n     * @returns Block\n     * @throws ApiError\n     */\n    public getBlockByVersion(\n        version: number,\n        withTransactions?: boolean,\n    ): CancelablePromise<Block> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/blocks/by_version/{version}',\n            path: {\n                'version': version,\n            },\n            query: {\n                'with_transactions': withTransactions,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Address } from '../models/Address';\nimport type { IdentifierWrapper } from '../models/IdentifierWrapper';\nimport type { MoveStructTag } from '../models/MoveStructTag';\nimport type { U64 } from '../models/U64';\nimport type { VersionedEvent } from '../models/VersionedEvent';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class EventsService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get events by creation number\n     * Event types are globally identifiable by an account `address` and\n     * monotonically increasing `creation_number`, one per event type emitted\n     * to the given account. This API returns events corresponding to that\n     * that event type.\n     * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix, for\n     * which events are queried. This refers to the account that events were\n     * emitted to, not the account hosting the move module that emits that\n     * event type.\n     * @param creationNumber Creation number corresponding to the event stream originating\n     * from the given account.\n     * @param start Starting sequence number of events.\n     *\n     * If unspecified, by default will retrieve the most recent events\n     * @param limit Max number of events to retrieve.\n     *\n     * If unspecified, defaults to default page size\n     * @returns VersionedEvent\n     * @throws ApiError\n     */\n    public getEventsByCreationNumber(\n        address: Address,\n        creationNumber: U64,\n        start?: U64,\n        limit?: number,\n    ): CancelablePromise<Array<VersionedEvent>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/events/{creation_number}',\n            path: {\n                'address': address,\n                'creation_number': creationNumber,\n            },\n            query: {\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Get events by event handle\n     * This API uses the given account `address`, `eventHandle`, and `fieldName`\n     * to build a key that can globally identify an event types. It then uses this\n     * key to return events emitted to the given account matching that event type.\n     * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix, for\n     * which events are queried. This refers to the account that events were\n     * emitted to, not the account hosting the move module that emits that\n     * event type.\n     * @param eventHandle Name of struct to lookup event handle e.g. `0x1::account::Account`\n     * @param fieldName Name of field to lookup event handle e.g. `withdraw_events`\n     * @param start Starting sequence number of events.\n     *\n     * If unspecified, by default will retrieve the most recent\n     * @param limit Max number of events to retrieve.\n     *\n     * If unspecified, defaults to default page size\n     * @returns VersionedEvent\n     * @throws ApiError\n     */\n    public getEventsByEventHandle(\n        address: Address,\n        eventHandle: MoveStructTag,\n        fieldName: IdentifierWrapper,\n        start?: U64,\n        limit?: number,\n    ): CancelablePromise<Array<VersionedEvent>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/events/{event_handle}/{field_name}',\n            path: {\n                'address': address,\n                'event_handle': eventHandle,\n                'field_name': fieldName,\n            },\n            query: {\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { HealthCheckSuccess } from '../models/HealthCheckSuccess';\nimport type { IndexResponse } from '../models/IndexResponse';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class GeneralService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Show OpenAPI explorer\n     * Provides a UI that you can use to explore the API. You can also\n     * retrieve the API directly at `/spec.yaml` and `/spec.json`.\n     * @returns string\n     * @throws ApiError\n     */\n    public spec(): CancelablePromise<string> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/spec',\n        });\n    }\n\n    /**\n     * Check basic node health\n     * By default this endpoint just checks that it can get the latest ledger\n     * info and then returns 200.\n     *\n     * If the duration_secs param is provided, this endpoint will return a\n     * 200 if the following condition is true:\n     *\n     * `server_latest_ledger_info_timestamp >= server_current_time_timestamp - duration_secs`\n     * @param durationSecs Threshold in seconds that the server can be behind to be considered healthy\n     *\n     * If not provided, the healthcheck will always succeed\n     * @returns HealthCheckSuccess\n     * @throws ApiError\n     */\n    public healthy(\n        durationSecs?: number,\n    ): CancelablePromise<HealthCheckSuccess> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/-/healthy',\n            query: {\n                'duration_secs': durationSecs,\n            },\n        });\n    }\n\n    /**\n     * Get ledger info\n     * Get the latest ledger information, including data such as chain ID,\n     * role type, ledger versions, epoch, etc.\n     * @returns IndexResponse\n     * @throws ApiError\n     */\n    public getLedgerInfo(): CancelablePromise<IndexResponse> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Address } from '../models/Address';\nimport type { MoveValue } from '../models/MoveValue';\nimport type { RawTableItemRequest } from '../models/RawTableItemRequest';\nimport type { TableItemRequest } from '../models/TableItemRequest';\nimport type { U64 } from '../models/U64';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class TablesService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get table item\n     * Get a table item at a specific ledger version from the table identified by {table_handle}\n     * in the path and the \"key\" (TableItemRequest) provided in the request body.\n     *\n     * This is a POST endpoint because the \"key\" for requesting a specific\n     * table item (TableItemRequest) could be quite complex, as each of its\n     * fields could themselves be composed of other structs. This makes it\n     * impractical to express using query params, meaning GET isn't an option.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param tableHandle Table handle hex encoded 32-byte string\n     * @param requestBody\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveValue\n     * @throws ApiError\n     */\n    public getTableItem(\n        tableHandle: Address,\n        requestBody: TableItemRequest,\n        ledgerVersion?: U64,\n    ): CancelablePromise<MoveValue> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/tables/{table_handle}/item',\n            path: {\n                'table_handle': tableHandle,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Get raw table item\n     * Get a table item at a specific ledger version from the table identified by {table_handle}\n     * in the path and the \"key\" (RawTableItemRequest) provided in the request body.\n     *\n     * The `get_raw_table_item` requires only a serialized key comparing to the full move type information\n     * comparing to the `get_table_item` api, and can only return the query in the bcs format.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param tableHandle Table handle hex encoded 32-byte string\n     * @param requestBody\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveValue\n     * @throws ApiError\n     */\n    public getRawTableItem(\n        tableHandle: Address,\n        requestBody: RawTableItemRequest,\n        ledgerVersion?: U64,\n    ): CancelablePromise<MoveValue> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/tables/{table_handle}/raw_item',\n            path: {\n                'table_handle': tableHandle,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Address } from '../models/Address';\nimport type { EncodeSubmissionRequest } from '../models/EncodeSubmissionRequest';\nimport type { GasEstimation } from '../models/GasEstimation';\nimport type { HashValue } from '../models/HashValue';\nimport type { HexEncodedBytes } from '../models/HexEncodedBytes';\nimport type { PendingTransaction } from '../models/PendingTransaction';\nimport type { SubmitTransactionRequest } from '../models/SubmitTransactionRequest';\nimport type { Transaction } from '../models/Transaction';\nimport type { TransactionsBatchSubmissionResult } from '../models/TransactionsBatchSubmissionResult';\nimport type { U64 } from '../models/U64';\nimport type { UserTransaction } from '../models/UserTransaction';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class TransactionsService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get transactions\n     * Retrieve on-chain committed transactions. The page size and start ledger version\n     * can be provided to get a specific sequence of transactions.\n     *\n     * If the version has been pruned, then a 410 will be returned.\n     *\n     * To retrieve a pending transaction, use /transactions/by_hash.\n     * @param start Ledger version to start list of transactions\n     *\n     * If not provided, defaults to showing the latest transactions\n     * @param limit Max number of transactions to retrieve.\n     *\n     * If not provided, defaults to default page size\n     * @returns Transaction\n     * @throws ApiError\n     */\n    public getTransactions(\n        start?: U64,\n        limit?: number,\n    ): CancelablePromise<Array<Transaction>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/transactions',\n            query: {\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Submit transaction\n     * This endpoint accepts transaction submissions in two formats.\n     *\n     * To submit a transaction as JSON, you must submit a SubmitTransactionRequest.\n     * To build this request, do the following:\n     *\n     * 1. Encode the transaction as BCS. If you are using a language that has\n     * native BCS support, make sure of that library. If not, you may take\n     * advantage of /transactions/encode_submission. When using this\n     * endpoint, make sure you trust the node you're talking to, as it is\n     * possible they could manipulate your request.\n     * 2. Sign the encoded transaction and use it to create a TransactionSignature.\n     * 3. Submit the request. Make sure to use the \"application/json\" Content-Type.\n     *\n     * To submit a transaction as BCS, you must submit a SignedTransaction\n     * encoded as BCS. See SignedTransaction in types/src/transaction/mod.rs.\n     * Make sure to use the `application/x.aptos.signed_transaction+bcs` Content-Type.\n     * @param requestBody\n     * @returns PendingTransaction\n     * @throws ApiError\n     */\n    public submitTransaction(\n        requestBody: SubmitTransactionRequest,\n    ): CancelablePromise<PendingTransaction> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/transactions',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Get transaction by hash\n     * Look up a transaction by its hash. This is the same hash that is returned\n     * by the API when submitting a transaction (see PendingTransaction).\n     *\n     * When given a transaction hash, the server first looks for the transaction\n     * in storage (on-chain, committed). If no on-chain transaction is found, it\n     * looks the transaction up by hash in the mempool (pending, not yet committed).\n     *\n     * To create a transaction hash by yourself, do the following:\n     * 1. Hash message bytes: \"RawTransaction\" bytes + BCS bytes of [Transaction](https://aptos-labs.github.io/aptos-core/aptos_types/transaction/enum.Transaction.html).\n     * 2. Apply hash algorithm `SHA3-256` to the hash message bytes.\n     * 3. Hex-encode the hash bytes with `0x` prefix.\n     * @param txnHash Hash of transaction to retrieve\n     * @returns Transaction\n     * @throws ApiError\n     */\n    public getTransactionByHash(\n        txnHash: HashValue,\n    ): CancelablePromise<Transaction> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/transactions/by_hash/{txn_hash}',\n            path: {\n                'txn_hash': txnHash,\n            },\n        });\n    }\n\n    /**\n     * Get transaction by version\n     * Retrieves a transaction by a given version. If the version has been\n     * pruned, a 410 will be returned.\n     * @param txnVersion Version of transaction to retrieve\n     * @returns Transaction\n     * @throws ApiError\n     */\n    public getTransactionByVersion(\n        txnVersion: U64,\n    ): CancelablePromise<Transaction> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/transactions/by_version/{txn_version}',\n            path: {\n                'txn_version': txnVersion,\n            },\n        });\n    }\n\n    /**\n     * Get account transactions\n     * Retrieves on-chain committed transactions from an account. If the start\n     * version is too far in the past, a 410 will be returned.\n     *\n     * If no start version is given, it will start at version 0.\n     *\n     * To retrieve a pending transaction, use /transactions/by_hash.\n     * @param address Address of account with or without a `0x` prefix\n     * @param start Account sequence number to start list of transactions\n     *\n     * If not provided, defaults to showing the latest transactions\n     * @param limit Max number of transactions to retrieve.\n     *\n     * If not provided, defaults to default page size\n     * @returns Transaction\n     * @throws ApiError\n     */\n    public getAccountTransactions(\n        address: Address,\n        start?: U64,\n        limit?: number,\n    ): CancelablePromise<Array<Transaction>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/transactions',\n            path: {\n                'address': address,\n            },\n            query: {\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Submit batch transactions\n     * This allows you to submit multiple transactions.  The response has three outcomes:\n     *\n     * 1. All transactions succeed, and it will return a 202\n     * 2. Some transactions succeed, and it will return the failed transactions and a 206\n     * 3. No transactions succeed, and it will also return the failed transactions and a 206\n     *\n     * To submit a transaction as JSON, you must submit a SubmitTransactionRequest.\n     * To build this request, do the following:\n     *\n     * 1. Encode the transaction as BCS. If you are using a language that has\n     * native BCS support, make sure to use that library. If not, you may take\n     * advantage of /transactions/encode_submission. When using this\n     * endpoint, make sure you trust the node you're talking to, as it is\n     * possible they could manipulate your request.\n     * 2. Sign the encoded transaction and use it to create a TransactionSignature.\n     * 3. Submit the request. Make sure to use the \"application/json\" Content-Type.\n     *\n     * To submit a transaction as BCS, you must submit a SignedTransaction\n     * encoded as BCS. See SignedTransaction in types/src/transaction/mod.rs.\n     * Make sure to use the `application/x.aptos.signed_transaction+bcs` Content-Type.\n     * @param requestBody\n     * @returns TransactionsBatchSubmissionResult\n     * @throws ApiError\n     */\n    public submitBatchTransactions(\n        requestBody: Array<SubmitTransactionRequest>,\n    ): CancelablePromise<TransactionsBatchSubmissionResult> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/transactions/batch',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Simulate transaction\n     * The output of the transaction will have the exact transaction outputs and events that running\n     * an actual signed transaction would have.  However, it will not have the associated state\n     * hashes, as they are not updated in storage.  This can be used to estimate the maximum gas\n     * units for a submitted transaction.\n     *\n     * To use this, you must:\n     * - Create a SignedTransaction with a zero-padded signature.\n     * - Submit a SubmitTransactionRequest containing a UserTransactionRequest containing that signature.\n     *\n     * To use this endpoint with BCS, you must submit a SignedTransaction\n     * encoded as BCS. See SignedTransaction in types/src/transaction/mod.rs.\n     * @param requestBody\n     * @param estimateMaxGasAmount If set to true, the max gas value in the transaction will be ignored\n     * and the maximum possible gas will be used\n     * @param estimateGasUnitPrice If set to true, the gas unit price in the transaction will be ignored\n     * and the estimated value will be used\n     * @param estimatePrioritizedGasUnitPrice If set to true, the transaction will use a higher price than the original\n     * estimate.\n     * @returns UserTransaction\n     * @throws ApiError\n     */\n    public simulateTransaction(\n        requestBody: SubmitTransactionRequest,\n        estimateMaxGasAmount?: boolean,\n        estimateGasUnitPrice?: boolean,\n        estimatePrioritizedGasUnitPrice?: boolean,\n    ): CancelablePromise<Array<UserTransaction>> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/transactions/simulate',\n            query: {\n                'estimate_max_gas_amount': estimateMaxGasAmount,\n                'estimate_gas_unit_price': estimateGasUnitPrice,\n                'estimate_prioritized_gas_unit_price': estimatePrioritizedGasUnitPrice,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Encode submission\n     * This endpoint accepts an EncodeSubmissionRequest, which internally is a\n     * UserTransactionRequestInner (and optionally secondary signers) encoded\n     * as JSON, validates the request format, and then returns that request\n     * encoded in BCS. The client can then use this to create a transaction\n     * signature to be used in a SubmitTransactionRequest, which it then\n     * passes to the /transactions POST endpoint.\n     *\n     * To be clear, this endpoint makes it possible to submit transaction\n     * requests to the API from languages that do not have library support for\n     * BCS. If you are using an SDK that has BCS support, such as the official\n     * Rust, TypeScript, or Python SDKs, you do not need to use this endpoint.\n     *\n     * To sign a message using the response from this endpoint:\n     * - Decode the hex encoded string in the response to bytes.\n     * - Sign the bytes to create the signature.\n     * - Use that as the signature field in something like Ed25519Signature, which you then use to build a TransactionSignature.\n     * @param requestBody\n     * @returns HexEncodedBytes\n     * @throws ApiError\n     */\n    public encodeSubmission(\n        requestBody: EncodeSubmissionRequest,\n    ): CancelablePromise<HexEncodedBytes> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/transactions/encode_submission',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Estimate gas price\n     * Currently, the gas estimation is handled by taking the median of the last 100,000 transactions\n     * If a user wants to prioritize their transaction and is willing to pay, they can pay more\n     * than the gas price.  If they're willing to wait longer, they can pay less.  Note that the\n     * gas price moves with the fee market, and should only increase when demand outweighs supply.\n     *\n     * If there have been no transactions in the last 100,000 transactions, the price will be 1.\n     * @returns GasEstimation\n     * @throws ApiError\n     */\n    public estimateGasPrice(): CancelablePromise<GasEstimation> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/estimate_gas_price',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { MoveValue } from '../models/MoveValue';\nimport type { U64 } from '../models/U64';\nimport type { ViewRequest } from '../models/ViewRequest';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class ViewService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Execute view function of a module\n     * Execute the Move function with the given parameters and return its execution result.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param requestBody\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveValue\n     * @throws ApiError\n     */\n    public view(\n        requestBody: ViewRequest,\n        ledgerVersion?: U64,\n    ): CancelablePromise<Array<MoveValue>> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/view',\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { BaseHttpRequest } from './core/BaseHttpRequest';\nimport type { OpenAPIConfig } from './core/OpenAPI';\nimport { AxiosHttpRequest } from './core/AxiosHttpRequest';\n\nimport { AccountsService } from './services/AccountsService';\nimport { BlocksService } from './services/BlocksService';\nimport { EventsService } from './services/EventsService';\nimport { GeneralService } from './services/GeneralService';\nimport { TablesService } from './services/TablesService';\nimport { TransactionsService } from './services/TransactionsService';\nimport { ViewService } from './services/ViewService';\n\ntype HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\n\nexport class AptosGeneratedClient {\n\n    public readonly accounts: AccountsService;\n    public readonly blocks: BlocksService;\n    public readonly events: EventsService;\n    public readonly general: GeneralService;\n    public readonly tables: TablesService;\n    public readonly transactions: TransactionsService;\n    public readonly view: ViewService;\n\n    public readonly request: BaseHttpRequest;\n\n    constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = AxiosHttpRequest) {\n        this.request = new HttpRequest({\n            BASE: config?.BASE ?? '/v1',\n            VERSION: config?.VERSION ?? '1.2.0',\n            WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n            CREDENTIALS: config?.CREDENTIALS ?? 'include',\n            TOKEN: config?.TOKEN,\n            USERNAME: config?.USERNAME,\n            PASSWORD: config?.PASSWORD,\n            HEADERS: config?.HEADERS,\n            ENCODE_PATH: config?.ENCODE_PATH,\n        });\n\n        this.accounts = new AccountsService(this.request);\n        this.blocks = new BlocksService(this.request);\n        this.events = new EventsService(this.request);\n        this.general = new GeneralService(this.request);\n        this.tables = new TablesService(this.request);\n        this.transactions = new TransactionsService(this.request);\n        this.view = new ViewService(this.request);\n    }\n}\n\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n    BASE: string;\n    VERSION: string;\n    WITH_CREDENTIALS: boolean;\n    CREDENTIALS: 'include' | 'omit' | 'same-origin';\n    TOKEN?: string | Resolver<string>;\n    USERNAME?: string | Resolver<string>;\n    PASSWORD?: string | Resolver<string>;\n    HEADERS?: Headers | Resolver<Headers>;\n    ENCODE_PATH?: (path: string) => string;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n    BASE: '/v1',\n    VERSION: '1.2.0',\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: 'include',\n    TOKEN: undefined,\n    USERNAME: undefined,\n    PASSWORD: undefined,\n    HEADERS: undefined,\n    ENCODE_PATH: undefined,\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * These codes provide more granular error information beyond just the HTTP\n * status code of the response.\n */\nexport enum AptosErrorCode {\n    ACCOUNT_NOT_FOUND = 'account_not_found',\n    RESOURCE_NOT_FOUND = 'resource_not_found',\n    MODULE_NOT_FOUND = 'module_not_found',\n    STRUCT_FIELD_NOT_FOUND = 'struct_field_not_found',\n    VERSION_NOT_FOUND = 'version_not_found',\n    TRANSACTION_NOT_FOUND = 'transaction_not_found',\n    TABLE_ITEM_NOT_FOUND = 'table_item_not_found',\n    BLOCK_NOT_FOUND = 'block_not_found',\n    VERSION_PRUNED = 'version_pruned',\n    BLOCK_PRUNED = 'block_pruned',\n    INVALID_INPUT = 'invalid_input',\n    INVALID_TRANSACTION_UPDATE = 'invalid_transaction_update',\n    SEQUENCE_NUMBER_TOO_OLD = 'sequence_number_too_old',\n    VM_ERROR = 'vm_error',\n    HEALTH_CHECK_FAILED = 'health_check_failed',\n    MEMPOOL_IS_FULL = 'mempool_is_full',\n    INTERNAL_ERROR = 'internal_error',\n    WEB_FRAMEWORK_ERROR = 'web_framework_error',\n    BCS_NOT_SUPPORTED = 'bcs_not_supported',\n    API_DISABLED = 'api_disabled',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * Move function visibility\n */\nexport enum MoveFunctionVisibility {\n    PRIVATE = 'private',\n    PUBLIC = 'public',\n    FRIEND = 'friend',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport enum RoleType {\n    VALIDATOR = 'validator',\n    FULL_NODE = 'full_node',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AccountData = {\n    description: `Account data\n\n    A simplified version of the onchain Account resource`,\n    properties: {\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        authentication_key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AccountSignature = {\n    type: 'one-of',\n    description: `Account signature scheme\n\n    The account signature scheme allows you to have two types of accounts:\n\n    1. A single Ed25519 key account, one private key\n    2. A k-of-n multi-Ed25519 key account, multiple private keys, such that k-of-n must sign a transaction.`,\n    contains: [{\n        type: 'AccountSignature_Ed25519Signature',\n    }, {\n        type: 'AccountSignature_MultiEd25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AccountSignature_Ed25519Signature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'Ed25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AccountSignature_MultiEd25519Signature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'MultiEd25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Address = {\n    type: 'string',\n    description: `A hex encoded 32 byte Aptos account address.\n\n    This is represented in a string as a 64 character hex string, sometimes\n    shortened by stripping leading 0s, and adding a 0x.\n\n    For example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n    `,\n    format: 'hex',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AptosError = {\n    description: `This is the generic struct we use for all API errors, it contains a string\n    message and an Aptos API specific error code.`,\n    properties: {\n        message: {\n            type: 'string',\n            description: `A message describing the error`,\n            isRequired: true,\n        },\n        error_code: {\n            type: 'AptosErrorCode',\n            isRequired: true,\n        },\n        vm_error_code: {\n            type: 'number',\n            description: `A code providing VM error details when submitting transactions to the VM`,\n            format: 'uint64',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AptosErrorCode = {\n    type: 'Enum',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Block = {\n    description: `A Block with or without transactions\n\n    This contains the information about a transactions along with\n    associated transactions if requested`,\n    properties: {\n        block_height: {\n            type: 'U64',\n            isRequired: true,\n        },\n        block_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        block_timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n        first_version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        last_version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        transactions: {\n            type: 'array',\n            contains: {\n                type: 'Transaction',\n            },\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $BlockMetadataTransaction = {\n    description: `A block metadata transaction\n\n    This signifies the beginning of a block, and contains information\n    about the specific block`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_change_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        event_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_checkpoint_hash: {\n            type: 'HashValue',\n        },\n        gas_used: {\n            type: 'U64',\n            isRequired: true,\n        },\n        success: {\n            type: 'boolean',\n            description: `Whether the transaction was successful`,\n            isRequired: true,\n        },\n        vm_status: {\n            type: 'string',\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true,\n        },\n        accumulator_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        id: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        epoch: {\n            type: 'U64',\n            isRequired: true,\n        },\n        round: {\n            type: 'U64',\n            isRequired: true,\n        },\n        events: {\n            type: 'array',\n            contains: {\n                type: 'Event',\n            },\n            isRequired: true,\n        },\n        previous_block_votes_bitvec: {\n            type: 'array',\n            contains: {\n                type: 'number',\n                format: 'uint8',\n            },\n            isRequired: true,\n        },\n        proposer: {\n            type: 'Address',\n            isRequired: true,\n        },\n        failed_proposer_indices: {\n            type: 'array',\n            contains: {\n                type: 'number',\n                format: 'uint32',\n            },\n            isRequired: true,\n        },\n        timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DecodedTableData = {\n    description: `Decoded table data`,\n    properties: {\n        key: {\n            description: `Key of table in JSON`,\n            properties: {\n            },\n            isRequired: true,\n        },\n        key_type: {\n            type: 'string',\n            description: `Type of key`,\n            isRequired: true,\n        },\n        value: {\n            description: `Value of table in JSON`,\n            properties: {\n            },\n            isRequired: true,\n        },\n        value_type: {\n            type: 'string',\n            description: `Type of value`,\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DeletedTableData = {\n    description: `Deleted table data`,\n    properties: {\n        key: {\n            description: `Deleted key`,\n            properties: {\n            },\n            isRequired: true,\n        },\n        key_type: {\n            type: 'string',\n            description: `Deleted key type`,\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DeleteModule = {\n    description: `Delete a module`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        state_key_hash: {\n            type: 'string',\n            description: `State key hash`,\n            isRequired: true,\n        },\n        module: {\n            type: 'MoveModuleId',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DeleteResource = {\n    description: `Delete a resource`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        state_key_hash: {\n            type: 'string',\n            description: `State key hash`,\n            isRequired: true,\n        },\n        resource: {\n            type: 'MoveStructTag',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DeleteTableItem = {\n    description: `Delete a table item`,\n    properties: {\n        state_key_hash: {\n            type: 'string',\n            isRequired: true,\n        },\n        handle: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        data: {\n            type: 'DeletedTableData',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DirectWriteSet = {\n    properties: {\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        events: {\n            type: 'array',\n            contains: {\n                type: 'Event',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Ed25519Signature = {\n    description: `A single Ed25519 signature`,\n    properties: {\n        public_key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        signature: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $EncodeSubmissionRequest = {\n    description: `Request to encode a submission`,\n    properties: {\n        sender: {\n            type: 'Address',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        max_gas_amount: {\n            type: 'U64',\n            isRequired: true,\n        },\n        gas_unit_price: {\n            type: 'U64',\n            isRequired: true,\n        },\n        expiration_timestamp_secs: {\n            type: 'U64',\n            isRequired: true,\n        },\n        payload: {\n            type: 'TransactionPayload',\n            isRequired: true,\n        },\n        secondary_signers: {\n            type: 'array',\n            contains: {\n                type: 'Address',\n            },\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $EntryFunctionId = {\n    type: 'string',\n    description: `Entry function id is string representation of a entry function defined on-chain.\n\n    Format: \\`{address}::{module name}::{function name}\\`\n\n    Both \\`module name\\` and \\`function name\\` are case-sensitive.\n    `,\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $EntryFunctionPayload = {\n    description: `Payload which runs a single entry function`,\n    properties: {\n        function: {\n            type: 'EntryFunctionId',\n            isRequired: true,\n        },\n        type_arguments: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n        arguments: {\n            type: 'array',\n            contains: {\n                properties: {\n                },\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Event = {\n    description: `An event from a transaction`,\n    properties: {\n        guid: {\n            type: 'EventGuid',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n        data: {\n            description: `The JSON representation of the event`,\n            properties: {\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $EventGuid = {\n    properties: {\n        creation_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        account_address: {\n            type: 'Address',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $GasEstimation = {\n    description: `Struct holding the outputs of the estimate gas API`,\n    properties: {\n        deprioritized_gas_estimate: {\n            type: 'number',\n            description: `The deprioritized estimate for the gas unit price`,\n            format: 'uint64',\n        },\n        gas_estimate: {\n            type: 'number',\n            description: `The current estimate for the gas unit price`,\n            isRequired: true,\n            format: 'uint64',\n        },\n        prioritized_gas_estimate: {\n            type: 'number',\n            description: `The prioritized estimate for the gas unit price`,\n            format: 'uint64',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $GenesisPayload = {\n    type: 'one-of',\n    description: `The writeset payload of the Genesis transaction`,\n    contains: [{\n        type: 'GenesisPayload_WriteSetPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $GenesisPayload_WriteSetPayload = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'WriteSetPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $GenesisTransaction = {\n    description: `The genesis transaction\n\n    This only occurs at the genesis transaction (version 0)`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_change_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        event_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_checkpoint_hash: {\n            type: 'HashValue',\n        },\n        gas_used: {\n            type: 'U64',\n            isRequired: true,\n        },\n        success: {\n            type: 'boolean',\n            description: `Whether the transaction was successful`,\n            isRequired: true,\n        },\n        vm_status: {\n            type: 'string',\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true,\n        },\n        accumulator_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        payload: {\n            type: 'GenesisPayload',\n            isRequired: true,\n        },\n        events: {\n            type: 'array',\n            contains: {\n                type: 'Event',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $HashValue = {\n    type: 'string',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $HealthCheckSuccess = {\n    description: `Representation of a successful healthcheck`,\n    properties: {\n        message: {\n            type: 'string',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $HexEncodedBytes = {\n    type: 'string',\n    description: `All bytes (Vec<u8>) data is represented as hex-encoded string prefixed with \\`0x\\` and fulfilled with\n    two hex digits per byte.\n\n    Unlike the \\`Address\\` type, HexEncodedBytes will not trim any zeros.\n    `,\n    format: 'hex',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $IdentifierWrapper = {\n    type: 'string',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $IndexResponse = {\n    description: `The struct holding all data returned to the client by the\n    index endpoint (i.e., GET \"/\").  Only for responding in JSON`,\n    properties: {\n        chain_id: {\n            type: 'number',\n            description: `Chain ID of the current chain`,\n            isRequired: true,\n            format: 'uint8',\n        },\n        epoch: {\n            type: 'U64',\n            isRequired: true,\n        },\n        ledger_version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        oldest_ledger_version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        ledger_timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n        node_role: {\n            type: 'RoleType',\n            isRequired: true,\n        },\n        oldest_block_height: {\n            type: 'U64',\n            isRequired: true,\n        },\n        block_height: {\n            type: 'U64',\n            isRequired: true,\n        },\n        git_hash: {\n            type: 'string',\n            description: `Git hash of the build of the API endpoint.  Can be used to determine the exact\n            software version used by the API endpoint.`,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $ModuleBundlePayload = {\n    properties: {\n        modules: {\n            type: 'array',\n            contains: {\n                type: 'MoveModuleBytecode',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveAbility = {\n    type: 'string',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveFunction = {\n    description: `Move function`,\n    properties: {\n        name: {\n            type: 'IdentifierWrapper',\n            isRequired: true,\n        },\n        visibility: {\n            type: 'MoveFunctionVisibility',\n            isRequired: true,\n        },\n        is_entry: {\n            type: 'boolean',\n            description: `Whether the function can be called as an entry function directly in a transaction`,\n            isRequired: true,\n        },\n        generic_type_params: {\n            type: 'array',\n            contains: {\n                type: 'MoveFunctionGenericTypeParam',\n            },\n            isRequired: true,\n        },\n        params: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n        return: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveFunctionGenericTypeParam = {\n    description: `Move function generic type param`,\n    properties: {\n        constraints: {\n            type: 'array',\n            contains: {\n                type: 'MoveAbility',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveFunctionVisibility = {\n    type: 'Enum',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveModule = {\n    description: `A Move module`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        name: {\n            type: 'IdentifierWrapper',\n            isRequired: true,\n        },\n        friends: {\n            type: 'array',\n            contains: {\n                type: 'MoveModuleId',\n            },\n            isRequired: true,\n        },\n        exposed_functions: {\n            type: 'array',\n            contains: {\n                type: 'MoveFunction',\n            },\n            isRequired: true,\n        },\n        structs: {\n            type: 'array',\n            contains: {\n                type: 'MoveStruct',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveModuleBytecode = {\n    description: `Move module bytecode along with it's ABI`,\n    properties: {\n        bytecode: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        abi: {\n            type: 'MoveModule',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveModuleId = {\n    type: 'string',\n    description: `Move module id is a string representation of Move module.\n\n    Format: \\`{address}::{module name}\\`\n\n    \\`address\\` should be hex-encoded 32 byte account address that is prefixed with \\`0x\\`.\n\n    Module name is case-sensitive.\n    `,\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveResource = {\n    description: `A parsed Move resource`,\n    properties: {\n        type: {\n            type: 'MoveStructTag',\n            isRequired: true,\n        },\n        data: {\n            type: 'MoveStructValue',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveScriptBytecode = {\n    description: `Move script bytecode`,\n    properties: {\n        bytecode: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        abi: {\n            type: 'MoveFunction',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStruct = {\n    description: `A move struct`,\n    properties: {\n        name: {\n            type: 'IdentifierWrapper',\n            isRequired: true,\n        },\n        is_native: {\n            type: 'boolean',\n            description: `Whether the struct is a native struct of Move`,\n            isRequired: true,\n        },\n        abilities: {\n            type: 'array',\n            contains: {\n                type: 'MoveAbility',\n            },\n            isRequired: true,\n        },\n        generic_type_params: {\n            type: 'array',\n            contains: {\n                type: 'MoveStructGenericTypeParam',\n            },\n            isRequired: true,\n        },\n        fields: {\n            type: 'array',\n            contains: {\n                type: 'MoveStructField',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStructField = {\n    description: `Move struct field`,\n    properties: {\n        name: {\n            type: 'IdentifierWrapper',\n            isRequired: true,\n        },\n        type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStructGenericTypeParam = {\n    description: `Move generic type param`,\n    properties: {\n        constraints: {\n            type: 'array',\n            contains: {\n                type: 'MoveAbility',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStructTag = {\n    type: 'string',\n    description: `String representation of a MoveStructTag (on-chain Move struct type). This exists so you\n    can specify MoveStructTags as path / query parameters, e.g. for get_events_by_event_handle.\n\n    It is a combination of:\n    1. \\`move_module_address\\`, \\`module_name\\` and \\`struct_name\\`, all joined by \\`::\\`\n    2. \\`struct generic type parameters\\` joined by \\`, \\`\n\n    Examples:\n     * \\`0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\\`\n     * \\`0x1::account::Account\\`\n\n    Note:\n    1. Empty chars should be ignored when comparing 2 struct tag ids.\n    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\n    See [doc](https://aptos.dev/concepts/accounts) for more details.\n    `,\n    pattern: '^0x[0-9a-zA-Z:_<>]+$',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStructValue = {\n    description: `This is a JSON representation of some data within an account resource. More specifically,\n    it is a map of strings to arbitrary JSON values / objects, where the keys are top level\n    fields within the given resource.\n\n    To clarify, you might query for 0x1::account::Account and see the example data.\n\n    Move \\`bool\\` type value is serialized into \\`boolean\\`.\n\n    Move \\`u8\\`, \\`u16\\` and \\`u32\\` type value is serialized into \\`integer\\`.\n\n    Move \\`u64\\`, \\`u128\\` and \\`u256\\` type value is serialized into \\`string\\`.\n\n    Move \\`address\\` type value (32 byte Aptos account address) is serialized into a HexEncodedBytes string.\n    For example:\n    - \\`0x1\\`\n    - \\`0x1668f6be25668c1a17cd8caf6b8d2f25\\`\n\n    Move \\`vector\\` type value is serialized into \\`array\\`, except \\`vector<u8>\\` which is serialized into a\n    HexEncodedBytes string with \\`0x\\` prefix.\n    For example:\n    - \\`vector<u64>{255, 255}\\` => \\`[\"255\", \"255\"]\\`\n    - \\`vector<u8>{255, 255}\\` => \\`0xffff\\`\n\n    Move \\`struct\\` type value is serialized into \\`object\\` that looks like this (except some Move stdlib types, see the following section):\n    \\`\\`\\`json\n    {\n        field1_name: field1_value,\n        field2_name: field2_value,\n        ......\n    }\n    \\`\\`\\`\n\n    For example:\n    \\`{ \"created\": \"0xa550c18\", \"role_id\": \"0\" }\\`\n\n     **Special serialization for Move stdlib types**:\n    - [0x1::string::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ascii.md)\n    is serialized into \\`string\\`. For example, struct value \\`0x1::string::String{bytes: b\"Hello World!\"}\\`\n    is serialized as \\`\"Hello World!\"\\` in JSON.\n    `,\n    properties: {\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveType = {\n    type: 'string',\n    description: `String representation of an on-chain Move type tag that is exposed in transaction payload.\n    Values:\n    - bool\n    - u8\n    - u16\n    - u32\n    - u64\n    - u128\n    - u256\n    - address\n    - signer\n    - vector: \\`vector<{non-reference MoveTypeId}>\\`\n    - struct: \\`{address}::{module_name}::{struct_name}::<{generic types}>\\`\n\n    Vector type value examples:\n    - \\`vector<u8>\\`\n    - \\`vector<vector<u64>>\\`\n    - \\`vector<0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>>\\`\n\n    Struct type value examples:\n    - \\`0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n    - \\`0x1::account::Account\\`\n\n    Note:\n    1. Empty chars should be ignored when comparing 2 struct tag ids.\n    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n    `,\n    pattern: '^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveValue = {\n    type: 'any-of',\n    description: `An enum of the possible Move value types`,\n    contains: [{\n        type: 'number',\n        format: 'uint8',\n    }, {\n        type: 'number',\n        format: 'uint16',\n    }, {\n        type: 'number',\n        format: 'uint32',\n    }, {\n        type: 'U64',\n    }, {\n        type: 'U128',\n    }, {\n        type: 'U256',\n    }, {\n        type: 'boolean',\n    }, {\n        type: 'Address',\n    }, {\n        type: 'array',\n        contains: {\n            type: 'MoveValue',\n        },\n    }, {\n        type: 'HexEncodedBytes',\n    }, {\n        type: 'MoveStructValue',\n    }, {\n        type: 'string',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MultiAgentSignature = {\n    description: `Multi agent signature for multi agent transactions\n\n    This allows you to have transactions across multiple accounts`,\n    properties: {\n        sender: {\n            type: 'AccountSignature',\n            isRequired: true,\n        },\n        secondary_signer_addresses: {\n            type: 'array',\n            contains: {\n                type: 'Address',\n            },\n            isRequired: true,\n        },\n        secondary_signers: {\n            type: 'array',\n            contains: {\n                type: 'AccountSignature',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MultiEd25519Signature = {\n    description: `A Ed25519 multi-sig signature\n\n    This allows k-of-n signing for a transaction`,\n    properties: {\n        public_keys: {\n            type: 'array',\n            contains: {\n                type: 'HexEncodedBytes',\n            },\n            isRequired: true,\n        },\n        signatures: {\n            type: 'array',\n            contains: {\n                type: 'HexEncodedBytes',\n            },\n            isRequired: true,\n        },\n        threshold: {\n            type: 'number',\n            description: `The number of signatures required for a successful transaction`,\n            isRequired: true,\n            format: 'uint8',\n        },\n        bitmap: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $PendingTransaction = {\n    description: `A transaction waiting in mempool`,\n    properties: {\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        sender: {\n            type: 'Address',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        max_gas_amount: {\n            type: 'U64',\n            isRequired: true,\n        },\n        gas_unit_price: {\n            type: 'U64',\n            isRequired: true,\n        },\n        expiration_timestamp_secs: {\n            type: 'U64',\n            isRequired: true,\n        },\n        payload: {\n            type: 'TransactionPayload',\n            isRequired: true,\n        },\n        signature: {\n            type: 'TransactionSignature',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $RawTableItemRequest = {\n    description: `Table Item request for the GetTableItemRaw API`,\n    properties: {\n        key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $RoleType = {\n    type: 'Enum',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $ScriptPayload = {\n    description: `Payload which runs a script that can run multiple functions`,\n    properties: {\n        code: {\n            type: 'MoveScriptBytecode',\n            isRequired: true,\n        },\n        type_arguments: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n        arguments: {\n            type: 'array',\n            contains: {\n                properties: {\n                },\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $ScriptWriteSet = {\n    properties: {\n        execute_as: {\n            type: 'Address',\n            isRequired: true,\n        },\n        script: {\n            type: 'ScriptPayload',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $StateCheckpointTransaction = {\n    description: `A state checkpoint transaction`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_change_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        event_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_checkpoint_hash: {\n            type: 'HashValue',\n        },\n        gas_used: {\n            type: 'U64',\n            isRequired: true,\n        },\n        success: {\n            type: 'boolean',\n            description: `Whether the transaction was successful`,\n            isRequired: true,\n        },\n        vm_status: {\n            type: 'string',\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true,\n        },\n        accumulator_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $StateKeyWrapper = {\n    type: 'string',\n    description: `Representation of a StateKey as a hex string. This is used for cursor based pagination.\n    `,\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $SubmitTransactionRequest = {\n    description: `A request to submit a transaction\n\n    This requires a transaction and a signature of it`,\n    properties: {\n        sender: {\n            type: 'Address',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        max_gas_amount: {\n            type: 'U64',\n            isRequired: true,\n        },\n        gas_unit_price: {\n            type: 'U64',\n            isRequired: true,\n        },\n        expiration_timestamp_secs: {\n            type: 'U64',\n            isRequired: true,\n        },\n        payload: {\n            type: 'TransactionPayload',\n            isRequired: true,\n        },\n        signature: {\n            type: 'TransactionSignature',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TableItemRequest = {\n    description: `Table Item request for the GetTableItem API`,\n    properties: {\n        key_type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n        value_type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n        key: {\n            description: `The value of the table item's key`,\n            properties: {\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction = {\n    type: 'one-of',\n    description: `Enum of the different types of transactions in Aptos`,\n    contains: [{\n        type: 'Transaction_PendingTransaction',\n    }, {\n        type: 'Transaction_UserTransaction',\n    }, {\n        type: 'Transaction_GenesisTransaction',\n    }, {\n        type: 'Transaction_BlockMetadataTransaction',\n    }, {\n        type: 'Transaction_StateCheckpointTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_BlockMetadataTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'BlockMetadataTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_GenesisTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'GenesisTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_PendingTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'PendingTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_StateCheckpointTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'StateCheckpointTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_UserTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'UserTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionPayload = {\n    type: 'one-of',\n    description: `An enum of the possible transaction payloads`,\n    contains: [{\n        type: 'TransactionPayload_EntryFunctionPayload',\n    }, {\n        type: 'TransactionPayload_ScriptPayload',\n    }, {\n        type: 'TransactionPayload_ModuleBundlePayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionPayload_EntryFunctionPayload = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'EntryFunctionPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionPayload_ModuleBundlePayload = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'ModuleBundlePayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionPayload_ScriptPayload = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'ScriptPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionsBatchSingleSubmissionFailure = {\n    description: `Information telling which batch submission transactions failed`,\n    properties: {\n        error: {\n            type: 'AptosError',\n            isRequired: true,\n        },\n        transaction_index: {\n            type: 'number',\n            description: `The index of which transaction failed, same as submission order`,\n            isRequired: true,\n            format: 'uint64',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionsBatchSubmissionResult = {\n    description: `Batch transaction submission result\n\n    Tells which transactions failed`,\n    properties: {\n        transaction_failures: {\n            type: 'array',\n            contains: {\n                type: 'TransactionsBatchSingleSubmissionFailure',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionSignature = {\n    type: 'one-of',\n    description: `An enum representing the different transaction signatures available`,\n    contains: [{\n        type: 'TransactionSignature_Ed25519Signature',\n    }, {\n        type: 'TransactionSignature_MultiEd25519Signature',\n    }, {\n        type: 'TransactionSignature_MultiAgentSignature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionSignature_Ed25519Signature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'Ed25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionSignature_MultiAgentSignature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'MultiAgentSignature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionSignature_MultiEd25519Signature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'MultiEd25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $U128 = {\n    type: 'string',\n    description: `A string containing a 128-bit unsigned integer.\n\n    We represent u128 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u128s in JSON natively.\n    `,\n    format: 'uint128',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $U256 = {\n    type: 'string',\n    description: `A string containing a 256-bit unsigned integer.\n\n    We represent u256 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u256s in JSON natively.\n    `,\n    format: 'uint256',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $U64 = {\n    type: 'string',\n    description: `A string containing a 64-bit unsigned integer.\n\n    We represent u64 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u64s in JSON natively.\n    `,\n    format: 'uint64',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $UserTransaction = {\n    description: `A transaction submitted by a user to change the state of the blockchain`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_change_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        event_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_checkpoint_hash: {\n            type: 'HashValue',\n        },\n        gas_used: {\n            type: 'U64',\n            isRequired: true,\n        },\n        success: {\n            type: 'boolean',\n            description: `Whether the transaction was successful`,\n            isRequired: true,\n        },\n        vm_status: {\n            type: 'string',\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true,\n        },\n        accumulator_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        sender: {\n            type: 'Address',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        max_gas_amount: {\n            type: 'U64',\n            isRequired: true,\n        },\n        gas_unit_price: {\n            type: 'U64',\n            isRequired: true,\n        },\n        expiration_timestamp_secs: {\n            type: 'U64',\n            isRequired: true,\n        },\n        payload: {\n            type: 'TransactionPayload',\n            isRequired: true,\n        },\n        signature: {\n            type: 'TransactionSignature',\n        },\n        events: {\n            type: 'array',\n            contains: {\n                type: 'Event',\n            },\n            isRequired: true,\n        },\n        timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $VersionedEvent = {\n    description: `An event from a transaction with a version`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        guid: {\n            type: 'EventGuid',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n        data: {\n            description: `The JSON representation of the event`,\n            properties: {\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $ViewRequest = {\n    description: `View request for the Move View Function API`,\n    properties: {\n        function: {\n            type: 'EntryFunctionId',\n            isRequired: true,\n        },\n        type_arguments: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n        arguments: {\n            type: 'array',\n            contains: {\n                properties: {\n                },\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteModule = {\n    description: `Write a new module or update an existing one`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        state_key_hash: {\n            type: 'string',\n            description: `State key hash`,\n            isRequired: true,\n        },\n        data: {\n            type: 'MoveModuleBytecode',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteResource = {\n    description: `Write a resource or update an existing one`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        state_key_hash: {\n            type: 'string',\n            description: `State key hash`,\n            isRequired: true,\n        },\n        data: {\n            type: 'MoveResource',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSet = {\n    type: 'one-of',\n    description: `The associated writeset with a payload`,\n    contains: [{\n        type: 'WriteSet_ScriptWriteSet',\n    }, {\n        type: 'WriteSet_DirectWriteSet',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSet_DirectWriteSet = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'DirectWriteSet',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSet_ScriptWriteSet = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'ScriptWriteSet',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange = {\n    type: 'one-of',\n    description: `A final state change of a transaction on a resource or module`,\n    contains: [{\n        type: 'WriteSetChange_DeleteModule',\n    }, {\n        type: 'WriteSetChange_DeleteResource',\n    }, {\n        type: 'WriteSetChange_DeleteTableItem',\n    }, {\n        type: 'WriteSetChange_WriteModule',\n    }, {\n        type: 'WriteSetChange_WriteResource',\n    }, {\n        type: 'WriteSetChange_WriteTableItem',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_DeleteModule = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'DeleteModule',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_DeleteResource = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'DeleteResource',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_DeleteTableItem = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'DeleteTableItem',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_WriteModule = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'WriteModule',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_WriteResource = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'WriteResource',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_WriteTableItem = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'WriteTableItem',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetPayload = {\n    description: `A writeset payload, used only for genesis`,\n    properties: {\n        write_set: {\n            type: 'WriteSet',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteTableItem = {\n    description: `Change set to write a table item`,\n    properties: {\n        state_key_hash: {\n            type: 'string',\n            isRequired: true,\n        },\n        handle: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        value: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        data: {\n            type: 'DecodedTableData',\n        },\n    },\n} as const;\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport {\n  Ed25519PublicKey,\n  Ed25519Signature,\n  MultiEd25519PublicKey,\n  MultiEd25519Signature,\n  RawTransaction,\n  SignedTransaction,\n  TransactionAuthenticatorEd25519,\n  TransactionAuthenticatorMultiEd25519,\n  SigningMessage,\n  MultiAgentRawTransaction,\n  AccountAddress,\n  EntryFunction,\n  Identifier,\n  ChainId,\n  Script,\n  TransactionPayload,\n  TransactionArgument,\n  TransactionPayloadEntryFunction,\n  TransactionPayloadScript,\n  ModuleId,\n} from \"../aptos_types\";\nimport { bcsToBytes, Bytes, Deserializer, Serializer, Uint64, Uint8 } from \"../bcs\";\nimport { ArgumentABI, EntryFunctionABI, ScriptABI, TransactionScriptABI, TypeArgumentABI } from \"../aptos_types/abi\";\nimport { HexString, MaybeHexString } from \"../hex_string\";\nimport { argToTransactionArgument, TypeTagParser, serializeArg } from \"./builder_utils\";\nimport * as Gen from \"../generated/index\";\nimport { DEFAULT_TXN_EXP_SEC_FROM_NOW, DEFAULT_MAX_GAS_AMOUNT, MemoizeExpiring } from \"../utils\";\n\nexport { TypeTagParser } from \"./builder_utils\";\n\nconst RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\nconst RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\n\ntype AnyRawTransaction = RawTransaction | MultiAgentRawTransaction;\n\n/**\n * Function that takes in a Signing Message (serialized raw transaction)\n *  and returns a signature\n */\nexport type SigningFn = (txn: SigningMessage) => Ed25519Signature | MultiEd25519Signature;\n\nexport class TransactionBuilder<F extends SigningFn> {\n  protected readonly signingFunction: F;\n\n  constructor(signingFunction: F, public readonly rawTxnBuilder?: TransactionBuilderABI) {\n    this.signingFunction = signingFunction;\n  }\n\n  /**\n   * Builds a RawTransaction. Relays the call to TransactionBuilderABI.build\n   * @param func\n   * @param ty_tags\n   * @param args\n   */\n  build(func: string, ty_tags: string[], args: any[]): RawTransaction {\n    if (!this.rawTxnBuilder) {\n      throw new Error(\"this.rawTxnBuilder doesn't exist.\");\n    }\n\n    return this.rawTxnBuilder.build(func, ty_tags, args);\n  }\n\n  /** Generates a Signing Message out of a raw transaction. */\n  static getSigningMessage(rawTxn: AnyRawTransaction): SigningMessage {\n    const hash = sha3Hash.create();\n    if (rawTxn instanceof RawTransaction) {\n      hash.update(RAW_TRANSACTION_SALT);\n    } else if (rawTxn instanceof MultiAgentRawTransaction) {\n      hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n    } else {\n      throw new Error(\"Unknown transaction type.\");\n    }\n\n    const prefix = hash.digest();\n\n    const body = bcsToBytes(rawTxn);\n\n    const mergedArray = new Uint8Array(prefix.length + body.length);\n    mergedArray.set(prefix);\n    mergedArray.set(body, prefix.length);\n\n    return mergedArray;\n  }\n}\n\n/**\n * Provides signing method for signing a raw transaction with single public key.\n */\nexport class TransactionBuilderEd25519 extends TransactionBuilder<SigningFn> {\n  private readonly publicKey: Uint8Array;\n\n  constructor(signingFunction: SigningFn, publicKey: Uint8Array, rawTxnBuilder?: TransactionBuilderABI) {\n    super(signingFunction, rawTxnBuilder);\n    this.publicKey = publicKey;\n  }\n\n  rawToSigned(rawTxn: RawTransaction): SignedTransaction {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n\n    const authenticator = new TransactionAuthenticatorEd25519(\n      new Ed25519PublicKey(this.publicKey),\n      signature as Ed25519Signature,\n    );\n\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n\n  /** Signs a raw transaction and returns a bcs serialized transaction. */\n  sign(rawTxn: RawTransaction): Bytes {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n}\n\n/**\n * Provides signing method for signing a raw transaction with multisig public key.\n */\nexport class TransactionBuilderMultiEd25519 extends TransactionBuilder<SigningFn> {\n  private readonly publicKey: MultiEd25519PublicKey;\n\n  constructor(signingFunction: SigningFn, publicKey: MultiEd25519PublicKey) {\n    super(signingFunction);\n    this.publicKey = publicKey;\n  }\n\n  rawToSigned(rawTxn: RawTransaction): SignedTransaction {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n\n    const authenticator = new TransactionAuthenticatorMultiEd25519(this.publicKey, signature as MultiEd25519Signature);\n\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n\n  /** Signs a raw transaction and returns a bcs serialized transaction. */\n  sign(rawTxn: RawTransaction): Bytes {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n}\n\n/**\n * Config for creating raw transactions.\n */\ninterface ABIBuilderConfig {\n  sender: MaybeHexString | AccountAddress;\n  sequenceNumber: Uint64 | string;\n  gasUnitPrice: Uint64 | string;\n  maxGasAmount?: Uint64 | string;\n  expSecFromNow?: number | string;\n  chainId: Uint8 | string;\n}\n\n/**\n * Builds raw transactions based on ABI\n */\nexport class TransactionBuilderABI {\n  private readonly abiMap: Map<string, ScriptABI>;\n\n  private readonly builderConfig: Partial<ABIBuilderConfig>;\n\n  /**\n   * Constructs a TransactionBuilderABI instance\n   * @param abis List of binary ABIs.\n   * @param builderConfig Configs for creating a raw transaction.\n   */\n  constructor(abis: Bytes[], builderConfig?: ABIBuilderConfig) {\n    this.abiMap = new Map<string, ScriptABI>();\n\n    abis.forEach((abi) => {\n      const deserializer = new Deserializer(abi);\n      const scriptABI = ScriptABI.deserialize(deserializer);\n      let k: string;\n      if (scriptABI instanceof EntryFunctionABI) {\n        const funcABI = scriptABI as EntryFunctionABI;\n        const { address: addr, name: moduleName } = funcABI.module_name;\n        k = `${HexString.fromUint8Array(addr.address).toShortString()}::${moduleName.value}::${funcABI.name}`;\n      } else {\n        const funcABI = scriptABI as TransactionScriptABI;\n        k = funcABI.name;\n      }\n\n      if (this.abiMap.has(k)) {\n        throw new Error(\"Found conflicting ABI interfaces\");\n      }\n\n      this.abiMap.set(k, scriptABI);\n    });\n\n    this.builderConfig = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      expSecFromNow: DEFAULT_TXN_EXP_SEC_FROM_NOW,\n      ...builderConfig,\n    };\n  }\n\n  private static toBCSArgs(abiArgs: any[], args: any[]): Bytes[] {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n\n    return args.map((arg, i) => {\n      const serializer = new Serializer();\n      serializeArg(arg, abiArgs[i].type_tag, serializer);\n      return serializer.getBytes();\n    });\n  }\n\n  private static toTransactionArguments(abiArgs: any[], args: any[]): TransactionArgument[] {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n\n    return args.map((arg, i) => argToTransactionArgument(arg, abiArgs[i].type_tag));\n  }\n\n  setSequenceNumber(seqNumber: Uint64 | string) {\n    this.builderConfig.sequenceNumber = BigInt(seqNumber);\n  }\n\n  /**\n   * Builds a TransactionPayload. For dApps, chain ID and account sequence numbers are only known to the wallet.\n   * Instead of building a RawTransaction (requires chainID and sequenceNumber), dApps can build a TransactionPayload\n   * and pass the payload to the wallet for signing and sending.\n   * @param func Fully qualified func names, e.g. 0x1::Coin::transfer\n   * @param ty_tags TypeTag strings\n   * @param args Function arguments\n   * @returns TransactionPayload\n   */\n  buildTransactionPayload(func: string, ty_tags: string[], args: any[]): TransactionPayload {\n    const typeTags = ty_tags.map((ty_arg) => new TypeTagParser(ty_arg).parseTypeTag());\n\n    let payload: TransactionPayload;\n\n    if (!this.abiMap.has(func)) {\n      throw new Error(`Cannot find function: ${func}`);\n    }\n\n    const scriptABI = this.abiMap.get(func);\n\n    if (scriptABI instanceof EntryFunctionABI) {\n      const funcABI = scriptABI as EntryFunctionABI;\n      const bcsArgs = TransactionBuilderABI.toBCSArgs(funcABI.args, args);\n      payload = new TransactionPayloadEntryFunction(\n        new EntryFunction(funcABI.module_name, new Identifier(funcABI.name), typeTags, bcsArgs),\n      );\n    } else if (scriptABI instanceof TransactionScriptABI) {\n      const funcABI = scriptABI as TransactionScriptABI;\n      const scriptArgs = TransactionBuilderABI.toTransactionArguments(funcABI.args, args);\n\n      payload = new TransactionPayloadScript(new Script(funcABI.code, typeTags, scriptArgs));\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"Unknown ABI format.\");\n    }\n\n    return payload;\n  }\n\n  /**\n   * Builds a RawTransaction\n   * @param func Fully qualified func names, e.g. 0x1::Coin::transfer\n   * @param ty_tags TypeTag strings.\n   * @example Below are valid value examples\n   * ```\n   * // Structs are in format `AccountAddress::ModuleName::StructName`\n   * 0x1::aptos_coin::AptosCoin\n   * // Vectors are in format `vector<other_tag_string>`\n   * vector<0x1::aptos_coin::AptosCoin>\n   * bool\n   * u8\n   * u16\n   * u32\n   * u64\n   * u128\n   * u256\n   * address\n   * ```\n   * @param args Function arguments\n   * @returns RawTransaction\n   */\n  build(func: string, ty_tags: string[], args: any[]): RawTransaction {\n    const { sender, sequenceNumber, gasUnitPrice, maxGasAmount, expSecFromNow, chainId } = this.builderConfig;\n\n    if (!gasUnitPrice) {\n      throw new Error(\"No gasUnitPrice provided.\");\n    }\n\n    const senderAccount = sender instanceof AccountAddress ? sender : AccountAddress.fromHex(sender!);\n    const expTimestampSec = BigInt(Math.floor(Date.now() / 1000) + Number(expSecFromNow));\n    const payload = this.buildTransactionPayload(func, ty_tags, args);\n\n    if (payload) {\n      return new RawTransaction(\n        senderAccount,\n        BigInt(sequenceNumber!),\n        payload,\n        BigInt(maxGasAmount!),\n        BigInt(gasUnitPrice!),\n        expTimestampSec,\n        new ChainId(Number(chainId)),\n      );\n    }\n\n    throw new Error(\"Invalid ABI.\");\n  }\n}\n\nexport type RemoteABIBuilderConfig = Partial<Omit<ABIBuilderConfig, \"sender\">> & {\n  sender: MaybeHexString | AccountAddress;\n};\n\ninterface AptosClientInterface {\n  getAccountModules: (accountAddress: MaybeHexString) => Promise<Gen.MoveModuleBytecode[]>;\n  getAccount: (accountAddress: MaybeHexString) => Promise<Gen.AccountData>;\n  getChainId: () => Promise<number>;\n  estimateGasPrice: () => Promise<Gen.GasEstimation>;\n}\n\n/**\n * This transaction builder downloads JSON ABIs from the fullnodes.\n * It then translates the JSON ABIs to the format that is accepted by TransactionBuilderABI\n */\nexport class TransactionBuilderRemoteABI {\n  // We don't want the builder to depend on the actual AptosClient. There might be circular dependencies.\n  constructor(\n    private readonly aptosClient: AptosClientInterface,\n    private readonly builderConfig: RemoteABIBuilderConfig,\n  ) {}\n\n  // Cache for 10 minutes\n  @MemoizeExpiring(10 * 60 * 1000)\n  async fetchABI(addr: string) {\n    const modules = await this.aptosClient.getAccountModules(addr);\n    const abis = modules\n      .map((module) => module.abi)\n      .flatMap((abi) =>\n        abi!.exposed_functions\n          .filter((ef) => ef.is_entry)\n          .map(\n            (ef) =>\n              ({\n                fullName: `${abi!.address}::${abi!.name}::${ef.name}`,\n                ...ef,\n              } as Gen.MoveFunction & { fullName: string }),\n          ),\n      );\n\n    const abiMap = new Map<string, Gen.MoveFunction & { fullName: string }>();\n    abis.forEach((abi) => {\n      abiMap.set(abi.fullName, abi);\n    });\n\n    return abiMap;\n  }\n\n  /**\n   * Builds a raw transaction. Only support script function a.k.a entry function payloads\n   *\n   * @param func fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coins::transfer\n   * @param ty_tags\n   * @param args\n   * @returns RawTransaction\n   */\n  async build(func: Gen.EntryFunctionId, ty_tags: Gen.MoveType[], args: any[]): Promise<RawTransaction> {\n    /* eslint no-param-reassign: [\"off\"] */\n    const normlize = (s: string) => s.replace(/^0[xX]0*/g, \"0x\");\n    func = normlize(func);\n    const funcNameParts = func.split(\"::\");\n    if (funcNameParts.length !== 3) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        \"'func' needs to be a fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coins::transfer\",\n      );\n    }\n\n    const [addr, module] = func.split(\"::\");\n\n    // Downloads the JSON abi\n    const abiMap = await this.fetchABI(addr);\n    if (!abiMap.has(func)) {\n      throw new Error(`${func} doesn't exist.`);\n    }\n\n    const funcAbi = abiMap.get(func);\n\n    // Remove all `signer` and `&signer` from argument list because the Move VM injects those arguments. Clients do not\n    // need to care about those args. `signer` and `&signer` are required be in the front of the argument list. But we\n    // just loop through all arguments and filter out `signer` and `&signer`.\n    const originalArgs = funcAbi!.params.filter((param) => param !== \"signer\" && param !== \"&signer\");\n\n    // Convert string arguments to TypeArgumentABI\n    const typeArgABIs = originalArgs.map((arg, i) => new ArgumentABI(`var${i}`, new TypeTagParser(arg).parseTypeTag()));\n\n    const entryFunctionABI = new EntryFunctionABI(\n      funcAbi!.name,\n      ModuleId.fromStr(`${addr}::${module}`),\n      \"\", // Doc string\n      funcAbi!.generic_type_params.map((_, i) => new TypeArgumentABI(`${i}`)),\n      typeArgABIs,\n    );\n\n    const { sender, ...rest } = this.builderConfig;\n\n    const senderAddress = sender instanceof AccountAddress ? HexString.fromUint8Array(sender.address) : sender;\n\n    const [{ sequence_number: sequenceNumber }, chainId, { gas_estimate: gasUnitPrice }] = await Promise.all([\n      rest?.sequenceNumber\n        ? Promise.resolve({ sequence_number: rest?.sequenceNumber })\n        : this.aptosClient.getAccount(senderAddress),\n      rest?.chainId ? Promise.resolve(rest?.chainId) : this.aptosClient.getChainId(),\n      rest?.gasUnitPrice ? Promise.resolve({ gas_estimate: rest?.gasUnitPrice }) : this.aptosClient.estimateGasPrice(),\n    ]);\n\n    const builderABI = new TransactionBuilderABI([bcsToBytes(entryFunctionABI)], {\n      sender,\n      sequenceNumber,\n      chainId,\n      gasUnitPrice: BigInt(gasUnitPrice),\n      ...rest,\n    });\n\n    return builderABI.build(func, ty_tags, args);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexString } from \"../hex_string\";\nimport {\n  TypeTag,\n  TypeTagBool,\n  TypeTagU8,\n  TypeTagU16,\n  TypeTagU32,\n  TypeTagU64,\n  TypeTagU128,\n  TypeTagU256,\n  TypeTagAddress,\n  AccountAddress,\n  TypeTagVector,\n  TypeTagStruct,\n  StructTag,\n  Identifier,\n  TransactionArgument,\n  TransactionArgumentBool,\n  TransactionArgumentU16,\n  TransactionArgumentU32,\n  TransactionArgumentU64,\n  TransactionArgumentU128,\n  TransactionArgumentU256,\n  TransactionArgumentAddress,\n  TransactionArgumentU8,\n  TransactionArgumentU8Vector,\n} from \"../aptos_types\";\nimport { Serializer } from \"../bcs\";\n\nexport const stringStructTag = new StructTag(\n  AccountAddress.fromHex(\"0x1\"),\n  new Identifier(\"string\"),\n  new Identifier(\"String\"),\n  [],\n);\n\nfunction assertType(val: any, types: string[] | string, message?: string) {\n  if (!types?.includes(typeof val)) {\n    throw new Error(\n      message || `Invalid arg: ${val} type should be ${types instanceof Array ? types.join(\" or \") : types}`,\n    );\n  }\n}\n\nfunction bail(message: string) {\n  throw new Error(message);\n}\n\nfunction isWhiteSpace(c: string): boolean {\n  if (c.match(/\\s/)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isValidAlphabetic(c: string): boolean {\n  if (c.match(/[_A-Za-z0-9]/g)) {\n    return true;\n  }\n  return false;\n}\n\ntype TokenType = string;\ntype TokenValue = string;\ntype Token = [TokenType, TokenValue];\n\n// Returns Token and Token byte size\nfunction nextToken(tagStr: string, pos: number): [Token, number] {\n  const c = tagStr[pos];\n  if (c === \":\") {\n    if (tagStr.slice(pos, pos + 2) === \"::\") {\n      return [[\"COLON\", \"::\"], 2];\n    }\n    bail(\"Unrecognized token.\");\n  } else if (c === \"<\") {\n    return [[\"LT\", \"<\"], 1];\n  } else if (c === \">\") {\n    return [[\"GT\", \">\"], 1];\n  } else if (c === \",\") {\n    return [[\"COMMA\", \",\"], 1];\n  } else if (isWhiteSpace(c)) {\n    let res = \"\";\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n      if (isWhiteSpace(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n    return [[\"SPACE\", res], res.length];\n  } else if (isValidAlphabetic(c)) {\n    let res = \"\";\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n      if (isValidAlphabetic(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n    return [[\"IDENT\", res], res.length];\n  }\n  throw new Error(\"Unrecognized token.\");\n}\n\nfunction tokenize(tagStr: string): Token[] {\n  let pos = 0;\n  const tokens = [];\n  while (pos < tagStr.length) {\n    const [token, size] = nextToken(tagStr, pos);\n    if (token[0] !== \"SPACE\") {\n      tokens.push(token);\n    }\n    pos += size;\n  }\n  return tokens;\n}\n\n/**\n * Parser to parse a type tag string\n */\nexport class TypeTagParser {\n  private readonly tokens: Token[];\n\n  constructor(tagStr: string) {\n    this.tokens = tokenize(tagStr);\n  }\n\n  private consume(targetToken: string) {\n    const token = this.tokens.shift();\n    if (!token || token[1] !== targetToken) {\n      bail(\"Invalid type tag.\");\n    }\n  }\n\n  private parseCommaList(endToken: TokenValue, allowTraillingComma: boolean): TypeTag[] {\n    const res: TypeTag[] = [];\n    if (this.tokens.length <= 0) {\n      bail(\"Invalid type tag.\");\n    }\n\n    while (this.tokens[0][1] !== endToken) {\n      res.push(this.parseTypeTag());\n\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken) {\n        break;\n      }\n\n      this.consume(\",\");\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken && allowTraillingComma) {\n        break;\n      }\n\n      if (this.tokens.length <= 0) {\n        bail(\"Invalid type tag.\");\n      }\n    }\n    return res;\n  }\n\n  parseTypeTag(): TypeTag {\n    if (this.tokens.length === 0) {\n      bail(\"Invalid type tag.\");\n    }\n\n    // Pop left most element out\n    const [tokenTy, tokenVal] = this.tokens.shift()!;\n\n    if (tokenVal === \"u8\") {\n      return new TypeTagU8();\n    }\n    if (tokenVal === \"u16\") {\n      return new TypeTagU16();\n    }\n    if (tokenVal === \"u32\") {\n      return new TypeTagU32();\n    }\n    if (tokenVal === \"u64\") {\n      return new TypeTagU64();\n    }\n    if (tokenVal === \"u128\") {\n      return new TypeTagU128();\n    }\n    if (tokenVal === \"u256\") {\n      return new TypeTagU256();\n    }\n    if (tokenVal === \"bool\") {\n      return new TypeTagBool();\n    }\n    if (tokenVal === \"address\") {\n      return new TypeTagAddress();\n    }\n    if (tokenVal === \"vector\") {\n      this.consume(\"<\");\n      const res = this.parseTypeTag();\n      this.consume(\">\");\n      return new TypeTagVector(res);\n    }\n    if (tokenTy === \"IDENT\" && (tokenVal.startsWith(\"0x\") || tokenVal.startsWith(\"0X\"))) {\n      const address = tokenVal;\n      this.consume(\"::\");\n      const [moduleTokenTy, module] = this.tokens.shift()!;\n      if (moduleTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n      this.consume(\"::\");\n      const [nameTokenTy, name] = this.tokens.shift()!;\n      if (nameTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n\n      let tyTags: TypeTag[] = [];\n      // Check if the struct has ty args\n      if (this.tokens.length > 0 && this.tokens[0][1] === \"<\") {\n        this.consume(\"<\");\n        tyTags = this.parseCommaList(\">\", true);\n        this.consume(\">\");\n      }\n\n      const structTag = new StructTag(\n        AccountAddress.fromHex(address),\n        new Identifier(module),\n        new Identifier(name),\n        tyTags,\n      );\n      return new TypeTagStruct(structTag);\n    }\n\n    throw new Error(\"Invalid type tag.\");\n  }\n}\n\nexport function ensureBoolean(val: boolean | string): boolean {\n  assertType(val, [\"boolean\", \"string\"]);\n  if (typeof val === \"boolean\") {\n    return val;\n  }\n\n  if (val === \"true\") {\n    return true;\n  }\n  if (val === \"false\") {\n    return false;\n  }\n\n  throw new Error(\"Invalid boolean string.\");\n}\n\nexport function ensureNumber(val: number | string): number {\n  assertType(val, [\"number\", \"string\"]);\n  if (typeof val === \"number\") {\n    return val;\n  }\n\n  const res = Number.parseInt(val, 10);\n  if (Number.isNaN(res)) {\n    throw new Error(\"Invalid number string.\");\n  }\n\n  return res;\n}\n\nexport function ensureBigInt(val: number | bigint | string): bigint {\n  assertType(val, [\"number\", \"bigint\", \"string\"]);\n  return BigInt(val);\n}\n\nexport function serializeArg(argVal: any, argType: TypeTag, serializer: Serializer) {\n  if (argType instanceof TypeTagBool) {\n    serializer.serializeBool(ensureBoolean(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU8) {\n    serializer.serializeU8(ensureNumber(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU16) {\n    serializer.serializeU16(ensureNumber(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU32) {\n    serializer.serializeU32(ensureNumber(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU64) {\n    serializer.serializeU64(ensureBigInt(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU128) {\n    serializer.serializeU128(ensureBigInt(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU256) {\n    serializer.serializeU256(ensureBigInt(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagAddress) {\n    let addr: AccountAddress;\n    if (typeof argVal === \"string\" || argVal instanceof HexString) {\n      addr = AccountAddress.fromHex(argVal);\n    } else if (argVal instanceof AccountAddress) {\n      addr = argVal;\n    } else {\n      throw new Error(\"Invalid account address.\");\n    }\n    addr.serialize(serializer);\n    return;\n  }\n  if (argType instanceof TypeTagVector) {\n    // We are serializing a vector<u8>\n    if (argType.value instanceof TypeTagU8) {\n      if (argVal instanceof Uint8Array) {\n        serializer.serializeBytes(argVal);\n        return;\n      }\n\n      if (typeof argVal === \"string\") {\n        serializer.serializeStr(argVal);\n        return;\n      }\n    }\n\n    if (!(argVal instanceof Array)) {\n      throw new Error(\"Invalid vector args.\");\n    }\n\n    serializer.serializeU32AsUleb128(argVal.length);\n\n    argVal.forEach((arg) => serializeArg(arg, argType.value, serializer));\n    return;\n  }\n\n  if (argType instanceof TypeTagStruct) {\n    const { address, module_name: moduleName, name } = (argType as TypeTagStruct).value;\n    if (\n      `${HexString.fromUint8Array(address.address).toShortString()}::${moduleName.value}::${name.value}` !==\n      \"0x1::string::String\"\n    ) {\n      throw new Error(\"The only supported struct arg is of type 0x1::string::String\");\n    }\n    assertType(argVal, [\"string\"]);\n\n    serializer.serializeStr(argVal);\n    return;\n  }\n  throw new Error(\"Unsupported arg type.\");\n}\n\nexport function argToTransactionArgument(argVal: any, argType: TypeTag): TransactionArgument {\n  if (argType instanceof TypeTagBool) {\n    return new TransactionArgumentBool(ensureBoolean(argVal));\n  }\n  if (argType instanceof TypeTagU8) {\n    return new TransactionArgumentU8(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU16) {\n    return new TransactionArgumentU16(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU32) {\n    return new TransactionArgumentU32(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU64) {\n    return new TransactionArgumentU64(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagU128) {\n    return new TransactionArgumentU128(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagU256) {\n    return new TransactionArgumentU256(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagAddress) {\n    let addr: AccountAddress;\n    if (typeof argVal === \"string\" || argVal instanceof HexString) {\n      addr = AccountAddress.fromHex(argVal);\n    } else if (argVal instanceof AccountAddress) {\n      addr = argVal;\n    } else {\n      throw new Error(\"Invalid account address.\");\n    }\n    return new TransactionArgumentAddress(addr);\n  }\n  if (argType instanceof TypeTagVector && argType.value instanceof TypeTagU8) {\n    if (!(argVal instanceof Uint8Array)) {\n      throw new Error(`${argVal} should be an instance of Uint8Array`);\n    }\n    return new TransactionArgumentU8Vector(argVal);\n  }\n\n  throw new Error(\"Unknown type for TransactionArgument.\");\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexString, MaybeHexString } from \"./hex_string\";\nimport {\n  clear,\n  DEFAULT_TXN_EXP_SEC_FROM_NOW,\n  DEFAULT_MAX_GAS_AMOUNT,\n  DEFAULT_TXN_TIMEOUT_SEC,\n  fixNodeUrl,\n  paginateWithCursor,\n  Memoize,\n  sleep,\n  APTOS_COIN,\n} from \"./utils\";\nimport { AptosAccount } from \"./aptos_account\";\nimport * as Gen from \"./generated/index\";\nimport {\n  TxnBuilderTypes,\n  TransactionBuilderEd25519,\n  TransactionBuilderRemoteABI,\n  RemoteABIBuilderConfig,\n  TransactionBuilderMultiEd25519,\n} from \"./transaction_builder\";\nimport {\n  bcsSerializeBytes,\n  bcsSerializeU8,\n  bcsToBytes,\n  Bytes,\n  Seq,\n  Serializer,\n  serializeVector,\n  Uint64,\n  AnyNumber,\n} from \"./bcs\";\nimport { Ed25519PublicKey, MultiEd25519PublicKey } from \"./aptos_types\";\n\nexport interface OptionalTransactionArgs {\n  maxGasAmount?: Uint64;\n  gasUnitPrice?: Uint64;\n  expireTimestamp?: Uint64;\n}\n\ninterface PaginationArgs {\n  start?: AnyNumber;\n  limit?: number;\n}\n\n/**\n * Provides methods for retrieving data from Aptos node.\n * For more detailed API specification see {@link https://fullnode.devnet.aptoslabs.com/v1/spec}\n */\nexport class AptosClient {\n  client: Gen.AptosGeneratedClient;\n\n  readonly nodeUrl: string;\n\n  /**\n   * Build a client configured to connect to an Aptos node at the given URL.\n   *\n   * Note: If you forget to append `/v1` to the URL, the client constructor\n   * will automatically append it. If you don't want this URL processing to\n   * take place, set doNotFixNodeUrl to true.\n   *\n   * @param nodeUrl URL of the Aptos Node API endpoint.\n   * @param config Additional configuration options for the generated Axios client.\n   */\n  constructor(nodeUrl: string, config?: Partial<Gen.OpenAPIConfig>, doNotFixNodeUrl: boolean = false) {\n    if (!nodeUrl) {\n      throw new Error(\"Node URL cannot be empty.\");\n    }\n    const conf = config === undefined || config === null ? {} : { ...config };\n\n    if (doNotFixNodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = fixNodeUrl(nodeUrl);\n    }\n    conf.BASE = this.nodeUrl;\n\n    // Do not carry cookies when `WITH_CREDENTIALS` is explicitly set to `false`. By default, cookies will be sent\n    if (config?.WITH_CREDENTIALS === false) {\n      conf.WITH_CREDENTIALS = false;\n    } else {\n      conf.WITH_CREDENTIALS = true;\n    }\n\n    this.client = new Gen.AptosGeneratedClient(conf);\n  }\n\n  /**\n   * Queries an Aptos account by address\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @returns Core account resource, used for identifying account and transaction execution\n   * @example An example of the returned account\n   * ```\n   * {\n   *    sequence_number: \"1\",\n   *    authentication_key: \"0x5307b5f4bc67829097a8ba9b43dba3b88261eeccd1f709d9bde240fc100fbb69\"\n   * }\n   * ```\n   */\n  @parseApiError\n  async getAccount(accountAddress: MaybeHexString): Promise<Gen.AccountData> {\n    return this.client.accounts.getAccount(HexString.ensure(accountAddress).hex());\n  }\n\n  /**\n   * Queries transactions sent by given account\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param query Optional pagination object\n   * @param query.start The sequence number of the start transaction of the page. Default is 0.\n   * @param query.limit The max number of transactions should be returned for the page. Default is 25.\n   * @returns An array of on-chain transactions, sent by account\n   */\n  @parseApiError\n  async getAccountTransactions(accountAddress: MaybeHexString, query?: PaginationArgs): Promise<Gen.Transaction[]> {\n    return this.client.transactions.getAccountTransactions(\n      HexString.ensure(accountAddress).hex(),\n      query?.start?.toString(),\n      query?.limit,\n    );\n  }\n\n  /**\n   * Queries modules associated with given account\n   *\n   * Note: In order to get all account modules, this function may call the API\n   * multiple times as it paginates.\n   *\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Account modules array for a specific ledger version.\n   * Module is represented by MoveModule interface. It contains module `bytecode` and `abi`,\n   * which is JSON representation of a module\n   */\n  @parseApiError\n  async getAccountModules(\n    accountAddress: MaybeHexString,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveModuleBytecode[]> {\n    // Note: This function does not expose a `limit` parameter because it might\n    // be ambiguous how this is being used. Is it being passed to getAccountModules\n    // to limit the number of items per response, or does it limit the total output\n    // of this function? We avoid this confusion by not exposing the parameter at all.\n    const f = this.client.accounts.getAccountModules.bind({ httpRequest: this.client.request });\n    const out = await paginateWithCursor(f, accountAddress, 1000, query);\n    return out;\n  }\n\n  /**\n   * Queries module associated with given account by module name\n   *\n   * Note: In order to get all account resources, this function may call the API\n   * multiple times as it paginates.\n   *\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param moduleName The name of the module\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Specified module.\n   * Module is represented by MoveModule interface. It contains module `bytecode` and `abi`,\n   * which JSON representation of a module\n   */\n  @parseApiError\n  async getAccountModule(\n    accountAddress: MaybeHexString,\n    moduleName: string,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveModuleBytecode> {\n    return this.client.accounts.getAccountModule(\n      HexString.ensure(accountAddress).hex(),\n      moduleName,\n      query?.ledgerVersion?.toString(),\n    );\n  }\n\n  /**\n   * Queries all resources associated with given account\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Account resources for a specific ledger version\n   */\n  @parseApiError\n  async getAccountResources(\n    accountAddress: MaybeHexString,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveResource[]> {\n    const f = this.client.accounts.getAccountResources.bind({ httpRequest: this.client.request });\n    const out = await paginateWithCursor(f, accountAddress, 9999, query);\n    return out;\n  }\n\n  /**\n   * Queries resource associated with given account by resource type\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param resourceType String representation of an on-chain Move struct type\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Account resource of specified type and ledger version\n   * @example An example of an account resource\n   * ```\n   * {\n   *    type: \"0x1::aptos_coin::AptosCoin\",\n   *    data: { value: 6 }\n   * }\n   * ```\n   */\n  @parseApiError\n  async getAccountResource(\n    accountAddress: MaybeHexString,\n    resourceType: Gen.MoveStructTag,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveResource> {\n    return this.client.accounts.getAccountResource(\n      HexString.ensure(accountAddress).hex(),\n      resourceType,\n      query?.ledgerVersion?.toString(),\n    );\n  }\n\n  /** Generates a signed transaction that can be submitted to the chain for execution. */\n  static generateBCSTransaction(accountFrom: AptosAccount, rawTxn: TxnBuilderTypes.RawTransaction): Uint8Array {\n    const txnBuilder = new TransactionBuilderEd25519((signingMessage: TxnBuilderTypes.SigningMessage) => {\n      // @ts-ignore\n      const sigHexStr = accountFrom.signBuffer(signingMessage);\n      return new TxnBuilderTypes.Ed25519Signature(sigHexStr.toUint8Array());\n    }, accountFrom.pubKey().toUint8Array());\n\n    return txnBuilder.sign(rawTxn);\n  }\n\n  /**\n   * Note: Unless you have a specific reason for using this, it'll probably be simpler\n   * to use `simulateTransaction`.\n   *\n   * Generates a BCS transaction that can be submitted to the chain for simulation.\n   *\n   * @param accountFrom The account that will be used to send the transaction\n   * for simulation.\n   * @param rawTxn The raw transaction to be simulated, likely created by calling\n   * the `generateTransaction` function.\n   * @returns The BCS encoded signed transaction, which you should then pass into\n   * the `submitBCSSimulation` function.\n   */\n  static generateBCSSimulation(accountFrom: AptosAccount, rawTxn: TxnBuilderTypes.RawTransaction): Uint8Array {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const txnBuilder = new TransactionBuilderEd25519((_signingMessage: TxnBuilderTypes.SigningMessage) => {\n      // @ts-ignore\n      const invalidSigBytes = new Uint8Array(64);\n      return new TxnBuilderTypes.Ed25519Signature(invalidSigBytes);\n    }, accountFrom.pubKey().toUint8Array());\n\n    return txnBuilder.sign(rawTxn);\n  }\n\n  /** Generates a transaction request that can be submitted to produce a raw transaction that\n   * can be signed, which upon being signed can be submitted to the blockchain\n   * @param sender Hex-encoded 32 byte Aptos account address of transaction sender\n   * @param payload Transaction payload. It depends on transaction type you want to send\n   * @param options Options allow to overwrite default transaction options.\n   * @returns A transaction object\n   */\n  async generateTransaction(\n    sender: MaybeHexString,\n    payload: Gen.EntryFunctionPayload,\n    options?: Partial<Gen.SubmitTransactionRequest>,\n  ): Promise<TxnBuilderTypes.RawTransaction> {\n    const config: RemoteABIBuilderConfig = { sender };\n    if (options?.sequence_number) {\n      config.sequenceNumber = options.sequence_number;\n    }\n\n    if (options?.gas_unit_price) {\n      config.gasUnitPrice = options.gas_unit_price;\n    }\n\n    if (options?.max_gas_amount) {\n      config.maxGasAmount = options.max_gas_amount;\n    }\n\n    if (options?.expiration_timestamp_secs) {\n      const timestamp = Number.parseInt(options.expiration_timestamp_secs, 10);\n      config.expSecFromNow = timestamp - Math.floor(Date.now() / 1000);\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this, config);\n    return builder.build(payload.function, payload.type_arguments, payload.arguments);\n  }\n\n  /** Converts a transaction request produced by `generateTransaction` into a properly\n   * signed transaction, which can then be submitted to the blockchain\n   * @param accountFrom AptosAccount of transaction sender\n   * @param rawTransaction A raw transaction generated by `generateTransaction` method\n   * @returns A transaction, signed with sender account\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async signTransaction(\n    accountFrom: AptosAccount,\n    rawTransaction: TxnBuilderTypes.RawTransaction,\n  ): Promise<Uint8Array> {\n    return Promise.resolve(AptosClient.generateBCSTransaction(accountFrom, rawTransaction));\n  }\n\n  /**\n   * Event types are globally identifiable by an account `address` and\n   * monotonically increasing `creation_number`, one per event type emitted\n   * to the given account. This API returns events corresponding to that\n   * that event type.\n   * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix,\n   * for which events are queried. This refers to the account that events were emitted\n   * to, not the account hosting the move module that emits that event type.\n   * @param creationNumber Creation number corresponding to the event type.\n   * @returns Array of events assotiated with the given account and creation number.\n   */\n  @parseApiError\n  async getEventsByCreationNumber(\n    address: MaybeHexString,\n    creationNumber: AnyNumber | string,\n    query?: PaginationArgs,\n  ): Promise<Gen.Event[]> {\n    return this.client.events.getEventsByCreationNumber(\n      HexString.ensure(address).hex(),\n      creationNumber.toString(),\n      query?.start?.toString(),\n      query?.limit,\n    );\n  }\n\n  /**\n   * This API uses the given account `address`, `eventHandle`, and `fieldName`\n   * to build a key that can globally identify an event types. It then uses this\n   * key to return events emitted to the given account matching that event type.\n   * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix,\n   * for which events are queried. This refers to the account that events were emitted\n   * to, not the account hosting the move module that emits that event type.\n   * @param eventHandleStruct String representation of an on-chain Move struct type.\n   * (e.g. `0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>`)\n   * @param fieldName The field name of the EventHandle in the struct\n   * @param query Optional query object\n   * @param query.start The start sequence number in the EVENT STREAM, defaulting to the latest event.\n   * The events are returned in the reverse order of sequence number\n   * @param query.limit The number of events to be returned. The default is 25.\n   * @returns Array of events\n   */\n  @parseApiError\n  async getEventsByEventHandle(\n    address: MaybeHexString,\n    eventHandleStruct: Gen.MoveStructTag,\n    fieldName: string,\n    query?: PaginationArgs,\n  ): Promise<Gen.Event[]> {\n    return this.client.events.getEventsByEventHandle(\n      HexString.ensure(address).hex(),\n      eventHandleStruct,\n      fieldName,\n      query?.start?.toString(),\n      query?.limit,\n    );\n  }\n\n  /**\n   * Submits a signed transaction to the transaction endpoint.\n   * @param signedTxn A transaction, signed by `signTransaction` method\n   * @returns Transaction that is accepted and submitted to mempool\n   */\n  async submitTransaction(signedTxn: Uint8Array): Promise<Gen.PendingTransaction> {\n    return this.submitSignedBCSTransaction(signedTxn);\n  }\n\n  /**\n   * Generates and submits a transaction to the transaction simulation\n   * endpoint. For this we generate a transaction with a fake signature.\n   *\n   * @param accountOrPubkey The sender or sender's public key. When private key is available, `AptosAccount` instance\n   * can be used to send the transaction for simulation. If private key is not available, sender's public key can be\n   * used to send the transaction for simulation.\n   * @param rawTransaction The raw transaction to be simulated, likely created\n   * by calling the `generateTransaction` function.\n   * @param query.estimateGasUnitPrice If set to true, the gas unit price in the\n   * transaction will be ignored and the estimated value will be used.\n   * @param query.estimateMaxGasAmount If set to true, the max gas value in the\n   * transaction will be ignored and the maximum possible gas will be used.\n   * @param query.estimatePrioritizedGasUnitPrice If set to true, the transaction will use a higher price than the\n   * original estimate.\n   * @returns The BCS encoded signed transaction, which you should then provide\n   *\n   */\n  async simulateTransaction(\n    accountOrPubkey: AptosAccount | Ed25519PublicKey | MultiEd25519PublicKey,\n    rawTransaction: TxnBuilderTypes.RawTransaction,\n    query?: {\n      estimateGasUnitPrice?: boolean;\n      estimateMaxGasAmount?: boolean;\n      estimatePrioritizedGasUnitPrice: boolean;\n    },\n  ): Promise<Gen.UserTransaction[]> {\n    let signedTxn: Uint8Array;\n\n    if (accountOrPubkey instanceof AptosAccount) {\n      signedTxn = AptosClient.generateBCSSimulation(accountOrPubkey, rawTransaction);\n    } else if (accountOrPubkey instanceof MultiEd25519PublicKey) {\n      const txnBuilder = new TransactionBuilderMultiEd25519(() => {\n        const { threshold } = accountOrPubkey;\n        const bits: Seq<number> = [];\n        const signatures: TxnBuilderTypes.Ed25519Signature[] = [];\n        for (let i = 0; i < threshold; i += 1) {\n          bits.push(i);\n          signatures.push(new TxnBuilderTypes.Ed25519Signature(new Uint8Array(64)));\n        }\n        const bitmap = TxnBuilderTypes.MultiEd25519Signature.createBitmap(bits);\n        return new TxnBuilderTypes.MultiEd25519Signature(signatures, bitmap);\n      }, accountOrPubkey);\n\n      signedTxn = txnBuilder.sign(rawTransaction);\n    } else {\n      const txnBuilder = new TransactionBuilderEd25519(() => {\n        const invalidSigBytes = new Uint8Array(64);\n        return new TxnBuilderTypes.Ed25519Signature(invalidSigBytes);\n      }, accountOrPubkey.toBytes());\n\n      signedTxn = txnBuilder.sign(rawTransaction);\n    }\n    return this.submitBCSSimulation(signedTxn, query);\n  }\n\n  /**\n   * Submits a signed transaction to the endpoint that takes BCS payload\n   *\n   * @param signedTxn A BCS transaction representation\n   * @returns Transaction that is accepted and submitted to mempool\n   */\n  @parseApiError\n  async submitSignedBCSTransaction(signedTxn: Uint8Array): Promise<Gen.PendingTransaction> {\n    // Need to construct a customized post request for transactions in BCS payload\n    return this.client.request.request<Gen.PendingTransaction>({\n      url: \"/transactions\",\n      method: \"POST\",\n      body: signedTxn,\n      mediaType: \"application/x.aptos.signed_transaction+bcs\",\n    });\n  }\n\n  /**\n   * Submits the BCS serialization of a signed transaction to the simulation endpoint.\n   *\n   * @param bcsBody The output of `generateBCSSimulation`.\n   * @param query?.estimateGasUnitPrice If set to true, the gas unit price in the\n   * transaction will be ignored and the estimated value will be used.\n   * @param query?.estimateMaxGasAmount If set to true, the max gas value in the\n   * transaction will be ignored and the maximum possible gas will be used.\n   * @param query?.estimatePrioritizedGasUnitPrice If set to true, the transaction will use a higher price than the\n   * original estimate.\n   * @returns Simulation result in the form of UserTransaction.\n   */\n  @parseApiError\n  async submitBCSSimulation(\n    bcsBody: Uint8Array,\n    query?: {\n      estimateGasUnitPrice?: boolean;\n      estimateMaxGasAmount?: boolean;\n      estimatePrioritizedGasUnitPrice?: boolean;\n    },\n  ): Promise<Gen.UserTransaction[]> {\n    // Need to construct a customized post request for transactions in BCS payload.\n    const queryParams = {\n      estimate_gas_unit_price: query?.estimateGasUnitPrice ?? false,\n      estimate_max_gas_amount: query?.estimateMaxGasAmount ?? false,\n      estimate_prioritized_gas_unit_price: query?.estimatePrioritizedGasUnitPrice ?? false,\n    };\n    return this.client.request.request<Gen.UserTransaction[]>({\n      url: \"/transactions/simulate\",\n      query: queryParams,\n      method: \"POST\",\n      body: bcsBody,\n      mediaType: \"application/x.aptos.signed_transaction+bcs\",\n    });\n  }\n\n  /**\n   * Queries on-chain transactions. This function will not return pending\n   * transactions. For that, use `getTransactionsByHash`.\n   *\n   * @param query Optional pagination object\n   * @param query.start The start transaction version of the page. Default is the latest ledger version\n   * @param query.limit The max number of transactions should be returned for the page. Default is 25\n   * @returns Array of on-chain transactions\n   */\n  @parseApiError\n  async getTransactions(query?: PaginationArgs): Promise<Gen.Transaction[]> {\n    return this.client.transactions.getTransactions(query?.start?.toString(), query?.limit);\n  }\n\n  /**\n   * @param txnHash - Transaction hash should be hex-encoded bytes string with 0x prefix.\n   * @returns Transaction from mempool (pending) or on-chain (committed) transaction\n   */\n  @parseApiError\n  async getTransactionByHash(txnHash: string): Promise<Gen.Transaction> {\n    return this.client.transactions.getTransactionByHash(txnHash);\n  }\n\n  /**\n   * @param txnVersion - Transaction version is an uint64 number.\n   * @returns On-chain transaction. Only on-chain transactions have versions, so this\n   * function cannot be used to query pending transactions.\n   */\n  @parseApiError\n  async getTransactionByVersion(txnVersion: AnyNumber): Promise<Gen.Transaction> {\n    return this.client.transactions.getTransactionByVersion(txnVersion.toString());\n  }\n\n  /**\n   * Defines if specified transaction is currently in pending state\n   * @param txnHash A hash of transaction\n   *\n   * To create a transaction hash:\n   *\n   * 1. Create hash message bytes: \"Aptos::Transaction\" bytes + BCS bytes of Transaction.\n   * 2. Apply hash algorithm SHA3-256 to the hash message bytes.\n   * 3. Hex-encode the hash bytes with 0x prefix.\n   *\n   * @returns `true` if transaction is in pending state and `false` otherwise\n   */\n  async transactionPending(txnHash: string): Promise<boolean> {\n    try {\n      const response = await this.client.transactions.getTransactionByHash(txnHash);\n      return response.type === \"pending_transaction\";\n    } catch (e: any) {\n      if (e?.status === 404) {\n        return true;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Wait for a transaction to move past pending state.\n   *\n   * There are 4 possible outcomes:\n   * 1. Transaction is processed and successfully committed to the blockchain.\n   * 2. Transaction is rejected for some reason, and is therefore not committed\n   *    to the blockchain.\n   * 3. Transaction is committed but execution failed, meaning no changes were\n   *    written to the blockchain state.\n   * 4. Transaction is not processed within the specified timeout.\n   *\n   * In case 1, this function resolves with the transaction response returned\n   * by the API.\n   *\n   * In case 2, the function will throw an ApiError, likely with an HTTP status\n   * code indicating some problem with the request (e.g. 400).\n   *\n   * In case 3, if `checkSuccess` is false (the default), this function returns\n   * the transaction response just like in case 1, in which the `success` field\n   * will be false. If `checkSuccess` is true, it will instead throw a\n   * FailedTransactionError.\n   *\n   * In case 4, this function throws a WaitForTransactionError.\n   *\n   * @param txnHash The hash of a transaction previously submitted to the blockchain.\n   * @param extraArgs.timeoutSecs Timeout in seconds. Defaults to 20 seconds.\n   * @param extraArgs.checkSuccess See above. Defaults to false.\n   * @returns See above.\n   *\n   * @example\n   * ```\n   * const rawTransaction = await this.generateRawTransaction(sender.address(), payload, extraArgs);\n   * const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTransaction);\n   * const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n   * const transasction = await this.aptosClient.waitForTransactionWithResult(pendingTransaction.hash);\n   * ```\n   */\n  async waitForTransactionWithResult(\n    txnHash: string,\n    extraArgs?: { timeoutSecs?: number; checkSuccess?: boolean },\n  ): Promise<Gen.Transaction> {\n    const timeoutSecs = extraArgs?.timeoutSecs ?? DEFAULT_TXN_TIMEOUT_SEC;\n    const checkSuccess = extraArgs?.checkSuccess ?? false;\n\n    let isPending = true;\n    let count = 0;\n    let lastTxn: Gen.Transaction | undefined;\n    while (isPending) {\n      if (count >= timeoutSecs) {\n        break;\n      }\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        lastTxn = await this.client.transactions.getTransactionByHash(txnHash);\n        isPending = lastTxn.type === \"pending_transaction\";\n        if (!isPending) {\n          break;\n        }\n      } catch (e) {\n        // In short, this means we will retry if it was an ApiError and the code was 404 or 5xx.\n        const isApiError = e instanceof Gen.ApiError;\n        const isRequestError = isApiError && e.status !== 404 && e.status >= 400 && e.status < 500;\n        if (!isApiError || isRequestError) {\n          throw e;\n        }\n      }\n      // eslint-disable-next-line no-await-in-loop\n      await sleep(1000);\n      count += 1;\n    }\n\n    // There is a chance that lastTxn is still undefined. Let's throw some error here\n    if (lastTxn === undefined) {\n      throw new Error(`Waiting for transaction ${txnHash} failed`);\n    }\n\n    if (isPending) {\n      throw new WaitForTransactionError(\n        `Waiting for transaction ${txnHash} timed out after ${timeoutSecs} seconds`,\n        lastTxn,\n      );\n    }\n    if (!checkSuccess) {\n      return lastTxn;\n    }\n    if (!(lastTxn as any)?.success) {\n      throw new FailedTransactionError(\n        `Transaction ${txnHash} committed to the blockchain but execution failed`,\n        lastTxn,\n      );\n    }\n    return lastTxn;\n  }\n\n  /**\n   * This function works the same as `waitForTransactionWithResult` except it\n   * doesn't return the transaction in those cases, it returns nothing. For\n   * more information, see the documentation for `waitForTransactionWithResult`.\n   */\n  async waitForTransaction(\n    txnHash: string,\n    extraArgs?: { timeoutSecs?: number; checkSuccess?: boolean },\n  ): Promise<void> {\n    await this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n\n  /**\n   * Queries the latest ledger information\n   * @returns Latest ledger information\n   * @example Example of returned data\n   * ```\n   * {\n   *   chain_id: 15,\n   *   epoch: 6,\n   *   ledgerVersion: \"2235883\",\n   *   ledger_timestamp:\"1654580922321826\"\n   * }\n   * ```\n   */\n  @parseApiError\n  async getLedgerInfo(): Promise<Gen.IndexResponse> {\n    return this.client.general.getLedgerInfo();\n  }\n\n  /**\n   * @returns Current chain id\n   */\n  @Memoize()\n  async getChainId(): Promise<number> {\n    const result = await this.getLedgerInfo();\n    return result.chain_id;\n  }\n\n  /**\n   * Gets a table item for a table identified by the handle and the key for the item.\n   * Key and value types need to be passed in to help with key serialization and value deserialization.\n   * @param handle A pointer to where that table is stored\n   * @param data Object, that describes table item\n   * @param data.key_type Move type of table key (e.g. `vector<u8>`)\n   * @param data.value_type Move type of table value (e.g. `u64`)\n   * @param data.key Value of table key\n   * @returns Table item value rendered in JSON\n   */\n  @parseApiError\n  async getTableItem(handle: string, data: Gen.TableItemRequest, query?: { ledgerVersion?: AnyNumber }): Promise<any> {\n    const tableItem = await this.client.tables.getTableItem(handle, data, query?.ledgerVersion?.toString());\n    return tableItem;\n  }\n\n  /**\n   * Generates a raw transaction out of a transaction payload\n   * @param accountFrom\n   * @param payload\n   * @param extraArgs\n   * @returns\n   */\n  async generateRawTransaction(\n    accountFrom: HexString,\n    payload: TxnBuilderTypes.TransactionPayload,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<TxnBuilderTypes.RawTransaction> {\n    const [{ sequence_number: sequenceNumber }, chainId, { gas_estimate: gasEstimate }] = await Promise.all([\n      this.getAccount(accountFrom),\n      this.getChainId(),\n      extraArgs?.gasUnitPrice ? Promise.resolve({ gas_estimate: extraArgs.gasUnitPrice }) : this.estimateGasPrice(),\n    ]);\n\n    const { maxGasAmount, gasUnitPrice, expireTimestamp } = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      gasUnitPrice: BigInt(gasEstimate),\n      expireTimestamp: BigInt(Math.floor(Date.now() / 1000) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n      ...extraArgs,\n    };\n\n    return new TxnBuilderTypes.RawTransaction(\n      TxnBuilderTypes.AccountAddress.fromHex(accountFrom),\n      BigInt(sequenceNumber),\n      payload,\n      maxGasAmount,\n      gasUnitPrice,\n      expireTimestamp,\n      new TxnBuilderTypes.ChainId(chainId),\n    );\n  }\n\n  /**\n   * Helper for generating, signing, and submitting a transaction.\n   *\n   * @param sender AptosAccount of transaction sender.\n   * @param payload Transaction payload.\n   * @param extraArgs Extra args for building the transaction payload.\n   * @returns The transaction response from the API.\n   */\n  async generateSignSubmitTransaction(\n    sender: AptosAccount,\n    payload: TxnBuilderTypes.TransactionPayload,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // :!:>generateSignSubmitTransactionInner\n    const rawTransaction = await this.generateRawTransaction(sender.address(), payload, extraArgs);\n    const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTransaction);\n    const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n    // <:!:generateSignSubmitTransactionInner\n  }\n\n  /**\n   * Publishes a move package. `packageMetadata` and `modules` can be generated with command\n   * `aptos move compile --save-metadata [ --included-artifacts=<...> ]`.\n   * @param sender\n   * @param packageMetadata package metadata bytes\n   * @param modules bytecodes of modules\n   * @param extraArgs\n   * @returns Transaction hash\n   */\n  async publishPackage(\n    sender: AptosAccount,\n    packageMetadata: Bytes,\n    modules: Seq<TxnBuilderTypes.Module>,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const codeSerializer = new Serializer();\n    serializeVector(modules, codeSerializer);\n\n    const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        \"0x1::code\",\n        \"publish_package_txn\",\n        [],\n        [bcsSerializeBytes(packageMetadata), codeSerializer.getBytes()],\n      ),\n    );\n\n    return this.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n\n  /**\n   * Helper for generating, submitting, and waiting for a transaction, and then\n   * checking whether it was committed successfully. Under the hood this is just\n   * `generateSignSubmitTransaction` and then `waitForTransactionWithResult`, see\n   * those for information about the return / error semantics of this function.\n   */\n  async generateSignSubmitWaitForTransaction(\n    sender: AptosAccount,\n    payload: TxnBuilderTypes.TransactionPayload,\n    extraArgs?: OptionalTransactionArgs & {\n      checkSuccess?: boolean;\n      timeoutSecs?: number;\n    },\n  ): Promise<Gen.Transaction> {\n    const txnHash = await this.generateSignSubmitTransaction(sender, payload, extraArgs);\n    return this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n\n  @parseApiError\n  @Memoize({\n    ttlMs: 5 * 60 * 1000, // cache result for 5min\n    tags: [\"gas_estimates\"],\n  })\n  async estimateGasPrice(): Promise<Gen.GasEstimation> {\n    return this.client.transactions.estimateGasPrice();\n  }\n\n  @parseApiError\n  async estimateMaxGasAmount(forAccount: MaybeHexString): Promise<Uint64> {\n    // Only Aptos utility coin is accepted as gas\n    const typeTag = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n\n    const [{ gas_estimate: gasUnitPrice }, resources] = await Promise.all([\n      this.estimateGasPrice(),\n      this.getAccountResources(forAccount),\n    ]);\n\n    const accountResource = resources.find((r) => r.type === typeTag);\n    const balance = BigInt((accountResource!.data as any).coin.value);\n    return balance / BigInt(gasUnitPrice);\n  }\n\n  /**\n   * Rotate an account's auth key. After rotation, only the new private key can be used to sign txns for\n   * the account.\n   * WARNING: You must create a new instance of AptosAccount after using this function.\n   * @param forAccount Account of which the auth key will be rotated\n   * @param toPrivateKeyBytes New private key\n   * @param extraArgs Extra args for building the transaction payload.\n   * @returns PendingTransaction\n   */\n  async rotateAuthKeyEd25519(\n    forAccount: AptosAccount,\n    toPrivateKeyBytes: Uint8Array,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<Gen.PendingTransaction> {\n    const { sequence_number: sequenceNumber, authentication_key: authKey } = await this.getAccount(\n      forAccount.address(),\n    );\n\n    const helperAccount = new AptosAccount(toPrivateKeyBytes);\n\n    const challenge = new TxnBuilderTypes.RotationProofChallenge(\n      TxnBuilderTypes.AccountAddress.CORE_CODE_ADDRESS,\n      \"account\",\n      \"RotationProofChallenge\",\n      BigInt(sequenceNumber),\n      TxnBuilderTypes.AccountAddress.fromHex(forAccount.address()),\n      new TxnBuilderTypes.AccountAddress(new HexString(authKey).toUint8Array()),\n      helperAccount.pubKey().toUint8Array(),\n    );\n\n    const challengeHex = HexString.fromUint8Array(bcsToBytes(challenge));\n\n    const proofSignedByCurrentPrivateKey = forAccount.signHexString(challengeHex);\n\n    const proofSignedByNewPrivateKey = helperAccount.signHexString(challengeHex);\n\n    const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        \"0x1::account\",\n        \"rotate_authentication_key\",\n        [],\n        [\n          bcsSerializeU8(0), // ed25519 scheme\n          bcsSerializeBytes(forAccount.pubKey().toUint8Array()),\n          bcsSerializeU8(0), // ed25519 scheme\n          bcsSerializeBytes(helperAccount.pubKey().toUint8Array()),\n          bcsSerializeBytes(proofSignedByCurrentPrivateKey.toUint8Array()),\n          bcsSerializeBytes(proofSignedByNewPrivateKey.toUint8Array()),\n        ],\n      ),\n    );\n\n    const rawTransaction = await this.generateRawTransaction(forAccount.address(), payload, extraArgs);\n    const bcsTxn = AptosClient.generateBCSTransaction(forAccount, rawTransaction);\n    return this.submitSignedBCSTransaction(bcsTxn);\n  }\n\n  /**\n   * Lookup the original address by the current derived address\n   * @param addressOrAuthKey\n   * @returns original address\n   */\n  async lookupOriginalAddress(addressOrAuthKey: MaybeHexString): Promise<HexString> {\n    const resource = await this.getAccountResource(\"0x1\", \"0x1::account::OriginatingAddress\");\n\n    const {\n      address_map: { handle },\n    } = resource.data as any;\n\n    const origAddress = await this.getTableItem(handle, {\n      key_type: \"address\",\n      value_type: \"address\",\n      key: HexString.ensure(addressOrAuthKey).hex(),\n    });\n\n    return new HexString(origAddress);\n  }\n\n  /**\n   * Get block by height\n   *\n   * @param blockHeight Block height to lookup.  Starts at 0\n   * @param withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block\n   */\n  @parseApiError\n  async getBlockByHeight(blockHeight: number, withTransactions?: boolean): Promise<Gen.Block> {\n    return this.client.blocks.getBlockByHeight(blockHeight, withTransactions);\n  }\n\n  /**\n   * Get block by block transaction version\n   *\n   * @param version Ledger version to lookup block information for\n   * @param withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block\n   */\n  @parseApiError\n  async getBlockByVersion(version: number, withTransactions?: boolean): Promise<Gen.Block> {\n    return this.client.blocks.getBlockByVersion(version, withTransactions);\n  }\n\n  /**\n   * Call for a move view function\n   *\n   * @param payload Transaction payload\n   * @param version (optional) Ledger version to lookup block information for\n   *\n   * @returns MoveValue[]\n   */\n  @parseApiError\n  async view(payload: Gen.ViewRequest, ledger_version?: string): Promise<Gen.MoveValue[]> {\n    return this.client.view.view(payload, ledger_version);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  clearCache(tags: string[]) {\n    clear(tags);\n  }\n}\n\nexport class ApiError extends Error {\n  constructor(\n    public readonly status: number,\n    public readonly message: string,\n    public readonly errorCode?: string,\n    public readonly vmErrorCode?: string,\n  ) {\n    super(message);\n  }\n}\n\n/**\n * This error is used by `waitForTransactionWithResult` when waiting for a\n * transaction times out.\n */\nexport class WaitForTransactionError extends Error {\n  public readonly lastSubmittedTransaction: Gen.Transaction | undefined;\n\n  constructor(message: string, lastSubmittedTransaction: Gen.Transaction | undefined) {\n    super(message);\n    this.lastSubmittedTransaction = lastSubmittedTransaction;\n  }\n}\n\n/**\n * This error is used by `waitForTransactionWithResult` if `checkSuccess` is true.\n * See that function for more information.\n */\nexport class FailedTransactionError extends Error {\n  public readonly transaction: Gen.Transaction;\n\n  constructor(message: string, transaction: Gen.Transaction) {\n    super(message);\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Creates a decorator to parse Gen.ApiError and return a wrapped error that is more developer friendly\n */\nfunction parseApiError(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n  const childFunction = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = async function wrapper(...args: any[]) {\n    try {\n      // We need to explicitly await here so that the function is called and\n      // potentially throws an error. If we just return without awaiting, the\n      // promise is returned directly and the catch block cannot trigger.\n      const res = await childFunction.apply(this, [...args]);\n      return res;\n    } catch (e) {\n      if (e instanceof Gen.ApiError) {\n        throw new ApiError(\n          e.status,\n          JSON.stringify({ message: e.message, ...e.body }),\n          e.body?.error_code,\n          e.body?.vm_error_code,\n        );\n      }\n      throw e;\n    }\n  };\n  return descriptor;\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable max-len */\n\n// ecosystem/typescript/sdk/src/move_scripts/token_transfer_with_opt_in\nexport const TOKEN_TRANSFER_OPT_IN =\n  \"a11ceb0b0500000006010004020408030c0a05161d073339086c400000010100020700010307000104030100010504020007060c0508000800030503010801000405080008000304060c0801050306737472696e6705746f6b656e06537472696e6707546f6b656e4964136372656174655f746f6b656e5f69645f726177087472616e73666572000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000010c0b010b020b030b0411000c070b000b070b050b06110102\";\n\n/*\nFollow these steps to get the ABI strings:\n\nGo to the package directory of the relevant Move module, e.g. if you're trying\nto get the ABI for the `transfer` function of `aptos_account.move`, go to\nthe directory `aptos-move/framework/aptos-framework`.\n\nCompile the Move packages with the Aptos CLI:\n```\naptos move compile --included-artifacts all\n```\nThis `--included-artifacts all` argument is necessary to generate ABIs.\n\nFind the ABI files under the `build` directory and convert the ABI files to hex strings.\nOn Mac and Linux, this can be done with this command:\n```\ncat <ABI_FILE_PATH> | od -v -t x1 -A n | tr -d ' \\n'\n```\nFor example:\n```\ncat build/AptosFramework/abis/aptos_account/transfer.abi | od -v -t x1 -A n | tr -d ' \\n'\n```\n*/\nexport const TOKEN_ABIS = [\n  // aptos-token/build/AptosToken/abis/token/create_collection_script.abi\nn  // aptos-token/build/AptosToken/abis/token/create_token_script.abi\n  \"01136372656174655F746F6B656E5F736372697074000000000000000000000000000000000000000000000000000000000000000305746F6B656E1D2063726561746520746F6B656E20776974682072617720696E70757473000D0A636F6C6C656374696F6E07000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E6700046E616D6507000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E67000B6465736372697074696F6E07000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E67000762616C616E636502076D6178696D756D020375726907000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E670015726F79616C74795F70617965655F61646472657373041A726F79616C74795F706F696E74735F64656E6F6D696E61746F720218726F79616C74795F706F696E74735F6E756D657261746F72020E6D75746174655F73657474696E6706000D70726F70657274795F6B6579730607000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E67000F70726F70657274795F76616C7565730606010E70726F70657274795F74797065730607000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E6700\",\n  // aptos-token/build/AptosToken/abis/token/direct_transfer_script.abi\n  \"01166469726563745f7472616e736665725f736372697074000000000000000000000000000000000000000000000000000000000000000305746f6b656e0000051063726561746f72735f61646472657373040a636f6c6c656374696f6e07000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e6700046e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67001070726f70657274795f76657273696f6e0206616d6f756e7402\",\n  // aptos-token/build/AptosToken/abis/token_transfers/offer_script.abi\n  \"010C6F666665725F73637269707400000000000000000000000000000000000000000000000000000000000000030F746F6B656E5F7472616E7366657273000006087265636569766572040763726561746F72040A636F6C6C656374696F6E07000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E6700046E616D6507000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E67001070726F70657274795F76657273696F6E0206616D6F756E7402\",\n  // aptos-token/build/AptosToken/abis/token_transfers/claim_script.abi\n  \"010C636C61696D5F73637269707400000000000000000000000000000000000000000000000000000000000000030F746F6B656E5F7472616E73666572730000050673656E646572040763726561746F72040A636F6C6C656374696F6E07000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E6700046E616D6507000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E67001070726F70657274795F76657273696F6E02\",\n  // aptos-token/build/AptosToken/abis/token_transfers/cancel_offer_script.abi\n  \"011363616E63656C5F6F666665725F73637269707400000000000000000000000000000000000000000000000000000000000000030F746F6B656E5F7472616E7366657273000005087265636569766572040763726561746F72040A636F6C6C656374696F6E07000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E6700046E616D6507000000000000000000000000000000000000000000000000000000000000000106737472696E6706537472696E67001070726F70657274795F76657273696F6E02\",\n  // aptos-token/build/AptosToken/abis/token/mutate_token_properties.abi\n  \"01176d75746174655f746f6b656e5f70726f70657274696573000000000000000000000000000000000000000000000000000000000000000305746f6b656eba02206d75746174652074686520746f6b656e2070726f706572747920616e64207361766520746865206e65772070726f706572747920696e20546f6b656e53746f72650a2069662074686520746f6b656e2070726f70657274795f76657273696f6e20697320302c2077652077696c6c206372656174652061206e65772070726f70657274795f76657273696f6e2070657220746f6b656e20746f2067656e65726174652061206e657720746f6b656e5f69642070657220746f6b656e0a2069662074686520746f6b656e2070726f70657274795f76657273696f6e206973206e6f7420302c2077652077696c6c206a75737420757064617465207468652070726f70657274794d617020616e642075736520746865206578697374696e6720746f6b656e5f6964202870726f70657274795f76657273696f6e2900090b746f6b656e5f6f776e6572040763726561746f72040f636f6c6c656374696f6e5f6e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67000a746f6b656e5f6e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e670016746f6b656e5f70726f70657274795f76657273696f6e0206616d6f756e7402046b6579730607000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67000676616c7565730606010574797065730607000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e6700\",\n  // aptos-token/build/AptosToken/abis/token/opt_in_direct_transfer.abi\n  \"01166f70745f696e5f6469726563745f7472616e73666572000000000000000000000000000000000000000000000000000000000000000305746f6b656e000001066f70745f696e00\",\n  // aptos-token/build/AptosToken/abis/token/burn.abi\n  \"01046275726e000000000000000000000000000000000000000000000000000000000000000305746f6b656e20204275726e206120746f6b656e2062792074686520746f6b656e206f776e657200051063726561746f72735f61646472657373040a636f6c6c656374696f6e07000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e6700046e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67001070726f70657274795f76657273696f6e0206616d6f756e7402\",\n  // aptos-token/build/AptosToken/abis/token/burn_by_creator.abi\n  \"010f6275726e5f62795f63726561746f72000000000000000000000000000000000000000000000000000000000000000305746f6b656e6a204275726e206120746f6b656e2062792063726561746f72207768656e2074686520746f6b656e2773204255524e41424c455f42595f43524541544f5220697320747275650a2054686520746f6b656e206973206f776e65642061742061646472657373206f776e65720005056f776e6572040a636f6c6c656374696f6e07000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e6700046e616d6507000000000000000000000000000000000000000000000000000000000000000106737472696e6706537472696e67001070726f70657274795f76657273696f6e0206616d6f756e7402\",\n];\n\nexport const COIN_ABIS = [\n  // aptos-framework/build/AptosFramework/abis/coin/transfer.abi\n  \"01087472616E73666572000000000000000000000000000000000000000000000000000000000000000104636F696E3C205472616E73666572732060616D6F756E7460206F6620636F696E732060436F696E54797065602066726F6D206066726F6D6020746F2060746F602E0109636F696E5F747970650202746F0406616D6F756E7402\",\n  // aptos-framework/build/AptosFramework/abis/aptos_account/transfer.abi\n  \"01087472616e7366657200000000000000000000000000000000000000000000000000000000000000010d6170746f735f6163636f756e7400000202746f0406616d6f756e7402\",\n];\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosAccount, getAddressFromAccountOrAddress } from \"./aptos_account\";\nimport { AptosClient, OptionalTransactionArgs } from \"./aptos_client\";\nimport { HexString, MaybeHexString } from \"./hex_string\";\nimport { TransactionBuilderABI } from \"./transaction_builder\";\nimport { COIN_ABIS } from \"./abis\";\nimport { APTOS_COIN } from \"./utils\";\n\n/**\n * Class for working with the coin module, such as transferring coins and\n * checking balances.\n */\nexport class CoinClient {\n  aptosClient: AptosClient;\n\n  transactionBuilder: TransactionBuilderABI;\n\n  /**\n   * Creates new CoinClient instance\n   * @param aptosClient AptosClient instance\n   */\n  constructor(aptosClient: AptosClient) {\n    this.aptosClient = aptosClient;\n    this.transactionBuilder = new TransactionBuilderABI(COIN_ABIS.map((abi) => new HexString(abi).toUint8Array()));\n  }\n\n  /**\n   * Generate, sign, and submit a transaction to the Aptos blockchain API to\n   * transfer coins from one account to another. By default it transfers\n   * 0x1::aptos_coin::AptosCoin, but you can specify a different coin type\n   * with the `coinType` argument.\n   *\n   * You may set `createReceiverIfMissing` to true if you want to create the\n   * receiver account if it does not exist on chain yet. If you do not set\n   * this to true, the transaction will fail if the receiver account does not\n   * exist on-chain.\n   *\n   * @param from Account sending the coins\n   * @param to Account to receive the coins\n   * @param amount Number of coins to transfer\n   * @param extraArgs Extra args for building the transaction or configuring how\n   * the client should submit and wait for the transaction\n   * @returns The hash of the transaction submitted to the API\n   */\n  // :!:>transfer\n  async transfer(\n    from: AptosAccount,\n    to: AptosAccount | MaybeHexString,\n    amount: number | bigint,\n    extraArgs?: OptionalTransactionArgs & {\n      // The coin type to use, defaults to 0x1::aptos_coin::AptosCoin\n      coinType?: string;\n      // If set, create the `receiver` account if it doesn't exist on-chain.\n      // This is done by calling `0x1::aptos_account::transfer` instead, which\n      // will create the account on-chain first if it doesn't exist before\n      // transferring the coins to it.\n      createReceiverIfMissing?: boolean;\n    },\n  ): Promise<string> {\n    // If none is explicitly given, use 0x1::aptos_coin::AptosCoin as the coin type.\n    const coinTypeToTransfer = extraArgs?.coinType ?? APTOS_COIN;\n\n    // If we should create the receiver account if it doesn't exist on-chain,\n    // use the `0x1::aptos_account::transfer` function.\n    const func = extraArgs?.createReceiverIfMissing ? \"0x1::aptos_account::transfer\" : \"0x1::coin::transfer\";\n\n    // If we're using the `0x1::aptos_account::transfer` function, we don't\n    // need type args.\n    const typeArgs = extraArgs?.createReceiverIfMissing ? [] : [coinTypeToTransfer];\n\n    // Get the receiver address from the AptosAccount or MaybeHexString.\n    const toAddress = getAddressFromAccountOrAddress(to);\n\n    const payload = this.transactionBuilder.buildTransactionPayload(func, typeArgs, [toAddress, amount]);\n\n    return this.aptosClient.generateSignSubmitTransaction(from, payload, extraArgs);\n  } // <:!:transfer\n\n  /**\n   * Get the balance of the account. By default it checks the balance of\n   * 0x1::aptos_coin::AptosCoin, but you can specify a different coin type.\n   *\n   * @param account Account that you want to get the balance of.\n   * @param extraArgs Extra args for checking the balance.\n   * @returns Promise that resolves to the balance as a bigint.\n   */\n  // :!:>checkBalance\n  async checkBalance(\n    account: AptosAccount | MaybeHexString,\n    extraArgs?: {\n      // The coin type to use, defaults to 0x1::aptos_coin::AptosCoin\n      coinType?: string;\n    },\n  ): Promise<bigint> {\n    const coinType = extraArgs?.coinType ?? APTOS_COIN;\n    const typeTag = `0x1::coin::CoinStore<${coinType}>`;\n    const address = getAddressFromAccountOrAddress(account);\n    const accountResource = await this.aptosClient.getAccountResource(address, typeTag);\n    return BigInt((accountResource.data as any).coin.value);\n  } // <:!:checkBalance\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/** Faucet creates and funds accounts. This is a thin wrapper around that. */\nimport { AptosClient } from \"./aptos_client\";\nimport { OpenAPIConfig } from \"./generated\";\nimport { AxiosHttpRequest } from \"./generated/core/AxiosHttpRequest\";\nimport { HexString, MaybeHexString } from \"./hex_string\";\nimport { DEFAULT_TXN_TIMEOUT_SEC } from \"./utils\";\n\n/**\n * Class for requsting tokens from faucet\n */\nexport class FaucetClient extends AptosClient {\n  faucetRequester: AxiosHttpRequest;\n\n  /**\n   * Establishes a connection to Aptos node\n   * @param nodeUrl A url of the Aptos Node API endpoint\n   * @param faucetUrl A faucet url\n   * @param config An optional config for inner axios instance\n   * Detailed config description: {@link https://github.com/axios/axios#request-config}\n   */\n  constructor(nodeUrl: string, faucetUrl: string, config?: Partial<OpenAPIConfig>) {\n    super(nodeUrl, config);\n\n    if (!faucetUrl) {\n      throw new Error(\"Faucet URL cannot be empty.\");\n    }\n    // Build a requester configured to talk to the faucet.\n    this.faucetRequester = new AxiosHttpRequest({\n      BASE: faucetUrl,\n      VERSION: config?.VERSION ?? \"0.1.0\",\n      WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n      CREDENTIALS: config?.CREDENTIALS ?? \"include\",\n      TOKEN: config?.TOKEN,\n      USERNAME: config?.USERNAME,\n      PASSWORD: config?.PASSWORD,\n      HEADERS: config?.HEADERS,\n      ENCODE_PATH: config?.ENCODE_PATH,\n    });\n  }\n\n  /**\n   * This creates an account if it does not exist and mints the specified amount of\n   * coins into that account\n   * @param address Hex-encoded 16 bytes Aptos account address wich mints tokens\n   * @param amount Amount of tokens to mint\n   * @param timeoutSecs\n   * @returns Hashes of submitted transactions\n   */\n  async fundAccount(address: MaybeHexString, amount: number, timeoutSecs = DEFAULT_TXN_TIMEOUT_SEC): Promise<string[]> {\n    const tnxHashes = await this.faucetRequester.request<Array<string>>({\n      method: \"POST\",\n      url: \"/mint\",\n      query: {\n        address: HexString.ensure(address).noPrefix(),\n        amount,\n      },\n    });\n\n    const promises: Promise<void>[] = [];\n    for (let i = 0; i < tnxHashes.length; i += 1) {\n      const tnxHash = tnxHashes[i];\n      promises.push(this.waitForTransaction(tnxHash, { timeoutSecs }));\n    }\n    await Promise.all(promises);\n    return tnxHashes;\n  }\n}\n","import { Bytes, Deserializer, Serializer } from \"../bcs\";\nimport { TypeTagParser } from \"../transaction_builder\";\nimport { serializeArg, stringStructTag } from \"../transaction_builder/builder_utils\";\nimport {\n  TypeTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagStruct,\n  TypeTagU128,\n  TypeTagU64,\n  TypeTagU8,\n} from \"../aptos_types\";\nimport { HexString } from \"../hex_string\";\n\nexport class PropertyValue {\n  type: string;\n\n  value: any;\n\n  constructor(type: string, value: string) {\n    this.type = type;\n    this.value = value;\n  }\n}\n\nexport class PropertyMap {\n  data: { [key: string]: PropertyValue };\n\n  constructor() {\n    this.data = {};\n  }\n\n  setProperty(key: string, value: PropertyValue) {\n    this.data[key] = value;\n  }\n}\n\nexport function getPropertyType(typ: string): TypeTag {\n  let typeTag: TypeTag;\n  if (typ === \"string\" || typ === \"String\") {\n    typeTag = new TypeTagStruct(stringStructTag);\n  } else {\n    typeTag = new TypeTagParser(typ).parseTypeTag();\n  }\n  return typeTag;\n}\n\nexport function getPropertyValueRaw(values: Array<string>, types: Array<string>): Array<Bytes> {\n  if (values.length !== types.length) {\n    throw new Error(\"Length of property values and types not match\");\n  }\n\n  const results = new Array<Bytes>();\n  types.forEach((typ, index) => {\n    try {\n      const typeTag = getPropertyType(typ);\n      const serializer = new Serializer();\n      serializeArg(values[index], typeTag, serializer);\n      results.push(serializer.getBytes());\n    } catch (error) {\n      // if not support type, just use the raw string bytes\n      results.push(new TextEncoder().encode(values[index]));\n    }\n  });\n  return results;\n}\n\nexport function deserializePropertyMap(rawPropertyMap: any): PropertyMap {\n  const entries = rawPropertyMap.map.data;\n  const pm = new PropertyMap();\n  entries.forEach((prop: any) => {\n    const { key } = prop;\n    const val: string = prop.value.value;\n    const typ: string = prop.value.type;\n    const typeTag = getPropertyType(typ);\n    const newValue = deserializeValueBasedOnTypeTag(typeTag, val);\n    const pv = new PropertyValue(typ, newValue);\n    pm.setProperty(key, pv);\n  });\n  return pm;\n}\n\nexport function deserializeValueBasedOnTypeTag(tag: TypeTag, val: string): string {\n  const de = new Deserializer(new HexString(val).toUint8Array());\n  let res: string = \"\";\n  if (tag instanceof TypeTagU8) {\n    res = de.deserializeU8().toString();\n  } else if (tag instanceof TypeTagU64) {\n    res = de.deserializeU64().toString();\n  } else if (tag instanceof TypeTagU128) {\n    res = de.deserializeU128().toString();\n  } else if (tag instanceof TypeTagBool) {\n    res = de.deserializeBool() ? \"true\" : \"false\";\n  } else if (tag instanceof TypeTagAddress) {\n    res = HexString.fromUint8Array(de.deserializeFixedBytes(32)).hex();\n  } else if (tag instanceof TypeTagStruct && (tag as TypeTagStruct).isStringTypeTag()) {\n    res = de.deserializeStr();\n  } else {\n    res = val;\n  }\n  return res;\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { deserializePropertyMap, PropertyMap, PropertyValue } from \"./utils/property_map_serde\";\n\nexport { PropertyMap, PropertyValue };\nexport class TokenData {\n  /** Unique name within this creator's account for this Token's collection */\n  collection: string;\n\n  /** Description of Token */\n  description: string;\n\n  /** Name of Token */\n  name: string;\n\n  /** Optional maximum number of this Token */\n  maximum?: number;\n\n  /** Total number of this type of Token */\n  supply: number;\n\n  /** URL for additional information / media */\n  uri: string;\n\n  /** default properties of token data */\n  default_properties: PropertyMap;\n\n  /** mutability config of tokendata fields */\n  mutability_config: boolean[];\n\n  constructor(\n    collection: string,\n    description: string,\n    name: string,\n    maximum: number,\n    supply: number,\n    uri: string,\n    default_properties: any,\n    mutability_config: boolean[],\n  ) {\n    this.collection = collection;\n    this.description = description;\n    this.name = name;\n    this.maximum = maximum;\n    this.supply = supply;\n    this.uri = uri;\n    this.default_properties = deserializePropertyMap(default_properties);\n    this.mutability_config = mutability_config;\n  }\n}\n\nexport interface TokenDataId {\n  /** Token creator address */\n  creator: string;\n\n  /** Unique name within this creator's account for this Token's collection */\n  collection: string;\n\n  /** Name of Token */\n  name: string;\n}\n\nexport interface TokenId {\n  token_data_id: TokenDataId;\n\n  /** version number of the property map */\n  property_version: string;\n}\n\n/** server will return string for u64 */\ntype U64 = string;\n\nexport class Token {\n  id: TokenId;\n\n  /** server will return string for u64 */\n  amount: U64;\n\n  /** the property map of the token */\n  token_properties: PropertyMap;\n\n  constructor(id: TokenId, amount: U64, token_properties: any) {\n    this.id = id;\n    this.amount = amount;\n    this.token_properties = deserializePropertyMap(token_properties);\n  }\n}\n","// Copyright (c) Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable max-len */\n\nimport { AptosAccount } from \"./aptos_account\";\nimport { AptosClient, OptionalTransactionArgs } from \"./aptos_client\";\nimport * as TokenTypes from \"./token_types\";\nimport * as Gen from \"./generated/index\";\nimport { HexString, MaybeHexString } from \"./hex_string\";\nimport { TransactionBuilder, TransactionBuilderABI, TxnBuilderTypes } from \"./transaction_builder\";\nimport { MAX_U64_BIG_INT } from \"./bcs/consts\";\nimport { TOKEN_ABIS, TOKEN_TRANSFER_OPT_IN } from \"./abis\";\nimport { AnyNumber, bcsToBytes, Bytes } from \"./bcs\";\nimport { getPropertyValueRaw, PropertyMap } from \"./utils/property_map_serde\";\nimport {\n  Script,\n  TransactionArgumentAddress,\n  TransactionArgumentU64,\n  TransactionArgumentU8Vector,\n  TransactionPayloadScript,\n} from \"./aptos_types\";\nimport { Token, TokenData } from \"./token_types\";\n\n/**\n * Class for creating, minting and managing minting NFT collections and tokens\n */\nexport class TokenClient {\n  aptosClient: AptosClient;\n\n  transactionBuilder: TransactionBuilderABI;\n\n  /**\n   * Creates new TokenClient instance\n   *\n   * @param aptosClient AptosClient instance\n   */\n  constructor(aptosClient: AptosClient) {\n    this.aptosClient = aptosClient;\n    this.transactionBuilder = new TransactionBuilderABI(TOKEN_ABIS.map((abi) => new HexString(abi).toUint8Array()));\n  }\n\n  /**\n   * Creates a new NFT collection within the specified account\n   *\n   * @param account AptosAccount where collection will be created\n   * @param name Collection name\n   * @param description Collection description\n   * @param uri URL to additional info about collection\n   * @param maxAmount Maximum number of `token_data` allowed within this collection\n   * @returns The hash of the transaction submitted to the API\n   */\n  // :!:>createCollection\n  async createCollection(\n    account: AptosAccount,\n    name: string,\n    description: string,\n    uri: string,\n    maxAmount: AnyNumber = MAX_U64_BIG_INT,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // <:!:createCollection\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token::create_collection_script\",\n      [],\n      [name, description, uri, maxAmount, [false, false, false]],\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n\n  /**\n   * Creates a new NFT within the specified account\n   *\n   * @param account AptosAccount where token will be created\n   * @param collectionName Name of collection, that token belongs to\n   * @param name Token name\n   * @param description Token description\n   * @param supply Token supply\n   * @param uri URL to additional info about token\n   * @param max The maxium of tokens can be minted from this token\n   * @param royalty_payee_address the address to receive the royalty, the address can be a shared account address.\n   * @param royalty_points_denominator the denominator for calculating royalty\n   * @param royalty_points_numerator the numerator for calculating royalty\n   * @param property_keys the property keys for storing on-chain properties\n   * @param property_values the property values to be stored on-chain\n   * @param property_types the type of property values\n   * @returns The hash of the transaction submitted to the API\n   */\n  // :!:>createToken\n  async createToken(\n    account: AptosAccount,\n    collectionName: string,\n    name: string,\n    description: string,\n    supply: number,\n    uri: string,\n    max: AnyNumber = MAX_U64_BIG_INT,\n    royalty_payee_address: MaybeHexString = account.address(),\n    royalty_points_denominator: number = 0,\n    royalty_points_numerator: number = 0,\n    property_keys: Array<string> = [],\n    property_values: Array<string> = [],\n    property_types: Array<string> = [],\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // <:!:createToken\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token::create_token_script\",\n      [],\n      [\n        collectionName,\n        name,\n        description,\n        supply,\n        max,\n        uri,\n        royalty_payee_address,\n        royalty_points_denominator,\n        royalty_points_numerator,\n        [false, false, false, false, false],\n        property_keys,\n        getPropertyValueRaw(property_values, property_types),\n        property_types,\n      ],\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n\n  /**\n   * Creates a new NFT within the specified account\n   *\n   * @param account AptosAccount where token will be created\n   * @param collectionName Name of collection, that token belongs to\n   * @param name Token name\n   * @param description Token description\n   * @param supply Token supply\n   * @param uri URL to additional info about token\n   * @param max The maxium of tokens can be minted from this token\n   * @param royalty_payee_address the address to receive the royalty, the address can be a shared account address.\n   * @param royalty_points_denominator the denominator for calculating royalty\n   * @param royalty_points_numerator the numerator for calculating royalty\n   * @param property_keys the property keys for storing on-chain properties\n   * @param property_values the property values to be stored on-chain\n   * @param property_types the type of property values\n   * @param mutability_config configs which field is mutable\n   * @returns The hash of the transaction submitted to the API\n   */\n  // :!:>createToken\n  async createTokenWithMutabilityConfig(\n    account: AptosAccount,\n    collectionName: string,\n    name: string,\n    description: string,\n    supply: AnyNumber,\n    uri: string,\n    max: AnyNumber = MAX_U64_BIG_INT,\n    royalty_payee_address: MaybeHexString = account.address(),\n    royalty_points_denominator: AnyNumber = 0,\n    royalty_points_numerator: AnyNumber = 0,\n    property_keys: Array<string> = [],\n    property_values: Array<Bytes> = [],\n    property_types: Array<string> = [],\n    mutability_config: Array<boolean> = [false, false, false, false, false],\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // <:!:createToken\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token::create_token_script\",\n      [],\n      [\n        collectionName,\n        name,\n        description,\n        supply,\n        max,\n        uri,\n        royalty_payee_address,\n        royalty_points_denominator,\n        royalty_points_numerator,\n        mutability_config,\n        property_keys,\n        property_values,\n        property_types,\n      ],\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n\n  /**\n   * Transfers specified amount of tokens from account to receiver\n   *\n   * @param account AptosAccount where token from which tokens will be transfered\n   * @param receiver  Hex-encoded 32 byte Aptos account address to which tokens will be transfered\n   * @param creator Hex-encoded 32 byte Aptos account address to which created tokens\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param amount Amount of tokens which will be transfered\n   * @param property_version the version of token PropertyMap with a default value 0.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async offerToken(\n    account: AptosAccount,\n    receiver: MaybeHexString,\n    creator: MaybeHexString,\n    collectionName: string,\n    name: string,\n    amount: number,\n    property_version: number = 0,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token_transfers::offer_script\",\n      [],\n      [receiver, creator, collectionName, name, property_version, amount],\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n\n  /**\n   * Claims a token on specified account\n   *\n   * @param account AptosAccount which will claim token\n   * @param sender Hex-encoded 32 byte Aptos account address which holds a token\n   * @param creator Hex-encoded 32 byte Aptos account address which created a token\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param property_version the version of token PropertyMap with a default value 0.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async claimToken(\n    account: AptosAccount,\n    sender: MaybeHexString,\n    creator: MaybeHexString,\n    collectionName: string,\n    name: string,\n    property_version: number = 0,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token_transfers::claim_script\",\n      [],\n      [sender, creator, collectionName, name, property_version],\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n\n  /**\n   * Removes a token from pending claims list\n   *\n   * @param account AptosAccount which will remove token from pending list\n   * @param receiver Hex-encoded 32 byte Aptos account address which had to claim token\n   * @param creator Hex-encoded 32 byte Aptos account address which created a token\n   * @param collectionName Name of collection where token is strored\n   * @param name Token name\n   * @param property_version the version of token PropertyMap with a default value 0.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async cancelTokenOffer(\n    account: AptosAccount,\n    receiver: MaybeHexString,\n    creator: MaybeHexString,\n    collectionName: string,\n    name: string,\n    property_version: number = 0,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token_transfers::cancel_offer_script\",\n      [],\n      [receiver, creator, collectionName, name, property_version],\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n\n  /**\n   * Directly transfer the specified amount of tokens from account to receiver\n   * using a single multi signature transaction.\n   *\n   * @param sender AptosAccount where token from which tokens will be transfered\n   * @param receiver Hex-encoded 32 byte Aptos account address to which tokens will be transfered\n   * @param creator Hex-encoded 32 byte Aptos account address to which created tokens\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param amount Amount of tokens which will be transfered\n   * @param property_version the version of token PropertyMap with a default value 0.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async directTransferToken(\n    sender: AptosAccount,\n    receiver: AptosAccount,\n    creator: MaybeHexString,\n    collectionName: string,\n    name: string,\n    amount: AnyNumber,\n    propertyVersion: AnyNumber = 0,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token::direct_transfer_script\",\n      [],\n      [creator, collectionName, name, propertyVersion, amount],\n    );\n\n    const rawTxn = await this.aptosClient.generateRawTransaction(sender.address(), payload, extraArgs);\n    const multiAgentTxn = new TxnBuilderTypes.MultiAgentRawTransaction(rawTxn, [\n      TxnBuilderTypes.AccountAddress.fromHex(receiver.address()),\n    ]);\n\n    const senderSignature = new TxnBuilderTypes.Ed25519Signature(\n      sender.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array(),\n    );\n\n    const senderAuthenticator = new TxnBuilderTypes.AccountAuthenticatorEd25519(\n      new TxnBuilderTypes.Ed25519PublicKey(sender.signingKey.publicKey),\n      senderSignature,\n    );\n\n    const receiverSignature = new TxnBuilderTypes.Ed25519Signature(\n      receiver.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array(),\n    );\n\n    const receiverAuthenticator = new TxnBuilderTypes.AccountAuthenticatorEd25519(\n      new TxnBuilderTypes.Ed25519PublicKey(receiver.signingKey.publicKey),\n      receiverSignature,\n    );\n\n    const multiAgentAuthenticator = new TxnBuilderTypes.TransactionAuthenticatorMultiAgent(\n      senderAuthenticator,\n      [TxnBuilderTypes.AccountAddress.fromHex(receiver.address())], // Secondary signer addresses\n      [receiverAuthenticator], // Secondary signer authenticators\n    );\n\n    const bcsTxn = bcsToBytes(new TxnBuilderTypes.SignedTransaction(rawTxn, multiAgentAuthenticator));\n\n    const transactionRes = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n\n    return transactionRes.hash;\n  }\n\n  /**\n   * User opt-in or out direct transfer through a boolean flag\n   *\n   * @param sender AptosAccount where the token will be transferred\n   * @param optIn boolean value indicates user want to opt-in or out of direct transfer\n   * @returns The hash of the transaction submitted to the API\n   */\n  async optInTokenTransfer(sender: AptosAccount, optIn: boolean, extraArgs?: OptionalTransactionArgs): Promise<string> {\n    const payload = this.transactionBuilder.buildTransactionPayload(\"0x3::token::opt_in_direct_transfer\", [], [optIn]);\n\n    return this.aptosClient.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n\n  /**\n   * Directly transfer token to a receiver. The receiver should have opted in to direct transfer\n   *\n   * @param sender AptosAccount where the token will be transferred\n   * @param creator  address of the token creator\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param property_version the version of token PropertyMap\n   * @param amount Amount of tokens which will be transfered\n   * @returns The hash of the transaction submitted to the API\n   */\n  async transferWithOptIn(\n    sender: AptosAccount,\n    creator: MaybeHexString,\n    collectionName: string,\n    tokenName: string,\n    propertyVersion: AnyNumber,\n    receiver: MaybeHexString,\n    amount: AnyNumber,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // compile script to invoke public transfer function\n    const payload = new TransactionPayloadScript(\n      new Script(\n        new HexString(TOKEN_TRANSFER_OPT_IN).toUint8Array(),\n        [],\n        [\n          new TransactionArgumentAddress(TxnBuilderTypes.AccountAddress.fromHex(creator)),\n          new TransactionArgumentU8Vector(new TextEncoder().encode(collectionName)),\n          new TransactionArgumentU8Vector(new TextEncoder().encode(tokenName)),\n          new TransactionArgumentU64(BigInt(propertyVersion)),\n          new TransactionArgumentAddress(TxnBuilderTypes.AccountAddress.fromHex(receiver)),\n          new TransactionArgumentU64(BigInt(amount)),\n        ],\n      ),\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n\n  /**\n   * BurnToken by Creator\n   *\n   * @param creator creator of the token\n   * @param ownerAddress address of the token owner\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param amount Amount of tokens which will be transfered\n   * @param property_version the version of token PropertyMap\n   * @returns The hash of the transaction submitted to the API\n   */\n  async burnByCreator(\n    creator: AptosAccount,\n    ownerAddress: MaybeHexString,\n    collection: String,\n    name: String,\n    PropertyVersion: AnyNumber,\n    amount: AnyNumber,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token::burn_by_creator\",\n      [],\n      [ownerAddress, collection, name, PropertyVersion, amount],\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(creator, payload, extraArgs);\n  }\n\n  /**\n   * BurnToken by Owner\n   *\n   * @param owner creator of the token\n   * @param creatorAddress address of the token creator\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param amount Amount of tokens which will be transfered\n   * @param property_version the version of token PropertyMap\n   * @returns The hash of the transaction submitted to the API\n   */\n  async burnByOwner(\n    owner: AptosAccount,\n    creatorAddress: MaybeHexString,\n    collection: String,\n    name: String,\n    PropertyVersion: AnyNumber,\n    amount: AnyNumber,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token::burn\",\n      [],\n      [creatorAddress, collection, name, PropertyVersion, amount],\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(owner, payload, extraArgs);\n  }\n\n  /**\n   * creator mutates the properties of the tokens\n   *\n   * @param account AptosAccount who modifies the token properties\n   * @param tokenOwner the address of account owning the token\n   * @param creator the creator of the token\n   * @param collection_name the name of the token collection\n   * @param tokenName the name of created token\n   * @param propertyVersion the property_version of the token to be modified\n   * @param amount the number of tokens to be modified\n   *\n   * @returns The hash of the transaction submitted to the API\n   */\n  async mutateTokenProperties(\n    account: AptosAccount,\n    tokenOwner: HexString,\n    creator: HexString,\n    collection_name: string,\n    tokenName: string,\n    propertyVersion: AnyNumber,\n    amount: AnyNumber,\n    keys: Array<string>,\n    values: Array<Bytes>,\n    types: Array<string>,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const payload = this.transactionBuilder.buildTransactionPayload(\n      \"0x3::token::mutate_token_properties\",\n      [],\n      [tokenOwner, creator, collection_name, tokenName, propertyVersion, amount, keys, values, types],\n    );\n\n    return this.aptosClient.generateSignSubmitTransaction(account, payload, extraArgs);\n  }\n\n  /**\n   * Queries collection data\n   * @param creator Hex-encoded 32 byte Aptos account address which created a collection\n   * @param collectionName Collection name\n   * @returns Collection data in below format\n   * ```\n   *  Collection {\n   *    // Describes the collection\n   *    description: string,\n   *    // Unique name within this creators account for this collection\n   *    name: string,\n   *    // URL for additional information/media\n   *    uri: string,\n   *    // Total number of distinct Tokens tracked by the collection\n   *    count: number,\n   *    // Optional maximum number of tokens allowed within this collections\n   *    maximum: number\n   *  }\n   * ```\n   */\n  async getCollectionData(creator: MaybeHexString, collectionName: string): Promise<any> {\n    const resources = await this.aptosClient.getAccountResources(creator);\n    const accountResource: { type: Gen.MoveStructTag; data: any } = resources.find(\n      (r) => r.type === \"0x3::token::Collections\",\n    )!;\n    const { handle }: { handle: string } = accountResource.data.collection_data;\n    const getCollectionTableItemRequest: Gen.TableItemRequest = {\n      key_type: \"0x1::string::String\",\n      value_type: \"0x3::token::CollectionData\",\n      key: collectionName,\n    };\n\n    const collectionTable = await this.aptosClient.getTableItem(handle, getCollectionTableItemRequest);\n    return collectionTable;\n  }\n\n  /**\n   * Queries token data from collection\n   *\n   * @param creator Hex-encoded 32 byte Aptos account address which created a token\n   * @param collectionName Name of collection, which holds a token\n   * @param tokenName Token name\n   * @returns Token data in below format\n   * ```\n   * TokenData {\n   *     // Unique name within this creators account for this Token's collection\n   *     collection: string;\n   *     // Describes this Token\n   *     description: string;\n   *     // The name of this Token\n   *     name: string;\n   *     // Optional maximum number of this type of Token.\n   *     maximum: number;\n   *     // Total number of this type of Token\n   *     supply: number;\n   *     /// URL for additional information / media\n   *     uri: string;\n   *   }\n   * ```\n   */\n  // :!:>getTokenData\n  async getTokenData(\n    creator: MaybeHexString,\n    collectionName: string,\n    tokenName: string,\n  ): Promise<TokenTypes.TokenData> {\n    const creatorHex = creator instanceof HexString ? creator.hex() : creator;\n    const collection: { type: Gen.MoveStructTag; data: any } = await this.aptosClient.getAccountResource(\n      creatorHex,\n      \"0x3::token::Collections\",\n    );\n    const { handle } = collection.data.token_data;\n    const tokenDataId = {\n      creator: creatorHex,\n      collection: collectionName,\n      name: tokenName,\n    };\n\n    const getTokenTableItemRequest: Gen.TableItemRequest = {\n      key_type: \"0x3::token::TokenDataId\",\n      value_type: \"0x3::token::TokenData\",\n      key: tokenDataId,\n    };\n\n    // We know the response will be a struct containing TokenData, hence the\n    // implicit cast.\n    const rawTokenData = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n    return new TokenData(\n      rawTokenData.collection,\n      rawTokenData.description,\n      rawTokenData.name,\n      rawTokenData.maximum,\n      rawTokenData.supply,\n      rawTokenData.uri,\n      rawTokenData.default_properties,\n      rawTokenData.mutability_config,\n    );\n  } // <:!:getTokenData\n\n  /**\n   * Queries token balance for the token creator\n   */\n  async getToken(\n    creator: MaybeHexString,\n    collectionName: string,\n    tokenName: string,\n    property_version: string = \"0\",\n  ): Promise<TokenTypes.Token> {\n    const tokenDataId: TokenTypes.TokenDataId = {\n      creator: creator instanceof HexString ? creator.hex() : creator,\n      collection: collectionName,\n      name: tokenName,\n    };\n    return this.getTokenForAccount(creator, {\n      token_data_id: tokenDataId,\n      property_version,\n    });\n  }\n\n  /**\n   * Queries token balance for a token account\n   * @param account Hex-encoded 32 byte Aptos account address which created a token\n   * @param tokenId token id\n   *\n   * TODO: Update this:\n   * @example\n   * ```\n   * {\n   *   creator: '0x1',\n   *   collection: 'Some collection',\n   *   name: 'Awesome token'\n   * }\n   * ```\n   * @returns Token object in below format\n   * ```\n   * Token {\n   *   id: TokenId;\n   *   value: number;\n   * }\n   * ```\n   */\n  async getTokenForAccount(account: MaybeHexString, tokenId: TokenTypes.TokenId): Promise<TokenTypes.Token> {\n    const tokenStore: { type: Gen.MoveStructTag; data: any } = await this.aptosClient.getAccountResource(\n      account instanceof HexString ? account.hex() : account,\n      \"0x3::token::TokenStore\",\n    );\n    const { handle } = tokenStore.data.tokens;\n\n    const getTokenTableItemRequest: Gen.TableItemRequest = {\n      key_type: \"0x3::token::TokenId\",\n      value_type: \"0x3::token::Token\",\n      key: tokenId,\n    };\n\n    try {\n      const rawToken = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n      return new Token(rawToken.id, rawToken.amount, rawToken.token_properties);\n    } catch (error: any) {\n      if (error?.status === 404) {\n        return {\n          id: tokenId,\n          amount: \"0\",\n          token_properties: new PropertyMap(),\n        };\n      }\n      return error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}